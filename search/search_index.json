{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b61\u8fce\u4f86\u5230 FJCU CPC \u8a13\u7df4\u7db2 \u672c\u7db2\u7ad9\u7528\u65bc\u8f14\u4ec1\u5927\u5b78\u6821\u5167\u7a0b\u5f0f\u7af6\u8cfd\uff0c\u57f9\u8a13\u8b1b\u7fa9\u5b58\u653e\u8655\u3002 \u539f\u8b1b\u7fa9 \u7528 Tex \u5beb\uff0c\u5f8c\u611f\u53d7\u5230\u7dad\u8b77\u4e4b\u56f0\u96e3\uff0c\u53c3\u8003\u4e86 OI Wiki \uff0c\u5229\u7528 mkdocs \u5efa\u7acb\u4e00\u500b\u958b\u653e\u81ea\u7531\u7de8\u8f2f\u7684\u7db2\u7ad9\u3002 \u76ee\u524d\u5df2\u5c07\u539f\u8b1b\u7fa9\u5927\u90e8\u5206\u5167\u5bb9\u642c\u81f3\u65bc\u6b64\uff0c\u73fe\u5728\u81f4\u529b\u65bc\u5de5\u5177\u7bc7\u548c\u8a9e\u6cd5\u7bc7\u7684\u64b0\u5beb\u3002 \u672c\u7db2\u7ad9\u53d7\u5230 OI Wiki \u555f\u767c\uff0c\u53c3\u8003\u4e86 github repo \u5efa\u7acb\uff0c\u5728\u6b64\u611f\u8b1d\u3002","title":"\u9996\u9801"},{"location":"#fjcu-cpc","text":"\u672c\u7db2\u7ad9\u7528\u65bc\u8f14\u4ec1\u5927\u5b78\u6821\u5167\u7a0b\u5f0f\u7af6\u8cfd\uff0c\u57f9\u8a13\u8b1b\u7fa9\u5b58\u653e\u8655\u3002 \u539f\u8b1b\u7fa9 \u7528 Tex \u5beb\uff0c\u5f8c\u611f\u53d7\u5230\u7dad\u8b77\u4e4b\u56f0\u96e3\uff0c\u53c3\u8003\u4e86 OI Wiki \uff0c\u5229\u7528 mkdocs \u5efa\u7acb\u4e00\u500b\u958b\u653e\u81ea\u7531\u7de8\u8f2f\u7684\u7db2\u7ad9\u3002 \u76ee\u524d\u5df2\u5c07\u539f\u8b1b\u7fa9\u5927\u90e8\u5206\u5167\u5bb9\u642c\u81f3\u65bc\u6b64\uff0c\u73fe\u5728\u81f4\u529b\u65bc\u5de5\u5177\u7bc7\u548c\u8a9e\u6cd5\u7bc7\u7684\u64b0\u5beb\u3002 \u672c\u7db2\u7ad9\u53d7\u5230 OI Wiki \u555f\u767c\uff0c\u53c3\u8003\u4e86 github repo \u5efa\u7acb\uff0c\u5728\u6b64\u611f\u8b1d\u3002","title":"\u6b61\u8fce\u4f86\u5230 FJCU CPC \u8a13\u7df4\u7db2"},{"location":"algorithm/","text":"","title":"\u4f55\u8b02\u6f14\u7b97\u6cd5"},{"location":"algorithm/binarySearch/","text":"\u4e8c\u5206\u641c \u5c0d\u65bc\u4e00\u500b\u51fd\u6578 F(n) \uff0c\u5982\u679c\u5b58\u5728\u4e00\u500b x\uff0c\u5c0d\u65bc\u6240\u6709 \\\\geq x \u7684 a\uff0c F(a)= true\uff0c\u53cd\u4e4b F(a)= false\uff0c\u57fa\u65bc\u9019\u6a23\u7684\u55ae\u8abf\u6027\uff0c\u5c31\u53ef\u4ee5\u7528\u4e8c\u5206\u641c\u3002 T binary_search() { while (L < R) { int M = (L + R) >> 1; if (F(M)) R = M; else L = M + 1; } return L; } \u6709\u4e9b\u984c\u76ee\u70ba \"\u6700\u591a/\u6700\u5c11\u70ba\u4f55\u6703\u6210\u7acb\"\uff0c\u90a3\u9ebc\u5982\u679c\u4f60\u53ef\u4ee5\u5728\u826f\u597d\u7684\u6642\u9593\u6aa2\u67e5\u51fa \" \u5982\u679c\u4ee3\u50f9\u662f x \uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u9054\u6210\u76ee\u6a19 \"\uff0c\u4e26\u4e14 x \u5177\u6709\u55ae\u8abf\u6027\uff0c\u90a3\u9ebc\u4f60\u53ef\u4ee5\u8f49\u63db\u6210 \" \u5982\u679c\u4ee3\u50f9\u662f x \uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u9054\u6210\u76ee\u6a19 \" \u50b3\u63db\u6210 F(x) \uff0c\u5c0d\u7b54\u6848\uff08x\uff09\u9032\u884c\u4e8c\u5206\u641c\u3002 \u4e8c\u5206\u641c\u8981\u6ce8\u610f\u5169\u4ef6\u4e8b\uff0c\u4e00\u500b\u662f\u7121\u9650\u8ff4\u5708\uff0c\u8981\u907f\u514d\u5b83\u53ef\u4ee5\u5728\u8166\u4e2d\u5148\u6a21\u64ec\u4e00\u4e0b\u3002\u4e00\u500b\u662f\u5728\u5be6\u6578\u4e2d\u4e8c\u5206\u641c\uff0c\u56e0\u70ba\u5be6\u6578\u7684\u7a20\u5bc6\u6027\uff0c\u984c\u76ee\u6703\u6709\u8aa4\u5dee\u5bb9\u5fcd\uff08\u4f8b\u5982 10^{-6} )\uff0c\u53ea\u8981\u5728\u8aa4\u5dee\u5167\u90fd\u662f\u5bb9\u8a31\u7684\u3002 \u4e09\u5206\u641c \u5c0d\u65bc U \u578b\u51fd\u6578\uff08\u4f8b\u5982 y=F(x)=x^2 )\uff0c\u6211\u5011\u60f3\u8981\u627e\u5c0b\u5176\u6975\u503c\uff0c\u610f\u8b02\u5176\u5de6\u53f3\u5169\u5074\u7686\u5404\u81ea\u905e\u589e/\u905e\u6e1b\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u4e09\u5206\u641c\u4f86\u89e3\u6c7a\uff08\u4e8c\u5206\u641c\u53ea\u80fd\u89e3\u6c7a\u5168\u9ad4\u55ae\u8abf\u6027\uff0c\u4e0d\u80fd\u89e3\u6c7a\u6709\u5169\u908a\u7684\uff09\u3002 \u8003\u616e\u4e09\u5206\u5f8c\u5f9e\u5de6\u5230\u53f3\u56db\u500b\u63a1\u6a23\u9ede\u7684\u95dc\u4fc2 S(a) < S(b) < S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(a) > S(b) < S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(a) > S(b) > S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a S(a) > S(b) > S(c) > S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a \u9019\u6bb5\u63cf\u6558\u9084\u53ef\u4ee5\u518d\u7c21\u5316 S(b) < S(c) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(b) > S(c) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a \u6bcf\u6b21\u90fd\u81f3\u5c11\u53ef\u4ee5\u8b93\u5340\u9593\u7e2e\u5c0f \\frac{1}{3} double trinary_search(double l, double r) { static const double EPS = 1e\u22127; while (r\u2212l > EPS) { double ml = (l + l + r) / 3, mr = (l + r + r) / 3; if (f(mr) > f(ml)) r = mr; else l = ml; } return l; }","title":"\u4e8c\u5206\u641c"},{"location":"algorithm/binarySearch/#_1","text":"\u5c0d\u65bc\u4e00\u500b\u51fd\u6578 F(n) \uff0c\u5982\u679c\u5b58\u5728\u4e00\u500b x\uff0c\u5c0d\u65bc\u6240\u6709 \\\\geq x \u7684 a\uff0c F(a)= true\uff0c\u53cd\u4e4b F(a)= false\uff0c\u57fa\u65bc\u9019\u6a23\u7684\u55ae\u8abf\u6027\uff0c\u5c31\u53ef\u4ee5\u7528\u4e8c\u5206\u641c\u3002 T binary_search() { while (L < R) { int M = (L + R) >> 1; if (F(M)) R = M; else L = M + 1; } return L; } \u6709\u4e9b\u984c\u76ee\u70ba \"\u6700\u591a/\u6700\u5c11\u70ba\u4f55\u6703\u6210\u7acb\"\uff0c\u90a3\u9ebc\u5982\u679c\u4f60\u53ef\u4ee5\u5728\u826f\u597d\u7684\u6642\u9593\u6aa2\u67e5\u51fa \" \u5982\u679c\u4ee3\u50f9\u662f x \uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u9054\u6210\u76ee\u6a19 \"\uff0c\u4e26\u4e14 x \u5177\u6709\u55ae\u8abf\u6027\uff0c\u90a3\u9ebc\u4f60\u53ef\u4ee5\u8f49\u63db\u6210 \" \u5982\u679c\u4ee3\u50f9\u662f x \uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u9054\u6210\u76ee\u6a19 \" \u50b3\u63db\u6210 F(x) \uff0c\u5c0d\u7b54\u6848\uff08x\uff09\u9032\u884c\u4e8c\u5206\u641c\u3002 \u4e8c\u5206\u641c\u8981\u6ce8\u610f\u5169\u4ef6\u4e8b\uff0c\u4e00\u500b\u662f\u7121\u9650\u8ff4\u5708\uff0c\u8981\u907f\u514d\u5b83\u53ef\u4ee5\u5728\u8166\u4e2d\u5148\u6a21\u64ec\u4e00\u4e0b\u3002\u4e00\u500b\u662f\u5728\u5be6\u6578\u4e2d\u4e8c\u5206\u641c\uff0c\u56e0\u70ba\u5be6\u6578\u7684\u7a20\u5bc6\u6027\uff0c\u984c\u76ee\u6703\u6709\u8aa4\u5dee\u5bb9\u5fcd\uff08\u4f8b\u5982 10^{-6} )\uff0c\u53ea\u8981\u5728\u8aa4\u5dee\u5167\u90fd\u662f\u5bb9\u8a31\u7684\u3002","title":"\u4e8c\u5206\u641c"},{"location":"algorithm/binarySearch/#_2","text":"\u5c0d\u65bc U \u578b\u51fd\u6578\uff08\u4f8b\u5982 y=F(x)=x^2 )\uff0c\u6211\u5011\u60f3\u8981\u627e\u5c0b\u5176\u6975\u503c\uff0c\u610f\u8b02\u5176\u5de6\u53f3\u5169\u5074\u7686\u5404\u81ea\u905e\u589e/\u905e\u6e1b\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u4e09\u5206\u641c\u4f86\u89e3\u6c7a\uff08\u4e8c\u5206\u641c\u53ea\u80fd\u89e3\u6c7a\u5168\u9ad4\u55ae\u8abf\u6027\uff0c\u4e0d\u80fd\u89e3\u6c7a\u6709\u5169\u908a\u7684\uff09\u3002 \u8003\u616e\u4e09\u5206\u5f8c\u5f9e\u5de6\u5230\u53f3\u56db\u500b\u63a1\u6a23\u9ede\u7684\u95dc\u4fc2 S(a) < S(b) < S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(a) > S(b) < S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(a) > S(b) > S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a S(a) > S(b) > S(c) > S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a \u9019\u6bb5\u63cf\u6558\u9084\u53ef\u4ee5\u518d\u7c21\u5316 S(b) < S(c) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(b) > S(c) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a \u6bcf\u6b21\u90fd\u81f3\u5c11\u53ef\u4ee5\u8b93\u5340\u9593\u7e2e\u5c0f \\frac{1}{3} double trinary_search(double l, double r) { static const double EPS = 1e\u22127; while (r\u2212l > EPS) { double ml = (l + l + r) / 3, mr = (l + r + r) / 3; if (f(mr) > f(ml)) r = mr; else l = ml; } return l; }","title":"\u4e09\u5206\u641c"},{"location":"algorithm/divideAndConquer/","text":"\u5206\u6cbb \u5206\u6cbb\u6cd5\u6703\u628a\u554f\u984c\u5206\u89e3\u6210\u5b50\u554f\u984c\uff08\u5206\uff09\uff0c\u89e3\u6c7a\u5b8c\u518d\u5408\u4f75\u56de\u539f\u672c\u7684\u554f\u984c\uff08\u6cbb\uff09\u3002\\\u5206\u6cbb\u5206\u6210\u4ee5\u4e0b\u6b65\u9a5f \u5207\u5272\uff1a\u628a\u4e00\u500b\u554f\u984c\u5207\u6210\u5b50\u554f\u984c\u7136\u5f8c\u905e\u8ff4 \u78b0\u5e95\uff1a\u78b0\u5230\u4e0d\u80fd\u518d\u5207\u5272\u6216\u662f\u660e\u986f\u6709\u7b54\u6848\uff08\u4e5f\u8a31\u7121\u89e3\uff09\uff0c\u5c31\u7b97\u51fa\u7b54\u6848\u518d\u56de\u50b3 \u5408\u4f75\uff1a\u5229\u7528\u50b3\u56de\u4f86\u7684\u5b50\u554f\u984c\u7b97\u51fa\u7b54\u6848\u7136\u5f8c\u56de\u50b3 \u5408\u4f75\u6392\u5e8f\u6cd5 \u4e00\u500b\u5229\u7528\u5206\u6cbb\u5be6\u4f5c\u7684\u6392\u5e8f\u6cd5\uff0c\u9006\u5e8f\u6578\u5c0d\u4e5f\u6703\u5229\u7528\u4ed6\u7684\u6982\u5ff5\u4f86\u5be6\u4f5c\u3002 \u5207\u5272\uff1a\u628a\u5e8f\u5217\u5206\u6210\u5169\u534a\u7136\u5f8c\u905e\u8ff4 \u78b0\u5e95\uff1a\u76f4\u5230\u5e8f\u5217\u9577\u5ea6\u70ba 1\uff0c\u9019\u6642\u5019\u5df2\u70ba\u4e00\u500b\u6392\u597d\u7684\u5e8f\u5217\uff0c\u76f4\u63a5\u56de\u50b3 \u5408\u4f75\uff1a\u5229\u7528\u50b3\u56de\u4f86\u7684\u5169\u4e32\u5e8f\u5217\u9032\u884c\u6392\u5e8f using namespace std; const int N = 100; int arr[N], buf[N]; void sol(int L, int R) { // [L,R) if (R - L <= 1) return; int M = (R + L) / 2; sol(L, M); sol(M, R); int i = L, j = M, k = L; while (i < M || j < R) { if (i >= M) buf[k] = arr[j++]; else if (j >= R) buf[k] = arr[i++]; else { if (arr[i] <= arr[j]) buf[k] = arr[i++]; else { buf[k] = arr[j++]; } } k++; } for (int k = L; k < R; k++) arr[k] = buf[k]; return; }","title":"\u5206\u6cbb"},{"location":"algorithm/divideAndConquer/#_1","text":"\u5206\u6cbb\u6cd5\u6703\u628a\u554f\u984c\u5206\u89e3\u6210\u5b50\u554f\u984c\uff08\u5206\uff09\uff0c\u89e3\u6c7a\u5b8c\u518d\u5408\u4f75\u56de\u539f\u672c\u7684\u554f\u984c\uff08\u6cbb\uff09\u3002\\\u5206\u6cbb\u5206\u6210\u4ee5\u4e0b\u6b65\u9a5f \u5207\u5272\uff1a\u628a\u4e00\u500b\u554f\u984c\u5207\u6210\u5b50\u554f\u984c\u7136\u5f8c\u905e\u8ff4 \u78b0\u5e95\uff1a\u78b0\u5230\u4e0d\u80fd\u518d\u5207\u5272\u6216\u662f\u660e\u986f\u6709\u7b54\u6848\uff08\u4e5f\u8a31\u7121\u89e3\uff09\uff0c\u5c31\u7b97\u51fa\u7b54\u6848\u518d\u56de\u50b3 \u5408\u4f75\uff1a\u5229\u7528\u50b3\u56de\u4f86\u7684\u5b50\u554f\u984c\u7b97\u51fa\u7b54\u6848\u7136\u5f8c\u56de\u50b3","title":"\u5206\u6cbb"},{"location":"algorithm/divideAndConquer/#_2","text":"\u4e00\u500b\u5229\u7528\u5206\u6cbb\u5be6\u4f5c\u7684\u6392\u5e8f\u6cd5\uff0c\u9006\u5e8f\u6578\u5c0d\u4e5f\u6703\u5229\u7528\u4ed6\u7684\u6982\u5ff5\u4f86\u5be6\u4f5c\u3002 \u5207\u5272\uff1a\u628a\u5e8f\u5217\u5206\u6210\u5169\u534a\u7136\u5f8c\u905e\u8ff4 \u78b0\u5e95\uff1a\u76f4\u5230\u5e8f\u5217\u9577\u5ea6\u70ba 1\uff0c\u9019\u6642\u5019\u5df2\u70ba\u4e00\u500b\u6392\u597d\u7684\u5e8f\u5217\uff0c\u76f4\u63a5\u56de\u50b3 \u5408\u4f75\uff1a\u5229\u7528\u50b3\u56de\u4f86\u7684\u5169\u4e32\u5e8f\u5217\u9032\u884c\u6392\u5e8f using namespace std; const int N = 100; int arr[N], buf[N]; void sol(int L, int R) { // [L,R) if (R - L <= 1) return; int M = (R + L) / 2; sol(L, M); sol(M, R); int i = L, j = M, k = L; while (i < M || j < R) { if (i >= M) buf[k] = arr[j++]; else if (j >= R) buf[k] = arr[i++]; else { if (arr[i] <= arr[j]) buf[k] = arr[i++]; else { buf[k] = arr[j++]; } } k++; } for (int k = L; k < R; k++) arr[k] = buf[k]; return; }","title":"\u5408\u4f75\u6392\u5e8f\u6cd5"},{"location":"algorithm/enumerate/","text":"\u679a\u8209 \u679a\u8209\u662f\u6700\u76f4\u89c0\u7684\u6f14\u7b97\u6cd5\uff0c\u5c07\u6709\u53ef\u80fd\u7684\u7b54\u6848\u90fd\u641c\u904e\u4e00\u904d\uff0c\u7576\u7136\u6c92\u6709\u982d\u7dd2\u7684\u641c\u5c0b\u53ef\u80fd\u6703\u5f97\u5230\u9f90\u5927\u7684\u8907\u96dc\u5ea6\uff0c\u8981\u6839\u64da\u984c\u76ee\u7684\u6027\u8cea\u4f86\u964d\u4f4e\u8907\u96dc\u5ea6\u3002 \u56de\u6714 \u679a\u8209\u6709\u6642\u80fd\u7528\u905e\u8ff4\u5be6\u4f5c\uff0c\u5728\u9047\u5230\u4e0d\u53ef\u80fd\u7684\u60c5\u5f62\u99ac\u4e0a\u56de\u50b3\uff0c\u9019\u7a2e\u65b9\u6cd5\u5c31\u53eb\u505a\u56de\u6714\u310a\u3002 \u7279\u6b8a\u679a\u8209\u65b9\u5f0f \u4e8c\u9032\u4f4d\uff1a\u5229\u7528\u4e8c\u9032\u4f4d\u4f86\u8868\u793a\u96c6\u5408\u5167\u6709\u54ea\u4e9b\u5143\u7d20\u8981\u7528\uff0c\u9032\u800c\u679a\u8209\u6240\u6709\u5143\u7d20\u5b50\u96c6\uff0c\u4f46\u53d7\u9650\u65bc\u6642\u9593\u8907\u96dc\u5ea6 O(2^n) \uff0c\u96c6\u5408\u7684\u5143\u7d20\u500b\u6578\u901a\u5e38\u53ea\u6709 30 \u500b\uff08\u751a\u81f3 15 \u500b\uff09\u3002 \u5b57\u5178\u5e8f\uff1a\u5229\u7528 next_permutation \u6216 prev_permutation \u9054\u5230\u679a\u8209\u5143\u7d20\u7684\u5148\u5f8c\u9806\u5e8f\u3002\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N!) \u6298\u534a\u679a\u8209 \u6709\u6642\u9047\u5230\u8907\u96dc\u5ea6 O(2^n) \u7684\u7b97\u6cd5\uff0c\u5728\u7121\u6cd5\u7528\u5176\u4ed6\u65b9\u6cd5\u964d\u4f4e\u8907\u96dc\u5ea6\uff0c\u53ef\u4ee5\u8a66\u8457\u5c07\u5143\u7d20\u5207\u6210\u5169\u534a\uff0c\u964d\u4f4e n \uff0c\u518d\u7528\u5176\u4ed6\u7b97\u6cd5\u7d44\u5408\u8d77\u4f86\u3002","title":"\u679a\u8209"},{"location":"algorithm/enumerate/#_1","text":"\u679a\u8209\u662f\u6700\u76f4\u89c0\u7684\u6f14\u7b97\u6cd5\uff0c\u5c07\u6709\u53ef\u80fd\u7684\u7b54\u6848\u90fd\u641c\u904e\u4e00\u904d\uff0c\u7576\u7136\u6c92\u6709\u982d\u7dd2\u7684\u641c\u5c0b\u53ef\u80fd\u6703\u5f97\u5230\u9f90\u5927\u7684\u8907\u96dc\u5ea6\uff0c\u8981\u6839\u64da\u984c\u76ee\u7684\u6027\u8cea\u4f86\u964d\u4f4e\u8907\u96dc\u5ea6\u3002","title":"\u679a\u8209"},{"location":"algorithm/enumerate/#_2","text":"\u679a\u8209\u6709\u6642\u80fd\u7528\u905e\u8ff4\u5be6\u4f5c\uff0c\u5728\u9047\u5230\u4e0d\u53ef\u80fd\u7684\u60c5\u5f62\u99ac\u4e0a\u56de\u50b3\uff0c\u9019\u7a2e\u65b9\u6cd5\u5c31\u53eb\u505a\u56de\u6714\u310a\u3002","title":"\u56de\u6714"},{"location":"algorithm/enumerate/#_3","text":"\u4e8c\u9032\u4f4d\uff1a\u5229\u7528\u4e8c\u9032\u4f4d\u4f86\u8868\u793a\u96c6\u5408\u5167\u6709\u54ea\u4e9b\u5143\u7d20\u8981\u7528\uff0c\u9032\u800c\u679a\u8209\u6240\u6709\u5143\u7d20\u5b50\u96c6\uff0c\u4f46\u53d7\u9650\u65bc\u6642\u9593\u8907\u96dc\u5ea6 O(2^n) \uff0c\u96c6\u5408\u7684\u5143\u7d20\u500b\u6578\u901a\u5e38\u53ea\u6709 30 \u500b\uff08\u751a\u81f3 15 \u500b\uff09\u3002 \u5b57\u5178\u5e8f\uff1a\u5229\u7528 next_permutation \u6216 prev_permutation \u9054\u5230\u679a\u8209\u5143\u7d20\u7684\u5148\u5f8c\u9806\u5e8f\u3002\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N!)","title":"\u7279\u6b8a\u679a\u8209\u65b9\u5f0f"},{"location":"algorithm/enumerate/#_4","text":"\u6709\u6642\u9047\u5230\u8907\u96dc\u5ea6 O(2^n) \u7684\u7b97\u6cd5\uff0c\u5728\u7121\u6cd5\u7528\u5176\u4ed6\u65b9\u6cd5\u964d\u4f4e\u8907\u96dc\u5ea6\uff0c\u53ef\u4ee5\u8a66\u8457\u5c07\u5143\u7d20\u5207\u6210\u5169\u534a\uff0c\u964d\u4f4e n \uff0c\u518d\u7528\u5176\u4ed6\u7b97\u6cd5\u7d44\u5408\u8d77\u4f86\u3002","title":"\u6298\u534a\u679a\u8209"},{"location":"algorithm/greedy/","text":"\u8caa\u5fc3 \u5c0d\u65bc\u4e00\u500b\u554f\u984c\uff0c\u59cb\u7d42\u4f7f\u7528\u540c\u4e00\u7a2e\u65b9\u6cd5\uff0c\u63a1\u53d6\u5728\u76ee\u524d\u72c0\u614b\u4e0b\u6700\u597d\u6216\u6700\u4f73\uff08\u5373\u6700\u6709\u5229\uff09\u7684\u9078\u64c7\u3002 \u6709\u7684\u8caa\u5fc3\u5f88\u76f4\u89c0\uff0c\u6709\u7684\u5c31\u9700\u8981\u901a\u9748\u624d\u89e3\u5f97\u51fa\u4f86\uff0c\u5f80\u5f80\u505a\u984c\u76ee\u4e00\u958b\u59cb\u60f3\u5230\u7684\u8fa6\u6cd5\u662f\u932f\u7684\uff0c\u76f4\u5230\u505a\u5230\u4e00\u534a\u624d\u767c\u73fe\u3002\u6240\u4ee5\u6211\u5011\u9700\u8981\u8b49\u660e\u65b9\u6cd5\u662f\u4e0d\u662f\u5c0d\u7684\uff0c\u9019\u5f80\u5f80\u9700\u8981\u6642\u9593\u7df4\u7fd2\uff0c\u624d\u4e0d\u6703\u5230\u6bd4\u8cfd\u9047\u5230\u6642\uff0c\u82b1\u4e86\u5f88\u591a\u6642\u9593\u53bb\u89e3\u984c\u3002 \u8b49\u660e\u7684\u8fa6\u6cd5 \u8a66\u5716\u69cb\u9020\u51fa\u53cd\u4f8b\uff0c\u767c\u73fe\u4ed6\u4e0d\u5b58\u5728\u3002 \u5982\u679c\u5b58\u5728\u66f4\u4f73\u89e3\u7684\u7b54\u6848\u6bd4\u4f60\u505a\u51fa\u4f86\u7684\u9084\u597d\uff0c\u90a3\u9019\u7d44\u89e3\u4e00\u5b9a\u53ef\u4ee5\u518d\u505a\u5f97\u66f4\u597d\uff0c\u9032\u800c\u9054\u5230\u53cd\u8b49\u51fa\u66f4\u4f73\u89e3\u4e0d\u5b58\u5728\u3002 \u4f7f\u7528\u905e\u8ff4\u8b49\u6cd5\uff1a(1) \u8b49\u660e\u57fa\u5e95\u662f\u5c0d\u7684\u3002(2) \u5047\u8a2d\u5c0f\u554f\u984c\u662f\u597d\u7684\u3002(3) \u4f60\u4e00\u5b9a\u53ef\u4ee5\u7528\u6700\u597d\u7684\u65b9\u6cd5\u4f86\u5c07\u554f\u984c\u7c21\u5316\u6210\u525b\u624d\u5047\u8a2d\u662f\u597d\u7684\u5c0f\u554f\u984c\u3002","title":"\u8caa\u5fc3"},{"location":"algorithm/greedy/#_1","text":"\u5c0d\u65bc\u4e00\u500b\u554f\u984c\uff0c\u59cb\u7d42\u4f7f\u7528\u540c\u4e00\u7a2e\u65b9\u6cd5\uff0c\u63a1\u53d6\u5728\u76ee\u524d\u72c0\u614b\u4e0b\u6700\u597d\u6216\u6700\u4f73\uff08\u5373\u6700\u6709\u5229\uff09\u7684\u9078\u64c7\u3002 \u6709\u7684\u8caa\u5fc3\u5f88\u76f4\u89c0\uff0c\u6709\u7684\u5c31\u9700\u8981\u901a\u9748\u624d\u89e3\u5f97\u51fa\u4f86\uff0c\u5f80\u5f80\u505a\u984c\u76ee\u4e00\u958b\u59cb\u60f3\u5230\u7684\u8fa6\u6cd5\u662f\u932f\u7684\uff0c\u76f4\u5230\u505a\u5230\u4e00\u534a\u624d\u767c\u73fe\u3002\u6240\u4ee5\u6211\u5011\u9700\u8981\u8b49\u660e\u65b9\u6cd5\u662f\u4e0d\u662f\u5c0d\u7684\uff0c\u9019\u5f80\u5f80\u9700\u8981\u6642\u9593\u7df4\u7fd2\uff0c\u624d\u4e0d\u6703\u5230\u6bd4\u8cfd\u9047\u5230\u6642\uff0c\u82b1\u4e86\u5f88\u591a\u6642\u9593\u53bb\u89e3\u984c\u3002","title":"\u8caa\u5fc3"},{"location":"algorithm/greedy/#_2","text":"\u8a66\u5716\u69cb\u9020\u51fa\u53cd\u4f8b\uff0c\u767c\u73fe\u4ed6\u4e0d\u5b58\u5728\u3002 \u5982\u679c\u5b58\u5728\u66f4\u4f73\u89e3\u7684\u7b54\u6848\u6bd4\u4f60\u505a\u51fa\u4f86\u7684\u9084\u597d\uff0c\u90a3\u9019\u7d44\u89e3\u4e00\u5b9a\u53ef\u4ee5\u518d\u505a\u5f97\u66f4\u597d\uff0c\u9032\u800c\u9054\u5230\u53cd\u8b49\u51fa\u66f4\u4f73\u89e3\u4e0d\u5b58\u5728\u3002 \u4f7f\u7528\u905e\u8ff4\u8b49\u6cd5\uff1a(1) \u8b49\u660e\u57fa\u5e95\u662f\u5c0d\u7684\u3002(2) \u5047\u8a2d\u5c0f\u554f\u984c\u662f\u597d\u7684\u3002(3) \u4f60\u4e00\u5b9a\u53ef\u4ee5\u7528\u6700\u597d\u7684\u65b9\u6cd5\u4f86\u5c07\u554f\u984c\u7c21\u5316\u6210\u525b\u624d\u5047\u8a2d\u662f\u597d\u7684\u5c0f\u554f\u984c\u3002","title":"\u8b49\u660e\u7684\u8fa6\u6cd5"},{"location":"dataStructure/bst/","text":"set \u548c map \u7686\u70ba\u5e73\u8861\u4e8c\u5143\u6a39\uff0c\u652f\u63f4\u63d2\u5165\u3001\u522a\u9664\u53ca\u67e5\u8a62\u4e00\u500b\u503c\uff0c\u4e0d\u540c\u7684\u662f\uff0cset \u6703\u56de\u50b3\u9375\u503c\uff0cmap \u5247\u662f\u56de\u50b3\u5c0d\u61c9\u503c\uff0c\u4e5f\u53ef\u4ee5\u8aaa set \u7684\u9375\u503c\u548c\u5c0d\u61c9\u503c\u4e00\u6a23 set \u6a19\u982d\u6a94\uff1a <set> \u5efa\u69cb\u5f0f\uff1a set <T1> s s.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) s.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) s.clear() \uff1a\u6e05\u9664\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(size) s.insert(T1 a) \uff1a\u52a0\u5165\u5143\u7d20 a, \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.erase(iterator first,iterator last) \uff1a\u522a\u9664 [first,last) , \u82e5\u6c92\u6709\u6307\u5b9a last \u5247\u53ea\u522a\u9664 first, \u8907\u96dc\u5ea6 O(\\log size) \u8207\u52a0\u4e0a\u5143\u7d20\u500b\u6578\u6709\u95dc\u4fc2\u3002 s.erase(T1 a) \uff1a\u522a\u9664\u9375\u503c a, \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.find(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u9375\u503c a \u7684\u8fed\u4ee3\u5668\uff0c\u82e5\u4e0d\u5b58\u5728\u5247\u56de\u50b3 s.end (), \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.lower_bound(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u7b2c\u4e00\u500b\u9375\u503c\u5927\u65bc\u7b49\u65bc a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 s.upper_bound(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u7b2c\u4e00\u500b\u9375\u503c\u5927\u65bc a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 #include <iostream> #include <set> using namespace std; int main() { set<int> sb; sb.insert(1); sb.insert(2); sb.insert(3); cout << \"1 : \" << (sb.find(1) != sb.end() ? \"find\\n\" : \"not find\\n\"); cout << \"1 : \" << (sb.count(1) ? \"find\\n\" : \"not find\\n\"); sb.erase(1); cout << \"1 : \" << (sb.find(1) != sb.end() ? \"find\\n\" : \"not find\\n\"); cout << \"1 : \" << (sb.count(1) ? \"find\\n\" : \"not find\\n\"); } 1 : find 1 : find 1 : not find 1 : not find map \u6a19\u982d\u6a94\uff1a <map> \u5efa\u69cb\u5f0f\uff1a map <T1, T2> m m.size(),m.empty(),m.clear(),m.erase(iterator first,iterator last),m.erase(T1 a),m.find(T1 a),m.lower_bound(T1 a),m.upper_bound(T1 a) \uff1a\u540c set\u3002 m[a] \uff1a\u5b58\u53d6\u9375\u503c a \u5c0d\u61c9\u7684\u503c\uff0c\u82e5 a \u6c92\u6709\u5c0d\u61c9\u7684\u503c\uff0c\u6703\u63d2\u5165\u4e00\u500b\u5143\u7d20\uff0c\u4f7f a \u5c0d\u61c9\u5230\u9810\u8a2d\u503c\u4e26\u56de\u50b3\u4e4b\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 m.insert(pair<T1,T2> a) \uff1a\u82e5\u6c92\u6709\u9375\u503c\u70ba a.first \u7684\u503c\uff0c\u63d2\u5165\u4e00\u500b\u9375\u503c\u70ba a.first \u7684\u503c\u5c0d\u61c9\u5230 a.second, \u4e26\u56de\u50b3\u4e00\u500b pair,first \u662f\u6307\u5411\u525b\u63d2\u5165\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3001second \u662f true; \u82e5\u5df2\u7d93\u6709\u4e86\uff0c\u56de\u50b3\u4e00\u500b pair,first \u662f\u6307\u5411\u9375\u503c\u70ba k.first \u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0csecond \u662f false\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 #include <iostream> #include <map> using namespace std; int main() { map<string, int> tb; tb[\"123\"] = 1; tb[\"owowowo\"] = 2; tb[\"omomo\"] = 3; cout << \"tb[\\\"123\\\"]: \" << tb[\"123\"] << '\\n'; cout << \"tb[\\\"owowowo\\\"]: \" << tb[\"owowowo\"] << '\\n'; cout << \"tb[\\\"omomo\\\"]: \" << tb[\"omomo\"] << '\\n'; cout << \"123 : \" << (tb.find(\"123\") != tb.end() ? \"find\\n\" : \"not find\\n\"); cout << \"123 : \" << (tb.count(\"123\") ? \"find\\n\" : \"not find\\n\"); tb.clear(); cout << \"123 : \" << (tb.find(\"123\") != tb.end() ? \"find\\n\" : \"not find\\n\"); cout << \"123 : \" << (tb.count(\"123\") ? \"find\\n\" : \"not find\\n\"); cout << \"owo : \" << (tb.find(\"owo\") != tb.end() ? \"find\\n\" : \"not find\\n\"); tb.insert(make_pair(\"owo\", 659)); cout << \"owo : \" << (tb.find(\"owo\") != tb.end() ? \"find\\n\" : \"not find\\n\"); } tb[\"123\"]: 1 tb[\"owowowo\"]: 2 tb[\"omomo\"]: 3 123 : find 123 : find 123 : not find 123 : not find owo : not find owo : find multi - \u7cfb\u5217 \u53ef\u63d2\u5165\u91cd\u8907\u5143\u7d20\uff0c\u4ee3\u50f9\u70ba map \u7121\u6cd5\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 equal_range (T1 a)\uff1a\u56de\u50b3 iterator \u7684 pair<lower_bound (a),upper_bound (a)> \uff0c\u70ba a \u6240\u5728\u7bc4\u570d erase (T1 a)\uff1a\u522a\u9664\u6240\u6709\u5143\u7d20 a\uff0c\u5982\u679c\u53ea\u8981\u522a\u9664\u4e00\u500b\uff0c\u7528 s.erase (s.find (a)) unorder - \u7cfb\u5217 \u964d\u4f4e\u5e38\u6578\uff0c\u671f\u671b\u8907\u96dc\u5ea6\u5c11\u4e00\u500b log\uff0c\u4ee3\u50f9\u70ba\u4e0d\u6703\u6392\u5e8f\uff0c\u6c92\u6709 lower_bound/upper_bound \uff0c\u4e5f\u4e0d\u6703\u4f9d\u9375\u503c\u5927\u5c0f\u904d\u6b77\u3002\u8fed\u4ee3\u5668\u70ba\u55ae\u5411\u3002","title":"\u4e8c\u5143\u5e73\u8861\u6a39"},{"location":"dataStructure/bst/#set","text":"\u6a19\u982d\u6a94\uff1a <set> \u5efa\u69cb\u5f0f\uff1a set <T1> s s.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) s.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) s.clear() \uff1a\u6e05\u9664\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(size) s.insert(T1 a) \uff1a\u52a0\u5165\u5143\u7d20 a, \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.erase(iterator first,iterator last) \uff1a\u522a\u9664 [first,last) , \u82e5\u6c92\u6709\u6307\u5b9a last \u5247\u53ea\u522a\u9664 first, \u8907\u96dc\u5ea6 O(\\log size) \u8207\u52a0\u4e0a\u5143\u7d20\u500b\u6578\u6709\u95dc\u4fc2\u3002 s.erase(T1 a) \uff1a\u522a\u9664\u9375\u503c a, \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.find(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u9375\u503c a \u7684\u8fed\u4ee3\u5668\uff0c\u82e5\u4e0d\u5b58\u5728\u5247\u56de\u50b3 s.end (), \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.lower_bound(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u7b2c\u4e00\u500b\u9375\u503c\u5927\u65bc\u7b49\u65bc a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 s.upper_bound(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u7b2c\u4e00\u500b\u9375\u503c\u5927\u65bc a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 #include <iostream> #include <set> using namespace std; int main() { set<int> sb; sb.insert(1); sb.insert(2); sb.insert(3); cout << \"1 : \" << (sb.find(1) != sb.end() ? \"find\\n\" : \"not find\\n\"); cout << \"1 : \" << (sb.count(1) ? \"find\\n\" : \"not find\\n\"); sb.erase(1); cout << \"1 : \" << (sb.find(1) != sb.end() ? \"find\\n\" : \"not find\\n\"); cout << \"1 : \" << (sb.count(1) ? \"find\\n\" : \"not find\\n\"); } 1 : find 1 : find 1 : not find 1 : not find","title":"set"},{"location":"dataStructure/bst/#map","text":"\u6a19\u982d\u6a94\uff1a <map> \u5efa\u69cb\u5f0f\uff1a map <T1, T2> m m.size(),m.empty(),m.clear(),m.erase(iterator first,iterator last),m.erase(T1 a),m.find(T1 a),m.lower_bound(T1 a),m.upper_bound(T1 a) \uff1a\u540c set\u3002 m[a] \uff1a\u5b58\u53d6\u9375\u503c a \u5c0d\u61c9\u7684\u503c\uff0c\u82e5 a \u6c92\u6709\u5c0d\u61c9\u7684\u503c\uff0c\u6703\u63d2\u5165\u4e00\u500b\u5143\u7d20\uff0c\u4f7f a \u5c0d\u61c9\u5230\u9810\u8a2d\u503c\u4e26\u56de\u50b3\u4e4b\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 m.insert(pair<T1,T2> a) \uff1a\u82e5\u6c92\u6709\u9375\u503c\u70ba a.first \u7684\u503c\uff0c\u63d2\u5165\u4e00\u500b\u9375\u503c\u70ba a.first \u7684\u503c\u5c0d\u61c9\u5230 a.second, \u4e26\u56de\u50b3\u4e00\u500b pair,first \u662f\u6307\u5411\u525b\u63d2\u5165\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3001second \u662f true; \u82e5\u5df2\u7d93\u6709\u4e86\uff0c\u56de\u50b3\u4e00\u500b pair,first \u662f\u6307\u5411\u9375\u503c\u70ba k.first \u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0csecond \u662f false\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 #include <iostream> #include <map> using namespace std; int main() { map<string, int> tb; tb[\"123\"] = 1; tb[\"owowowo\"] = 2; tb[\"omomo\"] = 3; cout << \"tb[\\\"123\\\"]: \" << tb[\"123\"] << '\\n'; cout << \"tb[\\\"owowowo\\\"]: \" << tb[\"owowowo\"] << '\\n'; cout << \"tb[\\\"omomo\\\"]: \" << tb[\"omomo\"] << '\\n'; cout << \"123 : \" << (tb.find(\"123\") != tb.end() ? \"find\\n\" : \"not find\\n\"); cout << \"123 : \" << (tb.count(\"123\") ? \"find\\n\" : \"not find\\n\"); tb.clear(); cout << \"123 : \" << (tb.find(\"123\") != tb.end() ? \"find\\n\" : \"not find\\n\"); cout << \"123 : \" << (tb.count(\"123\") ? \"find\\n\" : \"not find\\n\"); cout << \"owo : \" << (tb.find(\"owo\") != tb.end() ? \"find\\n\" : \"not find\\n\"); tb.insert(make_pair(\"owo\", 659)); cout << \"owo : \" << (tb.find(\"owo\") != tb.end() ? \"find\\n\" : \"not find\\n\"); } tb[\"123\"]: 1 tb[\"owowowo\"]: 2 tb[\"omomo\"]: 3 123 : find 123 : find 123 : not find 123 : not find owo : not find owo : find","title":"map"},{"location":"dataStructure/bst/#multi-","text":"\u53ef\u63d2\u5165\u91cd\u8907\u5143\u7d20\uff0c\u4ee3\u50f9\u70ba map \u7121\u6cd5\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 equal_range (T1 a)\uff1a\u56de\u50b3 iterator \u7684 pair<lower_bound (a),upper_bound (a)> \uff0c\u70ba a \u6240\u5728\u7bc4\u570d erase (T1 a)\uff1a\u522a\u9664\u6240\u6709\u5143\u7d20 a\uff0c\u5982\u679c\u53ea\u8981\u522a\u9664\u4e00\u500b\uff0c\u7528 s.erase (s.find (a))","title":"multi - \u7cfb\u5217"},{"location":"dataStructure/bst/#unorder-","text":"\u964d\u4f4e\u5e38\u6578\uff0c\u671f\u671b\u8907\u96dc\u5ea6\u5c11\u4e00\u500b log\uff0c\u4ee3\u50f9\u70ba\u4e0d\u6703\u6392\u5e8f\uff0c\u6c92\u6709 lower_bound/upper_bound \uff0c\u4e5f\u4e0d\u6703\u4f9d\u9375\u503c\u5927\u5c0f\u904d\u6b77\u3002\u8fed\u4ee3\u5668\u70ba\u55ae\u5411\u3002","title":"unorder - \u7cfb\u5217"},{"location":"dataStructure/heap/","text":"Heap \u7dad\u8b77\u6700\u5927/\u5c0f\u503c\uff0c\u53ef\u63d2\u5165\u3001\u522a\u9664\u3001\u53ca\u8a62\u554f\u6700\u5927/\u5c0f\u503c\uff0c\u4e00\u7a2e\u5be6\u4f5c\u70ba binary heap int heap[N], top = 0; void push(int v) { heap[++top] = v; for (int i = top; i > 1;) { if (heap[i] <= heap[i / 2]) break; swap(heap[i], heap[i / 2]); i <<= 1; } } void pop() { heap[1] = heap[top--]; for (int i = 1; (i << 1) <= top;) { if (heap[i] < heap[i << 1]) { swap(heap[i], heap[i << 1]); i <<= 1; } else if ((i << 1) < top && heap[i] < heap[(i << 1) + 1]) { swap(heap[i], heap[(i << 1) + 1]); i = (i << 1) + 1; } else { break; } } } C++ \u7684 priorty_queue \uff08\u512a\u5148\u968a\u5217\uff09\uff0c\u662f\u4e00\u7a2e Heap \u7684\u5be6\u4f5c\u3002 \u6a19\u982d\u6a94\uff1a <queue> \u5efa\u69cb\u5f0f\uff1a priorty_queue <T> pq \u5efa\u69cb\u5f0f\uff1a priorty_queue <T,Con,Cmp> pq \u5efa\u69cb\u5f0f\uff1a priorty_queue <T,Con,Cmp> pq(iterator first, iterator seecond) \u63d2\u5165 [first,second) \u5167\u7684\u6771\u897f pq.push(T a) \uff1a\u63d2\u5165\u5143\u7d20 a \uff0c\u8907\u96dc\u5ea6 O(\\log size) pq.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(\\log size) pq.top() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) pq.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) pq.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) #include <iostream> #include <queue> using namespace std; int main() { priority_queue<int> Q; Q.push(2); cout << Q.top() << '\\n'; // 2 Q.push(5); cout << Q.top() << '\\n'; // 5 Q.pop(); cout << Q.top() << '\\n'; // 2 Q.push(3); cout << Q.top() << '\\n'; // 3 }","title":"heap"},{"location":"dataStructure/heap/#heap","text":"\u7dad\u8b77\u6700\u5927/\u5c0f\u503c\uff0c\u53ef\u63d2\u5165\u3001\u522a\u9664\u3001\u53ca\u8a62\u554f\u6700\u5927/\u5c0f\u503c\uff0c\u4e00\u7a2e\u5be6\u4f5c\u70ba binary heap int heap[N], top = 0; void push(int v) { heap[++top] = v; for (int i = top; i > 1;) { if (heap[i] <= heap[i / 2]) break; swap(heap[i], heap[i / 2]); i <<= 1; } } void pop() { heap[1] = heap[top--]; for (int i = 1; (i << 1) <= top;) { if (heap[i] < heap[i << 1]) { swap(heap[i], heap[i << 1]); i <<= 1; } else if ((i << 1) < top && heap[i] < heap[(i << 1) + 1]) { swap(heap[i], heap[(i << 1) + 1]); i = (i << 1) + 1; } else { break; } } } C++ \u7684 priorty_queue \uff08\u512a\u5148\u968a\u5217\uff09\uff0c\u662f\u4e00\u7a2e Heap \u7684\u5be6\u4f5c\u3002 \u6a19\u982d\u6a94\uff1a <queue> \u5efa\u69cb\u5f0f\uff1a priorty_queue <T> pq \u5efa\u69cb\u5f0f\uff1a priorty_queue <T,Con,Cmp> pq \u5efa\u69cb\u5f0f\uff1a priorty_queue <T,Con,Cmp> pq(iterator first, iterator seecond) \u63d2\u5165 [first,second) \u5167\u7684\u6771\u897f pq.push(T a) \uff1a\u63d2\u5165\u5143\u7d20 a \uff0c\u8907\u96dc\u5ea6 O(\\log size) pq.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(\\log size) pq.top() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) pq.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) pq.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) #include <iostream> #include <queue> using namespace std; int main() { priority_queue<int> Q; Q.push(2); cout << Q.top() << '\\n'; // 2 Q.push(5); cout << Q.top() << '\\n'; // 5 Q.pop(); cout << Q.top() << '\\n'; // 2 Q.push(3); cout << Q.top() << '\\n'; // 3 }","title":"Heap"},{"location":"dataStructure/list/","text":"List \u9663\u5217\u5982\u679c\u8981\u5f9e\u4e2d\u9593\u63d2\u5165\u4e00\u500b\u5143\u7d20\uff0c\u9700\u8981\u5c07\u5176\u5f8c\u9762\u6240\u6709\u5143\u7d20\u642c\u79fb\u4e00\u683c\uff0c\u9700\u8017\u8cbb O(n) \uff0c\u9023\u7d50\u4e32\u5217\uff08 linklist \uff09\u80fd\u53ea\u82b1 O(1) \u5b8c\u6210\u63d2\u5165\u3002 struct Node { int v; Node *next = nullptr; }; struct Node { int v; Node *next = nullptr, *prev = nullptr; }; \u53ef\u4ee5\u5229\u7528\u9663\u5217\u53d6\u4ee3\u6307\u6a19\u4f86\u5be6\u4f5c linklist \u3002 C++ \u63d0\u4f9b list \u51fd\u5f0f\u5eab\u5be6\u4f5c\u96d9\u5411\u4e32\u5217\u3002 \u6a19\u982d\u6a94\uff1a <list> \u5efa\u69cb\u5f0f\uff1a list <T> L L.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) L.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) L.push_front(T a),L.push_back(T a) \uff1a\u63d2\u5165\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) L.pop_front(),L.pop_back() \uff1a\u522a\u9664\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) L.insert(iterator it,size_type n,T a) \uff1a\u5728 it \u6307\u7684\u90a3\u9805\u7684\u524d\u9762\u63d2\u5165 n \u500b a \u4e26\u56de\u50b3\u6307\u5411 a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(n) \u3002 L.erase(iterator first,iterator last) \uff1a\u628a \\[first,last) \u6307\u5230\u7684\u6771\u897f\u5168\u90e8\u522a\u6389\uff0c\u56de\u50b3 last\u3002\u8907\u96dc\u5ea6\u8207\u780d\u6389\u7684\u6578\u91cf\u5448\u7dda\u6027\u95dc\u4fc2\uff0c\u5982\u679c\u6c92\u6709\u6307\u5b9a last, \u90a3\u6703\u81ea\u52d5\u8996\u70ba\u53ea\u522a\u9664 first \u90a3\u9805\u3002 L.splice(iterator it,list &x,iterator first,iterator last) \uff1afirst \u548c last \u662f x \u7684\u8fed\u4ee3\u5668\u3002\u6b64\u51fd\u5f0f\u6703\u628a [first,last) \u6307\u5230\u7684\u6771\u897f\u5f9e x \u4e2d\u526a\u4e0b\u4e26\u52a0\u5230 it \u6240\u6307\u7684\u90a3\u9805\u7684\u524d\u9762\u3002x \u6703\u56e0\u70ba\u9019\u9805\u51fd\u5f0f\u800c\u6539\u8b8a\u3002\u82e5\u672a\u6307\u5b9a last, \u90a3\u53ea\u6703\u5c07 first \u6240\u6307\u7684\u6771\u897f\u79fb\u5230 it \u524d\u65b9\u3002\u8907\u96dc\u5ea6\u8207\u8f49\u79fb\u500b\u6578\u5448\u7dda\u6027\u95dc\u4fc2\u3002 // adapt from cppreference #include <iostream> #include <list> int main() { std::list<char> letters{'o', 'm', 'g', 'w', 't', 'f'}; if (!letters.empty()) { cout << letters.front() << '\\n'; // o cout << letters.back() << '\\n'; // f } }","title":"List"},{"location":"dataStructure/list/#list","text":"\u9663\u5217\u5982\u679c\u8981\u5f9e\u4e2d\u9593\u63d2\u5165\u4e00\u500b\u5143\u7d20\uff0c\u9700\u8981\u5c07\u5176\u5f8c\u9762\u6240\u6709\u5143\u7d20\u642c\u79fb\u4e00\u683c\uff0c\u9700\u8017\u8cbb O(n) \uff0c\u9023\u7d50\u4e32\u5217\uff08 linklist \uff09\u80fd\u53ea\u82b1 O(1) \u5b8c\u6210\u63d2\u5165\u3002 struct Node { int v; Node *next = nullptr; }; struct Node { int v; Node *next = nullptr, *prev = nullptr; }; \u53ef\u4ee5\u5229\u7528\u9663\u5217\u53d6\u4ee3\u6307\u6a19\u4f86\u5be6\u4f5c linklist \u3002 C++ \u63d0\u4f9b list \u51fd\u5f0f\u5eab\u5be6\u4f5c\u96d9\u5411\u4e32\u5217\u3002 \u6a19\u982d\u6a94\uff1a <list> \u5efa\u69cb\u5f0f\uff1a list <T> L L.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) L.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) L.push_front(T a),L.push_back(T a) \uff1a\u63d2\u5165\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) L.pop_front(),L.pop_back() \uff1a\u522a\u9664\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) L.insert(iterator it,size_type n,T a) \uff1a\u5728 it \u6307\u7684\u90a3\u9805\u7684\u524d\u9762\u63d2\u5165 n \u500b a \u4e26\u56de\u50b3\u6307\u5411 a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(n) \u3002 L.erase(iterator first,iterator last) \uff1a\u628a \\[first,last) \u6307\u5230\u7684\u6771\u897f\u5168\u90e8\u522a\u6389\uff0c\u56de\u50b3 last\u3002\u8907\u96dc\u5ea6\u8207\u780d\u6389\u7684\u6578\u91cf\u5448\u7dda\u6027\u95dc\u4fc2\uff0c\u5982\u679c\u6c92\u6709\u6307\u5b9a last, \u90a3\u6703\u81ea\u52d5\u8996\u70ba\u53ea\u522a\u9664 first \u90a3\u9805\u3002 L.splice(iterator it,list &x,iterator first,iterator last) \uff1afirst \u548c last \u662f x \u7684\u8fed\u4ee3\u5668\u3002\u6b64\u51fd\u5f0f\u6703\u628a [first,last) \u6307\u5230\u7684\u6771\u897f\u5f9e x \u4e2d\u526a\u4e0b\u4e26\u52a0\u5230 it \u6240\u6307\u7684\u90a3\u9805\u7684\u524d\u9762\u3002x \u6703\u56e0\u70ba\u9019\u9805\u51fd\u5f0f\u800c\u6539\u8b8a\u3002\u82e5\u672a\u6307\u5b9a last, \u90a3\u53ea\u6703\u5c07 first \u6240\u6307\u7684\u6771\u897f\u79fb\u5230 it \u524d\u65b9\u3002\u8907\u96dc\u5ea6\u8207\u8f49\u79fb\u500b\u6578\u5448\u7dda\u6027\u95dc\u4fc2\u3002 // adapt from cppreference #include <iostream> #include <list> int main() { std::list<char> letters{'o', 'm', 'g', 'w', 't', 'f'}; if (!letters.empty()) { cout << letters.front() << '\\n'; // o cout << letters.back() << '\\n'; // f } }","title":"List"},{"location":"dataStructure/queue/","text":"queue \u4f47\u5217 \u6709\u5169\u500b\u7aef\u53e3\uff0c\u4e00\u500b\u8ca0\u8cac\u63d2\u5165\uff0c\u53e6\u4e00\u500b\u7aef\u53e3\u8ca0\u8cac\u522a\u9664\u7684\u8cc7\u6599\u7d50\u69cb struct Queue { int q[N], head, tail; Queue() : head(0), tail(0) {} int size() { return tail - head; } void push(int x) { q[tail++] = x; } int front() { return q[head]; } void pop() { head++; } } \u6a19\u982d\u6a94\uff1a <queue> \u5efa\u69cb\u5f0f\uff1a queue <T> q q.push(T a) \uff1a\u63d2\u5165\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.front() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) q.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) #include <iostream> #include <queue> using namespace std; int main() { queue<int> st; st.push(1); cout << st.front() << '\\n'; // 1 st.push(2); cout << st.front() << '\\n'; // 1 st.push(3); cout << st.front() << '\\n'; // 1 st.pop(); cout << st.front() << '\\n'; // 2 } deque \u96d9\u5411\u4f47\u5217 \u6709\u5169\u500b\u7aef\u53e3\uff0c\u7686\u8ca0\u8cac\u522a\u9664\u3001\u63d2\u5165\u7684\u8cc7\u6599\u7d50\u69cb \u6a19\u982d\u6a94\uff1a <deque> \u5efa\u69cb\u5f0f\uff1a deque <T> dq dq.push_front(T a),dq.push_back(T a) \uff1a\u63d2\u5165\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.pop_front(),dq.pop_back() \uff1a\u522a\u9664\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.front(),dq.back() \uff1a\u56de\u50b3\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) dq.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1)","title":"\u968a\u5217"},{"location":"dataStructure/queue/#queue","text":"\u6709\u5169\u500b\u7aef\u53e3\uff0c\u4e00\u500b\u8ca0\u8cac\u63d2\u5165\uff0c\u53e6\u4e00\u500b\u7aef\u53e3\u8ca0\u8cac\u522a\u9664\u7684\u8cc7\u6599\u7d50\u69cb struct Queue { int q[N], head, tail; Queue() : head(0), tail(0) {} int size() { return tail - head; } void push(int x) { q[tail++] = x; } int front() { return q[head]; } void pop() { head++; } } \u6a19\u982d\u6a94\uff1a <queue> \u5efa\u69cb\u5f0f\uff1a queue <T> q q.push(T a) \uff1a\u63d2\u5165\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.front() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) q.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) #include <iostream> #include <queue> using namespace std; int main() { queue<int> st; st.push(1); cout << st.front() << '\\n'; // 1 st.push(2); cout << st.front() << '\\n'; // 1 st.push(3); cout << st.front() << '\\n'; // 1 st.pop(); cout << st.front() << '\\n'; // 2 }","title":"queue \u4f47\u5217"},{"location":"dataStructure/queue/#deque","text":"\u6709\u5169\u500b\u7aef\u53e3\uff0c\u7686\u8ca0\u8cac\u522a\u9664\u3001\u63d2\u5165\u7684\u8cc7\u6599\u7d50\u69cb \u6a19\u982d\u6a94\uff1a <deque> \u5efa\u69cb\u5f0f\uff1a deque <T> dq dq.push_front(T a),dq.push_back(T a) \uff1a\u63d2\u5165\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.pop_front(),dq.pop_back() \uff1a\u522a\u9664\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.front(),dq.back() \uff1a\u56de\u50b3\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) dq.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1)","title":"deque \u96d9\u5411\u4f47\u5217"},{"location":"dataStructure/stack/","text":"stack \u5806\u758a \u6709\u5169\u500b\u7aef\u53e3\uff0c\u5176\u4e2d\u4e00\u500b\u5c01\u9589\uff0c\u53e6\u4e00\u500b\u7aef\u53e3\u8ca0\u8cac\u63d2\u5165\u3001\u522a\u9664\u7684\u8cc7\u6599\u7d50\u69cb struct stack { int st[N], top; Stack() : top(0) {} int size() { return top; } void push(int x) { st[++top] = x; } int top() { assert(top > 0) return st[top]; } void pop() { if (top) --top; } } \u6a19\u982d\u6a94\uff1a <stack> \u5efa\u69cb\u5f0f\uff1a stack <T> s s.push(T a) \uff1a\u63d2\u5165\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.top() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) s.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) #include <iostream> #include <stack> using namespace std; int main() { stack<int> st; st.push(1); cout << st.top() << '\\n'; // 1 st.push(2); cout << st.top() << '\\n'; // 2 st.push(3); cout << st.top() << '\\n'; // 3 st.pop(); cout << st.top() << '\\n'; // 2 }","title":"\u5806\u758a"},{"location":"dataStructure/stack/#stack","text":"\u6709\u5169\u500b\u7aef\u53e3\uff0c\u5176\u4e2d\u4e00\u500b\u5c01\u9589\uff0c\u53e6\u4e00\u500b\u7aef\u53e3\u8ca0\u8cac\u63d2\u5165\u3001\u522a\u9664\u7684\u8cc7\u6599\u7d50\u69cb struct stack { int st[N], top; Stack() : top(0) {} int size() { return top; } void push(int x) { st[++top] = x; } int top() { assert(top > 0) return st[top]; } void pop() { if (top) --top; } } \u6a19\u982d\u6a94\uff1a <stack> \u5efa\u69cb\u5f0f\uff1a stack <T> s s.push(T a) \uff1a\u63d2\u5165\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.top() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) s.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) #include <iostream> #include <stack> using namespace std; int main() { stack<int> st; st.push(1); cout << st.top() << '\\n'; // 1 st.push(2); cout << st.top() << '\\n'; // 2 st.push(3); cout << st.top() << '\\n'; // 3 st.pop(); cout << st.top() << '\\n'; // 2 }","title":"stack \u5806\u758a"},{"location":"dataStructure/stl/","text":"\u57fa\u790e\u8cc7\u6599\u7d50\u69cb \u4ec0\u9ebc\u662f STL? \u6a19\u6e96\u51fd\u5f0f\u5eab\uff08Standard Template Libiary)\uff0cC++ \u5167\u5efa\u7684\u8cc7\u6599\u7d50\u69cb\u3002 \u578b\u614b\u6a21\u677f \u7576\u4f60\u8981\u4f7f\u7528\u5bb9\u5668\u6642\uff0c\u4f60\u5fc5\u9808\u8981\u544a\u8a34 C++ \u8aaa\uff0c\u4f60\u7684\u8cc7\u6599\u578b\u614b\u662f\u4ec0\u9ebc\uff0c\u578b\u614b\u6a21\u677f\u7684\u7528\u9014\u5c31\u662f\u5728\u65bc\u6b64\u3002 \u7528\u6cd5\uff1a C <T> name \u800c\u5bb9\u5668\u5167\u90e8\u6771\u897f\u4e0d\u6703\u53ea\u6709\u4e00\u500b\uff0c\u50cf map \u5c31\u9700\u8981\u5169\u7a2e\u578b\u614b\u3002 map <T1, T2> name \u6709\u6642\u5019\u53c3\u6578\u4e0d\u9808\u5beb\u6eff\uff0c\u4e0d\u5beb\u6eff\u7684\u5730\u65b9\u7684\u503c\u70ba\u9810\u8a2d\u503c\u3002 \u8fed\u4ee3\u5668 \u5982\u679c\u4f60\u60f3\u5728\u5bb9\u5668\u4e2d\u904d\u6b77\uff0c\u4f60\u53ef\u80fd\u60f3\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 [] \uff0c\u4f46\u4e0d\u662f\u6240\u6709\u5bb9\u5668\u90fd\u50cf\u9663\u5217\uff0c\u90fd\u6709\u652f\u63f4\u4e0b\u6a19\u904b\u7b97\u5b50\uff0c\u6240\u4ee5 C++ \u70ba\u6bcf\u500b\u5bb9\u5668\u90fd\u63d0\u4f9b\u4e00\u500b\u8cc7\u6599\u578b\u614b\u53eb \"\u8fed\u4ee3\u5668\"\uff0c\u4f60\u53ef\u4ee5\u628a\u8fed\u4ee3\u5668\u7576\u6210\u4e00\u7a2e\u6307\u6a19\uff0c\u5047\u8a2d\u6709\u4e00\u500b\u8fed\u4ee3\u5668 it\uff0c\u52a0\u4e0a\u661f\u865f * \u53ef\u4ee5\u5b58\u53d6 IT \u6240\u6307\u5411\u7684\u5167\u5bb9\uff0c\u4f9d\u64da\u8fed\u4ee3\u5668\u7684\u5f37\u5230\u5f31\u53ef\u5206\u70ba\u4e09\u7a2e\uff1a \u96a8\u6a5f\u5b58\u53d6\uff08Random Access)\uff1a\u53ef\u8207\u6574\u6578\u505a +- \u6cd5\u3001\u905e\u589e\u53ca\u905e\u6e1b \u96d9\u5411\uff08Bidirectional\uff09\u8fed\u4ee3\u5668\uff1a\u905e\u589e\u53ca\u905e\u6e1b \u55ae\u5411\uff08Forward\uff09\u8fed\u4ee3\u5668\uff1a\u53ea\u80fd\u905e\u589e \u6839\u64da\u7528\u6cd5\u53ef\u5206\u70ba\u5169\u7a2e\uff1a \u8f38\u5165\uff08Input\uff09\u8fed\u4ee3\u5668\uff1a\u8b80\u53d6\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\uff0c\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u7576\u4f5c\u8f38\u5165\u8fed\u4ee3\u5668\u3002 \u8f38\u51fa\uff08Output\uff09\u8fed\u4ee3\u5668\uff1a\u66f4\u6539\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\u6642\uff0c\u9664\u4e86\u5e38\u6578\uff08const\uff09\u8fed\u4ee3\u5668\uff08\u4e5f\u5c31\u662f\u898f\u5b9a\u4e0d\u80fd\u66f4\u52d5\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\uff09\u4ee5\u5916\uff0c\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u7576\u4f5c\u8f38\u51fa\u8fed\u4ee3\u5668\u3002 C++ \u5728\u8a31\u591a\u5bb9\u5668\u4e2d\u63d0\u4f9b\u6b63\u5411\u548c\u9006\u5411\u8fed\u4ee3\u5668\uff0c\u524d\u8005\u7531\u524d\u5f80\u5f8c\uff0c\u5f8c\u8457\u7531\u5f8c\u5f80\u524d\uff0c\u5ba3\u544a\u6642\u5206\u5225\u70ba C::iterator \u53ca C::reverse\\_iterator \uff0c\u6bcf\u7a2e\u8fed\u4ee3\u5668\u5206\u5225\u6709\u4e00\u5c0d\u8fed\u4ee3\u5668\u4ee3\u8868\u982d\u5c3e\uff0c\u5982\u4e0b\u8868\uff0c\u6ce8\u610f end \u7cfb\u5217\u6307\u5411\u8a72\u5bb9\u5668\u6700\u5f8c\u4e00\u9805\u7684\u5f8c\u4e00\u9805\uff0c\u4e0d\u8981\u5c0d\u4ed6\u505a\u4eba\u548c\u53d6\u503c\u6216\u4fee\u6539\u3002 \u6b63\u5411 \u9006\u5411 \u53ef\u6539\u503c C.begin(), C.end() C.rbegin(), C.rend() \u4e0d\u53ef\u6539\u503c C.cbegin(), C.cend() C.crbegin(),C.crend()","title":"STL"},{"location":"dataStructure/stl/#_1","text":"","title":"\u57fa\u790e\u8cc7\u6599\u7d50\u69cb"},{"location":"dataStructure/stl/#stl","text":"\u6a19\u6e96\u51fd\u5f0f\u5eab\uff08Standard Template Libiary)\uff0cC++ \u5167\u5efa\u7684\u8cc7\u6599\u7d50\u69cb\u3002","title":"\u4ec0\u9ebc\u662f STL?"},{"location":"dataStructure/stl/#_2","text":"\u7576\u4f60\u8981\u4f7f\u7528\u5bb9\u5668\u6642\uff0c\u4f60\u5fc5\u9808\u8981\u544a\u8a34 C++ \u8aaa\uff0c\u4f60\u7684\u8cc7\u6599\u578b\u614b\u662f\u4ec0\u9ebc\uff0c\u578b\u614b\u6a21\u677f\u7684\u7528\u9014\u5c31\u662f\u5728\u65bc\u6b64\u3002 \u7528\u6cd5\uff1a C <T> name \u800c\u5bb9\u5668\u5167\u90e8\u6771\u897f\u4e0d\u6703\u53ea\u6709\u4e00\u500b\uff0c\u50cf map \u5c31\u9700\u8981\u5169\u7a2e\u578b\u614b\u3002 map <T1, T2> name \u6709\u6642\u5019\u53c3\u6578\u4e0d\u9808\u5beb\u6eff\uff0c\u4e0d\u5beb\u6eff\u7684\u5730\u65b9\u7684\u503c\u70ba\u9810\u8a2d\u503c\u3002","title":"\u578b\u614b\u6a21\u677f"},{"location":"dataStructure/stl/#_3","text":"\u5982\u679c\u4f60\u60f3\u5728\u5bb9\u5668\u4e2d\u904d\u6b77\uff0c\u4f60\u53ef\u80fd\u60f3\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 [] \uff0c\u4f46\u4e0d\u662f\u6240\u6709\u5bb9\u5668\u90fd\u50cf\u9663\u5217\uff0c\u90fd\u6709\u652f\u63f4\u4e0b\u6a19\u904b\u7b97\u5b50\uff0c\u6240\u4ee5 C++ \u70ba\u6bcf\u500b\u5bb9\u5668\u90fd\u63d0\u4f9b\u4e00\u500b\u8cc7\u6599\u578b\u614b\u53eb \"\u8fed\u4ee3\u5668\"\uff0c\u4f60\u53ef\u4ee5\u628a\u8fed\u4ee3\u5668\u7576\u6210\u4e00\u7a2e\u6307\u6a19\uff0c\u5047\u8a2d\u6709\u4e00\u500b\u8fed\u4ee3\u5668 it\uff0c\u52a0\u4e0a\u661f\u865f * \u53ef\u4ee5\u5b58\u53d6 IT \u6240\u6307\u5411\u7684\u5167\u5bb9\uff0c\u4f9d\u64da\u8fed\u4ee3\u5668\u7684\u5f37\u5230\u5f31\u53ef\u5206\u70ba\u4e09\u7a2e\uff1a \u96a8\u6a5f\u5b58\u53d6\uff08Random Access)\uff1a\u53ef\u8207\u6574\u6578\u505a +- \u6cd5\u3001\u905e\u589e\u53ca\u905e\u6e1b \u96d9\u5411\uff08Bidirectional\uff09\u8fed\u4ee3\u5668\uff1a\u905e\u589e\u53ca\u905e\u6e1b \u55ae\u5411\uff08Forward\uff09\u8fed\u4ee3\u5668\uff1a\u53ea\u80fd\u905e\u589e \u6839\u64da\u7528\u6cd5\u53ef\u5206\u70ba\u5169\u7a2e\uff1a \u8f38\u5165\uff08Input\uff09\u8fed\u4ee3\u5668\uff1a\u8b80\u53d6\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\uff0c\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u7576\u4f5c\u8f38\u5165\u8fed\u4ee3\u5668\u3002 \u8f38\u51fa\uff08Output\uff09\u8fed\u4ee3\u5668\uff1a\u66f4\u6539\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\u6642\uff0c\u9664\u4e86\u5e38\u6578\uff08const\uff09\u8fed\u4ee3\u5668\uff08\u4e5f\u5c31\u662f\u898f\u5b9a\u4e0d\u80fd\u66f4\u52d5\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\uff09\u4ee5\u5916\uff0c\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u7576\u4f5c\u8f38\u51fa\u8fed\u4ee3\u5668\u3002 C++ \u5728\u8a31\u591a\u5bb9\u5668\u4e2d\u63d0\u4f9b\u6b63\u5411\u548c\u9006\u5411\u8fed\u4ee3\u5668\uff0c\u524d\u8005\u7531\u524d\u5f80\u5f8c\uff0c\u5f8c\u8457\u7531\u5f8c\u5f80\u524d\uff0c\u5ba3\u544a\u6642\u5206\u5225\u70ba C::iterator \u53ca C::reverse\\_iterator \uff0c\u6bcf\u7a2e\u8fed\u4ee3\u5668\u5206\u5225\u6709\u4e00\u5c0d\u8fed\u4ee3\u5668\u4ee3\u8868\u982d\u5c3e\uff0c\u5982\u4e0b\u8868\uff0c\u6ce8\u610f end \u7cfb\u5217\u6307\u5411\u8a72\u5bb9\u5668\u6700\u5f8c\u4e00\u9805\u7684\u5f8c\u4e00\u9805\uff0c\u4e0d\u8981\u5c0d\u4ed6\u505a\u4eba\u548c\u53d6\u503c\u6216\u4fee\u6539\u3002 \u6b63\u5411 \u9006\u5411 \u53ef\u6539\u503c C.begin(), C.end() C.rbegin(), C.rend() \u4e0d\u53ef\u6539\u503c C.cbegin(), C.cend() C.crbegin(),C.crend()","title":"\u8fed\u4ee3\u5668"},{"location":"graph/","text":"\u5716\u662f\u7531\u908a\u96c6\u5408\u548c\u9ede\u96c6\u5408\u6240\u5f62\u6210\u7684\u5716\u5f62\uff0c\u9019\u7a2e\u5716\u5f62\u901a\u5e38\u7528\u4f86\u63cf\u8ff0\u67d0\u4e9b\u4e8b\u7269\u4e4b\u9593\u7684\u67d0\u7a2e\u7279\u5b9a\u95dc\u4fc2\u3002\u9802\u9ede\u7528\u65bc\u4ee3\u8868\u4e8b\u7269\uff0c\u9023\u63a5\u5169\u9802\u9ede\u7684\u908a\u5247\u7528\u65bc\u8868\u793a\u5169\u500b\u4e8b\u7269\u9593\u5177\u6709\u9019\u7a2e\u95dc\u4fc2\u3002","title":"\u5716\u8ad6\u7c21\u4ecb"},{"location":"graph/concept/","text":"\u5716\u8ad6\u6982\u5ff5 \u5716 \u6578\u5b78\u5f0f\u70ba G=(V,E) \u3002 G \u4ee3\u8868\u5716\uff08Graph)\uff0c V \u4ee3\u8868\u9ede\uff08vertex)\uff0c E \u4ee3\u8868\u908a\uff08edge)\u3002 \u7121\u5411\u908a\u3001\u6709\u5411\u908a\uff1a\u908a\u5177\u6709\u65b9\u5411\u6027\uff0c\u7121\u5411\u908a\u4ee3\u8868\u908a\u6c92\u6709\u6307\u5b9a\u65b9\u5411\uff0c (u,v) \u548c (v,u) \u7b49\u50f9\uff1b\u6709\u5411\u908a\u5247\u6709\u6307\u5b9a\u65b9\u5411\uff0c (u,v) \u548c (v,u) \u662f\u4e0d\u540c\u7684\u3002 \u7121\u5411\u5716\u3001\u6709\u5411\u5716\u3001\u6df7\u5408\u5716\uff1a\u7121\u5411\u5716\u662f\u53ea\u6709\u7121\u5411\u908a\u7684\u5716\uff0c\u985e\u4f3c\u5730\uff0c\u6709\u5411\u5716\u662f\u53ea\u6709\u6709\u5411\u908a\u7684\u5716\uff0c\u6df7\u548c\u5716\u5247\u662f\u5305\u542b\u7121\u5411\u908a\u548c\u6709\u5411\u908a\u3002 |V| \uff1a\u9ede\u6578\uff0c\u901a\u5e38\u7528 V \u8868\u793a\u3002 |E| \uff1a\u908a\u6578\uff0c\u901a\u5e38\u7528 E \u8868\u793a\u3002 \u6b0a\u91cd\uff08weight)\uff1a\u5728\u9ede\u6216\u908a\u4e0a\u9644\u5e36\u4e00\u500b\u6578\u5b57\u7a31\u505a \"\u6b0a\u91cd\"\uff0c\u908a\u4e0a\u6b0a\u91cd\u8f03\u5e38\u898b\uff0c\u6b0a\u91cd\u901a\u5e38\u4ee3\u8868\u4ee3\u50f9\uff0c\u4f8b\u5982\u6240\u9700\u82b1\u8cbb\u6642\u9593\u6216\u91d1\u9322\u3002 \u76f8\u9130 (adjacent)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u5169\u500b\u9ede u , v \u76f8\u9130\u4ee3\u8868\u5b58\u5728\u4e00\u500b\u908a e_i = (u, v) \u3002 \u6307\u5411 (consecutive)\uff1a\u6709\u5411\u5716\u4e2d\uff0c u \u6307\u5411 v \u4ee3\u8868\u5b58\u5728\u4e00\u500b\u908a e_i = (u, v) \u3002 \u5ea6\uff08degree)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u4e00\u500b\u9ede\u9023\u5230\u7684\u908a\u6578\u7a31\u70ba \"\u5ea6\"\uff0c\u5728\u6709\u5411\u5716\u5206\u70ba\u51fa\u5ea6\uff08out-degree\uff0c\u7c21\u7a31 d_{out} \uff09\u53ca\u5165\u5ea6\uff08in-degree\uff0c\u7c21\u7a31 d_{in} )\uff0c\u5206\u5225\u4ee3\u8868\u8a72\u9ede\u6307\u5411\u5225\u9ede\u53ca\u88ab\u6307\u5411\u7684\u908a\u6578\u3002 \u8def\u5f91 \u8def\u5f91\uff08walk)\uff1a\u4e00\u689d\u7531 x \u5230 y \u7684\u8def\u5f91 x=v_1,v_2,v_3...,v_k=y \u3002 trail\uff1a\u4e00\u689d\u4e0d\u91cd\u8907\u908a\u7684 walk\u3002 \u8ff4\u8def\uff08circut)\uff1a\u8d77\u9ede\u548c\u7d42\u9ede\u4e00\u6a23\u7684 trail\u3002 path\uff1a\u4e00\u689d\u4e0d\u91cd\u8907\u9ede\uff08\u8d77\u9ede\u548c\u7d42\u9ede\u4f8b\u5916\uff09\u7684 walk\u3002 \u74b0\uff08cycle)\uff1a\u8d77\u9ede\u548c\u7d42\u9ede\u4e00\u6a23\u7684 path\u3002 \u9023\u901a \u9023\u901a (connected)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u82e5 u \u548c v \u5b58\u5728\u8def\u5f91\uff0c\u5247 u \u548c v \u9023\u901a\u3002\u82e5\u4e00\u7fa4\u9ede\u5169\u5169\u9023\u901a\uff0c\u5247\u9019\u4e9b\u9ede\u90fd\u9023\u901a\u3002 \u7c21\u55ae\u5716 \u81ea\u74b0 (loop)\uff1a\u4e00\u689d\u908a e_i = (u, v) \u6eff\u8db3 u = v , e_i \u5373\u7a31\u70ba\u81ea\u74b0\u3002 \u91cd\u908a (multiple edge)\uff1a\u5728\u4e00\u5f35\u5716\u4e2d\uff0c\u5b58\u5728 e_i , e_j \u6eff\u8db3 i != j and e_i = e_j \uff0c\u5247\u7a31\u70ba\u91cd\u908a\u3002 \u4e00\u500b\u6c92\u6709\u81ea\u74b0\u3001\u91cd\u908a\u7684\u9023\u901a\u5716\u7a31\u70ba\u7c21\u55ae\u5716\u3002 \u9023\u901a\u5716\uff08connected Graph) \u7121\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede\u7686\u53ef\u7d93\u904e\u4e00\u4e9b\u908a\u8a2a\u554f\u5f7c\u6b64\uff0c\u9019\u5f35\u5716\u5373\u70ba\u7121\u5411\u5716\u3002 \u6a39 \u6a39\uff08Tree) \u4e00\u5f35\u6c92\u6709\u74b0\u4e14\u9023\u901a\u7684\u5716\u6709\uff0c\u8a31\u591a\u7b97\u6cd5\u90fd\u662f\u7531\u6a39\u767c\u5c55\u51fa\u4f86\u3002 \u7279\u6027 \u70ba\u9023\u901a\u5716\u4e14 |V|=|E|+1 \u4efb\u610f\u5169\u500b\u9ede\u4e4b\u9593\u5b58\u5728\u552f\u4e00\u8def\u5f91 \u70ba\u9023\u901a\u5716\uff0c\u4f46\u62d4\u6389\u4e00\u689d\u908a\u5373\u70ba\u4e0d\u9023\u901a\uff08\u5206\u6210\u5169\u5f35\u9023\u901a\u5716\uff09\u3002 \u6c92\u6709\u74b0\uff0c\u4f46\u52a0\u4e0a\u4e00\u689d\u908a\u6703\u5f62\u6210\u74b0\u3002 \u82e5\u7bc0\u9ede\u7de8\u865f\u5b58\u5728\u9806\u5e8f\uff0c\u9664\u4e86\u7b2c\u4e00\u500b\u7bc0\u9ede\uff0c\u6bcf\u500b\u7bc0\u9ede\u90fd\u6703\u4f38\u51fa\u4e00\u689d\u908a\u9023\u5230\u9806\u5e8f\u6bd4\u81ea\u5df1\u524d\u9762\u7684\u7bc0\u9ede\u3002 \u6839\uff08root)\uff1a\u6a39\u7684\u4e00\u500b\u4ee3\u8868\u6027\u7684\u9ede\uff0c\u901a\u5e38\u6703\u88ab\u7576\u904d\u6b77\u7684\u8d77\u9ede\uff0c\u6709\u7d66\u5b9a\u6839\u9ede\u7684\u6a39\u53eb \"\u6709\u6839\u6a39\"\u3002\u81f3\u65bc\u7121\u6839\u6a39\u4f9d\u7167\u984c\u76ee\u9700\u6c42\uff0c\u6709\u6642\u8981\u96a8\u6a5f\u627e\u4e00\u500b\u9ede\u7576\u6839\u3002 \u8449\u89e3\u9ede\uff08leaf)\uff1a\u5ea6\u6578\u70ba 1 \u7684\u7bc0\u9ede\uff0c\u6709\u6839\u6a39\u7684\u6839\u7d50\u9ede\u5247\u6703\u662f\u984c\u76ee\u9700\u6c42\u4f86\u6c7a\u5b9a\u662f\u5426\u70ba\u8449\u7bc0\u9ede\u3002 \u7236\u7bc0\u9ede\u3001\u5b50\u7bc0\u9ede\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u5169\u500b\u76f8\u9023\u7684\u7bc0\u9ede\uff0c\u6bd4\u8f03\u63a5\u8fd1\u6a39\u6839\u7684\u70ba\u7236\u7bc0\u9ede\uff0c\u53cd\u4e4b\u70ba\u5b50\u7bc0\u9ede\u3002 \u7956\u5148\uff08ancestor)\u3001\u5b50\u5b6b\uff08descandent)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u6839\u7d50\u9ede\u4e2d\uff0c\u6240\u6709\u7684\u7bc0\u9ede\u7686\u70ba\u7956\u5148\u3002\u53cd\u904e\u4f86\u8aaa\uff0c\u8a72\u7bc0\u9ede\u662f\u4ed6\u7684\u7956\u5148\u7684\u5b50\u5b6b\u3002\u4f9d\u984c\u76ee\u6240\u9700\uff0c\u6709\u6642\u81ea\u5df1\u4e5f\u662f\u81ea\u5df1\u7684\u7956\u5148\uff08\u5c24\u5176\u662f\u6839\u6700\u5e38\u9019\u6a23\u5b9a\u7fa9\uff09\u3002 \u8ddd\u96e2\uff08distance)\uff1a\u70ba\u5169\u500b\u9ede\u6240\u5f62\u6210\u8def\u5f91\u4e4b\u908a\u6578\uff0c\u6216\u662f\u8def\u5f91\u4e0a\u6b0a\u91cd\u4e4b\u548c\u3002 \u6df1\u5ea6\uff08depth)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u6839\u7d50\u9ede\u4e4b\u8ddd\u96e2\u3002 \u9ad8\u5ea6\uff08height)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u8207\u5b83\u8ddd\u96e2\u6700\u5927\u7684\u8449\u7bc0\u9ede\u7684\u8ddd\u96e2\u7a31\u70ba\u9ad8\u5ea6\u3002\u6839\u7684\u9ad8\u5ea6\u7a31\u70ba\u9019\u6574\u9846\u6a39\u7684\u9ad8\u5ea6\u3002 \u5b50\u6a39\uff08subtree)\uff1a\u8a2d\u6709\u5169\u68f5\u6a39 T , T_1 \uff0c\u5982\u679c V_1\\in V \uff0c E_1\\in E \uff0c\u90a3\u9ebc\u6211\u5011\u8aaa T_1 \u70ba T \u7684\u5b50\u6a39 N \u5143\u6a39\uff1a\u6bcf\u500b\u7bc0\u9ede\u6700\u591a\u6709 N \u500b\u7bc0\u9ede\uff0c\u7a31\u70ba N \u5143\u6a39\u3002 \u68ee\u6797\uff08Forest) \u7531\u7121\u6578\u500b\u4e92\u4e0d\u9023\u901a\u7684\u6a39\u6240\u5f62\u7684\u5716\u70ba\u68ee\u6797\u3002 \u5b8c\u5168\u5716\uff08Complete Graph) \u7121\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede u, v \u7686\u5b58\u5728\u4e00\u689d\u908a e_i = (u, v) \uff0c\u7a31\u70ba\u5b8c\u5168\u5716\u3002\u4e00\u5f35 n \u500b\u9ede\u7684\u5b8c\u5168\u5716\u7c21\u8a18\u70ba K_n \uff0c\u5728\u96c6\u5408\u4e0a\u66fe\u70ba\u5b8c\u5168\u5716\u70ba \"\u5718\" \u7af6\u8cfd\u5716\uff08Tournament Graph) \u6709\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede u, v \u7686\u5b58\u5728\u4e00\u689d\u908a e_i = (u, v) \uff0c\u7a31\u70ba\u7af6\u8cfd\u5716\u3002 \u6709\u5411\u7121\u74b0\u5716\uff08Directed acyclic graph, DAG) \u6c92\u6709\u74b0\u7684\u7121\u5411\u5716\u3002 \u4e8c\u5206\u5716\uff08Bipartite Graph) \u80fd\u5c07\u5716\u4e0a\u7684\u9ede\u5206\u6210\u5169\u500b\u96c6\u5408\uff0c\u4efb\u610f\u4e00\u689d\u908a e_i = (u, v) \u90fd\u6eff\u8db3\uff0c (u, v) \u5728\u4e0d\u540c\u96c6\u5408\u88e1\uff0c\u8a72\u5716\u7a31\u70ba\u4e8c\u5206\u5716\u3002 \u5e73\u9762\u5716\uff08Planar Graph) \u53ef\u756b\u5728\u5e73\u9762\u4e0a\uff0c\u4e14\u4efb\u610f\u5169\u689d\u908a\u7686\u4e0d\u91cd\u758a\u7684\u5716\u3002 \u5b50\u5716\uff08subgraph) \u5982\u679c G'=(V', E') \u662f G=(V, E) \u7684\u5b50\u5716\uff0c\u5247 V'\\in V \u4e14 E'\\in E \u3002 \u88dc\u5716 (complement graph) graph) \u4ee4 G=(V,E) \u662f\u4e00\u500b\u5716\uff0c K \u5305\u542b\u6240\u6709 V \u7684\u4e8c\u5143\u5b50\u96c6 (2-element subset)\u3002\u5247\u5716 H = (V, K\\setminus E) \u662f G \u7684\u88dc\u5716\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u628a\u539f\u672c\u7684\u908a\u79fb\u9664\uff0c\u52a0\u5165\u539f\u672c\u4e0d\u5b58\u5728\u7684\u908a\u5373\u662f\u88dc\u5716\u3002 \u540c\u69cb (isomorphic)","title":"\u5716\u8ad6\u6982\u5ff5"},{"location":"graph/concept/#_1","text":"","title":"\u5716\u8ad6\u6982\u5ff5"},{"location":"graph/concept/#_2","text":"\u6578\u5b78\u5f0f\u70ba G=(V,E) \u3002 G \u4ee3\u8868\u5716\uff08Graph)\uff0c V \u4ee3\u8868\u9ede\uff08vertex)\uff0c E \u4ee3\u8868\u908a\uff08edge)\u3002 \u7121\u5411\u908a\u3001\u6709\u5411\u908a\uff1a\u908a\u5177\u6709\u65b9\u5411\u6027\uff0c\u7121\u5411\u908a\u4ee3\u8868\u908a\u6c92\u6709\u6307\u5b9a\u65b9\u5411\uff0c (u,v) \u548c (v,u) \u7b49\u50f9\uff1b\u6709\u5411\u908a\u5247\u6709\u6307\u5b9a\u65b9\u5411\uff0c (u,v) \u548c (v,u) \u662f\u4e0d\u540c\u7684\u3002 \u7121\u5411\u5716\u3001\u6709\u5411\u5716\u3001\u6df7\u5408\u5716\uff1a\u7121\u5411\u5716\u662f\u53ea\u6709\u7121\u5411\u908a\u7684\u5716\uff0c\u985e\u4f3c\u5730\uff0c\u6709\u5411\u5716\u662f\u53ea\u6709\u6709\u5411\u908a\u7684\u5716\uff0c\u6df7\u548c\u5716\u5247\u662f\u5305\u542b\u7121\u5411\u908a\u548c\u6709\u5411\u908a\u3002 |V| \uff1a\u9ede\u6578\uff0c\u901a\u5e38\u7528 V \u8868\u793a\u3002 |E| \uff1a\u908a\u6578\uff0c\u901a\u5e38\u7528 E \u8868\u793a\u3002 \u6b0a\u91cd\uff08weight)\uff1a\u5728\u9ede\u6216\u908a\u4e0a\u9644\u5e36\u4e00\u500b\u6578\u5b57\u7a31\u505a \"\u6b0a\u91cd\"\uff0c\u908a\u4e0a\u6b0a\u91cd\u8f03\u5e38\u898b\uff0c\u6b0a\u91cd\u901a\u5e38\u4ee3\u8868\u4ee3\u50f9\uff0c\u4f8b\u5982\u6240\u9700\u82b1\u8cbb\u6642\u9593\u6216\u91d1\u9322\u3002 \u76f8\u9130 (adjacent)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u5169\u500b\u9ede u , v \u76f8\u9130\u4ee3\u8868\u5b58\u5728\u4e00\u500b\u908a e_i = (u, v) \u3002 \u6307\u5411 (consecutive)\uff1a\u6709\u5411\u5716\u4e2d\uff0c u \u6307\u5411 v \u4ee3\u8868\u5b58\u5728\u4e00\u500b\u908a e_i = (u, v) \u3002 \u5ea6\uff08degree)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u4e00\u500b\u9ede\u9023\u5230\u7684\u908a\u6578\u7a31\u70ba \"\u5ea6\"\uff0c\u5728\u6709\u5411\u5716\u5206\u70ba\u51fa\u5ea6\uff08out-degree\uff0c\u7c21\u7a31 d_{out} \uff09\u53ca\u5165\u5ea6\uff08in-degree\uff0c\u7c21\u7a31 d_{in} )\uff0c\u5206\u5225\u4ee3\u8868\u8a72\u9ede\u6307\u5411\u5225\u9ede\u53ca\u88ab\u6307\u5411\u7684\u908a\u6578\u3002","title":"\u5716"},{"location":"graph/concept/#_3","text":"\u8def\u5f91\uff08walk)\uff1a\u4e00\u689d\u7531 x \u5230 y \u7684\u8def\u5f91 x=v_1,v_2,v_3...,v_k=y \u3002 trail\uff1a\u4e00\u689d\u4e0d\u91cd\u8907\u908a\u7684 walk\u3002 \u8ff4\u8def\uff08circut)\uff1a\u8d77\u9ede\u548c\u7d42\u9ede\u4e00\u6a23\u7684 trail\u3002 path\uff1a\u4e00\u689d\u4e0d\u91cd\u8907\u9ede\uff08\u8d77\u9ede\u548c\u7d42\u9ede\u4f8b\u5916\uff09\u7684 walk\u3002 \u74b0\uff08cycle)\uff1a\u8d77\u9ede\u548c\u7d42\u9ede\u4e00\u6a23\u7684 path\u3002","title":"\u8def\u5f91"},{"location":"graph/concept/#_4","text":"\u9023\u901a (connected)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u82e5 u \u548c v \u5b58\u5728\u8def\u5f91\uff0c\u5247 u \u548c v \u9023\u901a\u3002\u82e5\u4e00\u7fa4\u9ede\u5169\u5169\u9023\u901a\uff0c\u5247\u9019\u4e9b\u9ede\u90fd\u9023\u901a\u3002","title":"\u9023\u901a"},{"location":"graph/concept/#_5","text":"\u81ea\u74b0 (loop)\uff1a\u4e00\u689d\u908a e_i = (u, v) \u6eff\u8db3 u = v , e_i \u5373\u7a31\u70ba\u81ea\u74b0\u3002 \u91cd\u908a (multiple edge)\uff1a\u5728\u4e00\u5f35\u5716\u4e2d\uff0c\u5b58\u5728 e_i , e_j \u6eff\u8db3 i != j and e_i = e_j \uff0c\u5247\u7a31\u70ba\u91cd\u908a\u3002 \u4e00\u500b\u6c92\u6709\u81ea\u74b0\u3001\u91cd\u908a\u7684\u9023\u901a\u5716\u7a31\u70ba\u7c21\u55ae\u5716\u3002","title":"\u7c21\u55ae\u5716"},{"location":"graph/concept/#connected-graph","text":"\u7121\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede\u7686\u53ef\u7d93\u904e\u4e00\u4e9b\u908a\u8a2a\u554f\u5f7c\u6b64\uff0c\u9019\u5f35\u5716\u5373\u70ba\u7121\u5411\u5716\u3002","title":"\u9023\u901a\u5716\uff08connected Graph)"},{"location":"graph/concept/#_6","text":"\u6a39\uff08Tree) \u4e00\u5f35\u6c92\u6709\u74b0\u4e14\u9023\u901a\u7684\u5716\u6709\uff0c\u8a31\u591a\u7b97\u6cd5\u90fd\u662f\u7531\u6a39\u767c\u5c55\u51fa\u4f86\u3002 \u7279\u6027 \u70ba\u9023\u901a\u5716\u4e14 |V|=|E|+1 \u4efb\u610f\u5169\u500b\u9ede\u4e4b\u9593\u5b58\u5728\u552f\u4e00\u8def\u5f91 \u70ba\u9023\u901a\u5716\uff0c\u4f46\u62d4\u6389\u4e00\u689d\u908a\u5373\u70ba\u4e0d\u9023\u901a\uff08\u5206\u6210\u5169\u5f35\u9023\u901a\u5716\uff09\u3002 \u6c92\u6709\u74b0\uff0c\u4f46\u52a0\u4e0a\u4e00\u689d\u908a\u6703\u5f62\u6210\u74b0\u3002 \u82e5\u7bc0\u9ede\u7de8\u865f\u5b58\u5728\u9806\u5e8f\uff0c\u9664\u4e86\u7b2c\u4e00\u500b\u7bc0\u9ede\uff0c\u6bcf\u500b\u7bc0\u9ede\u90fd\u6703\u4f38\u51fa\u4e00\u689d\u908a\u9023\u5230\u9806\u5e8f\u6bd4\u81ea\u5df1\u524d\u9762\u7684\u7bc0\u9ede\u3002 \u6839\uff08root)\uff1a\u6a39\u7684\u4e00\u500b\u4ee3\u8868\u6027\u7684\u9ede\uff0c\u901a\u5e38\u6703\u88ab\u7576\u904d\u6b77\u7684\u8d77\u9ede\uff0c\u6709\u7d66\u5b9a\u6839\u9ede\u7684\u6a39\u53eb \"\u6709\u6839\u6a39\"\u3002\u81f3\u65bc\u7121\u6839\u6a39\u4f9d\u7167\u984c\u76ee\u9700\u6c42\uff0c\u6709\u6642\u8981\u96a8\u6a5f\u627e\u4e00\u500b\u9ede\u7576\u6839\u3002 \u8449\u89e3\u9ede\uff08leaf)\uff1a\u5ea6\u6578\u70ba 1 \u7684\u7bc0\u9ede\uff0c\u6709\u6839\u6a39\u7684\u6839\u7d50\u9ede\u5247\u6703\u662f\u984c\u76ee\u9700\u6c42\u4f86\u6c7a\u5b9a\u662f\u5426\u70ba\u8449\u7bc0\u9ede\u3002 \u7236\u7bc0\u9ede\u3001\u5b50\u7bc0\u9ede\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u5169\u500b\u76f8\u9023\u7684\u7bc0\u9ede\uff0c\u6bd4\u8f03\u63a5\u8fd1\u6a39\u6839\u7684\u70ba\u7236\u7bc0\u9ede\uff0c\u53cd\u4e4b\u70ba\u5b50\u7bc0\u9ede\u3002 \u7956\u5148\uff08ancestor)\u3001\u5b50\u5b6b\uff08descandent)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u6839\u7d50\u9ede\u4e2d\uff0c\u6240\u6709\u7684\u7bc0\u9ede\u7686\u70ba\u7956\u5148\u3002\u53cd\u904e\u4f86\u8aaa\uff0c\u8a72\u7bc0\u9ede\u662f\u4ed6\u7684\u7956\u5148\u7684\u5b50\u5b6b\u3002\u4f9d\u984c\u76ee\u6240\u9700\uff0c\u6709\u6642\u81ea\u5df1\u4e5f\u662f\u81ea\u5df1\u7684\u7956\u5148\uff08\u5c24\u5176\u662f\u6839\u6700\u5e38\u9019\u6a23\u5b9a\u7fa9\uff09\u3002 \u8ddd\u96e2\uff08distance)\uff1a\u70ba\u5169\u500b\u9ede\u6240\u5f62\u6210\u8def\u5f91\u4e4b\u908a\u6578\uff0c\u6216\u662f\u8def\u5f91\u4e0a\u6b0a\u91cd\u4e4b\u548c\u3002 \u6df1\u5ea6\uff08depth)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u6839\u7d50\u9ede\u4e4b\u8ddd\u96e2\u3002 \u9ad8\u5ea6\uff08height)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u8207\u5b83\u8ddd\u96e2\u6700\u5927\u7684\u8449\u7bc0\u9ede\u7684\u8ddd\u96e2\u7a31\u70ba\u9ad8\u5ea6\u3002\u6839\u7684\u9ad8\u5ea6\u7a31\u70ba\u9019\u6574\u9846\u6a39\u7684\u9ad8\u5ea6\u3002 \u5b50\u6a39\uff08subtree)\uff1a\u8a2d\u6709\u5169\u68f5\u6a39 T , T_1 \uff0c\u5982\u679c V_1\\in V \uff0c E_1\\in E \uff0c\u90a3\u9ebc\u6211\u5011\u8aaa T_1 \u70ba T \u7684\u5b50\u6a39 N \u5143\u6a39\uff1a\u6bcf\u500b\u7bc0\u9ede\u6700\u591a\u6709 N \u500b\u7bc0\u9ede\uff0c\u7a31\u70ba N \u5143\u6a39\u3002","title":"\u6a39"},{"location":"graph/concept/#forest","text":"\u7531\u7121\u6578\u500b\u4e92\u4e0d\u9023\u901a\u7684\u6a39\u6240\u5f62\u7684\u5716\u70ba\u68ee\u6797\u3002","title":"\u68ee\u6797\uff08Forest)"},{"location":"graph/concept/#complete-graph","text":"\u7121\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede u, v \u7686\u5b58\u5728\u4e00\u689d\u908a e_i = (u, v) \uff0c\u7a31\u70ba\u5b8c\u5168\u5716\u3002\u4e00\u5f35 n \u500b\u9ede\u7684\u5b8c\u5168\u5716\u7c21\u8a18\u70ba K_n \uff0c\u5728\u96c6\u5408\u4e0a\u66fe\u70ba\u5b8c\u5168\u5716\u70ba \"\u5718\"","title":"\u5b8c\u5168\u5716\uff08Complete Graph)"},{"location":"graph/concept/#tournament-graph","text":"\u6709\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede u, v \u7686\u5b58\u5728\u4e00\u689d\u908a e_i = (u, v) \uff0c\u7a31\u70ba\u7af6\u8cfd\u5716\u3002","title":"\u7af6\u8cfd\u5716\uff08Tournament Graph)"},{"location":"graph/concept/#directed-acyclic-graph-dag","text":"\u6c92\u6709\u74b0\u7684\u7121\u5411\u5716\u3002","title":"\u6709\u5411\u7121\u74b0\u5716\uff08Directed acyclic graph, DAG)"},{"location":"graph/concept/#bipartite-graph","text":"\u80fd\u5c07\u5716\u4e0a\u7684\u9ede\u5206\u6210\u5169\u500b\u96c6\u5408\uff0c\u4efb\u610f\u4e00\u689d\u908a e_i = (u, v) \u90fd\u6eff\u8db3\uff0c (u, v) \u5728\u4e0d\u540c\u96c6\u5408\u88e1\uff0c\u8a72\u5716\u7a31\u70ba\u4e8c\u5206\u5716\u3002","title":"\u4e8c\u5206\u5716\uff08Bipartite Graph)"},{"location":"graph/concept/#planar-graph","text":"\u53ef\u756b\u5728\u5e73\u9762\u4e0a\uff0c\u4e14\u4efb\u610f\u5169\u689d\u908a\u7686\u4e0d\u91cd\u758a\u7684\u5716\u3002","title":"\u5e73\u9762\u5716\uff08Planar Graph)"},{"location":"graph/concept/#subgraph","text":"\u5982\u679c G'=(V', E') \u662f G=(V, E) \u7684\u5b50\u5716\uff0c\u5247 V'\\in V \u4e14 E'\\in E \u3002","title":"\u5b50\u5716\uff08subgraph)"},{"location":"graph/concept/#complement-graph-graph","text":"\u4ee4 G=(V,E) \u662f\u4e00\u500b\u5716\uff0c K \u5305\u542b\u6240\u6709 V \u7684\u4e8c\u5143\u5b50\u96c6 (2-element subset)\u3002\u5247\u5716 H = (V, K\\setminus E) \u662f G \u7684\u88dc\u5716\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u628a\u539f\u672c\u7684\u908a\u79fb\u9664\uff0c\u52a0\u5165\u539f\u672c\u4e0d\u5b58\u5728\u7684\u908a\u5373\u662f\u88dc\u5716\u3002","title":"\u88dc\u5716 (complement graph) graph)"},{"location":"graph/concept/#isomorphic","text":"","title":"\u540c\u69cb (isomorphic)"},{"location":"graph/connectivity/","text":"Connectivity \u4e00\u5f35\u4efb\u610f\u5169\u9ede\u63a5\u9023\u901a\u7684\u5716\u53eb\u505a\u9023\u901a\u5716\uff0c\u5728\u5be6\u969b\u60c5\u6cc1\uff0c\u4f8b\u5982\u7db2\u8def\u6216\u96fb\u529b\u7684\u67b6\u8a2d\u90fd\u5e0c\u671b\u7dda\u8def\u662f\u9023\u901a\u7684\uff0c\u8981\u662f\u5730\u65b9\u58de\u6389\uff0c\u6211\u5011\u5e0c\u671b\u5f71\u97ff\u80fd\u8d8a\u5c0f\u8d8a\u597d\u3002\u5728\u5716\u8ad6\u4e2d\uff0c\u6709\u7b97\u6cd5\u53ef\u4ee5\u627e\u51fa\u53bb\u6389\u90a3\u4e9b\u90e8\u5206\u6703\u4f7f\u5f97\u5716\u8b8a\u6210\u4e0d\u9023\u901a\u7684\uff0c\u4ee5\u4e0b\u8a73\u7d30\u8aaa\u660e\u3002 DFS \u908a\u5206\u985e \u6839\u64da DFS \u7684\u9806\u5e8f\uff08\u6642\u9593\u6233\u8a18\uff09\uff0c\u5c0d\u908a\u9032\u884c\u5206\u985e\uff0c\u9019\u4e9b\u5206\u985e\u5728\u4e4b\u5f8c\u7684\u7ae0\u7bc0\u6703\u7528\u5230\u3002 Tree edge\uff1a\u9023\u5230\u5152\u5b50\u7684\u908a Back edge\uff1a\u5b50\u5b6b\u9023\u5230\u7956\u5148\u7684\u908a Forward edge\uff1a\u9023\u5230\u5b50\u5b6b\uff08\u975e\u5152\u5b50\uff09\u7684\u908a Cross edge\uff1a\u9023\u5230\u975e\u76f4\u7cfb\u8840\u89aa\u7684\u908a \u5176\u4e2d\u6709\u5411\u5716\u662f\u56db\u7a2e\u908a\u90fd\u6709\uff0c\u7121\u5411\u5716\u53ea\u6709\u524d\u9762\u5169\u7a2e\u3002 \u7121\u5411\u5716\u7684\u96d9\u9023\u901a \u9ede\u9023\u901a\u5ea6\uff1a\u6700\u5c11\u8981\u79fb\u9664\u591a\u5c11\u500b\u9ede\u624d\u6703\u8b93\u6574\u5f35\u5716\u4e0d\u518d\u9023\u901a \u908a\u9023\u901a\u5ea6\uff1a\u6700\u5c11\u8981\u79fb\u9664\u591a\u5c11\u689d\u908a\u624d\u6703\u8b93\u6574\u5f35\u5716\u4e0d\u518d\u9023\u901a \u96d9\u9023\u901a\uff1a\u79fb\u9664\u4efb\u610f\u4e00\u500b \"x\" \u5f8c\uff0c\u5716\u4f9d\u7136\u662f\u9023\u901a\u7684\uff0c\u5c31\u7a31\u70ba \"x - \u96d9\u9023\u901a\"\u3002\u4f9d\u7167 \"x\" \u7684\u4e0d\u540c\uff0c\u53ef\u5206\u70ba \"\u9ede\u96d9\u9023\u901a\" \u53ca \"\u908a\u96d9\u9023\u901a\"\u3002 \u5728\u4e4b\u524d\u63d0\u5230\u7684\u4f8b\u5b50\uff0c\u7db2\u8def\u7684\u67b6\u8a2d\uff0c\u9700\u8981\u7279\u5225\u6ce8\u610f\u96d9\u9023\u901a\u7684\u554f\u984c\uff0c\u842c\u4e00\u6709\u90e8\u5206\u7684\u7dda\u8def\uff08\u908a\uff09\u6216\u662f\u8a2d\u5099\uff08\u9ede\uff09\u640d\u58de\uff0c\u5c31\u6709\u53ef\u80fd\u5c0e\u81f4\u4e00\u90e8\u5206\u7684\u7db2\u8def\u4e0d\u9023\u901a\u3002\u4ee5\u4e0b\u5206\u5225\u5f9e\u9ede\u548c\u908a\u7684\u89d2\u5ea6\u63a2\u8a0e\u96d9\u9023\u901a\u3002 \u9ede\u96d9\u9023\u901a \u8981\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u9ede\u96d9\u9023\u901a\uff0c\u5c31\u8981\u6aa2\u67e5\u4ed6\u662f\u5426\u6709\u5272\u9ede\uff0c\u5982\u679c\u6c92\u6709\u5272\u9ede\uff0c\u5247\u9019\u5f35\u5716\u70ba\u9ede\u96d9\u9023\u901a\u3002 \u5272\u9ede\uff1a\u7d66\u5b9a\u4e00\u5f35\u5716 G \uff0c\u5982\u679c\u79fb\u9664\u9ede v \u53ca\u9023\u63a5 v \u7684\u908a\u4e4b\u5f8c\uff0c\u5716 G \u4e0d\u518d\u9023\u901a\uff0c\u9ede v \u90fd\u88ab\u7a31\u70ba G \u7684\u4e00\u500b\u5272\u9ede\uff08cut-vertex\uff09\u6216\u95dc\u7bc0\u9ede\uff08articulation-vertex, articulation-point)\u3002 \u81f3\u65bc\u600e\u9ebc\u627e\u51fa\u5272\u9ede\uff0c\u6211\u5011\u7528 tarjan \u6f14\u7b97\u6cd5\u3002\u9996\u5148\u6211\u5011\u7528 DFS \u70ba\u7121\u5411\u5716\u5efa\u7acb\u4e00\u9846 DFS \u6a39\u3002\u7121\u5411\u5716\u7684 DFS \u6a39\u53ea\u6709 Tree Edge \u548c Back Edge\uff0c\u6240\u4ee5\u4e00\u500b\u7bc0\u9ede\u662f\u4e0d\u53ef\u80fd\u900f\u904e\u5176\u4ed6\u5b50\u6a39\u56de\u5230\u7956\u5148\u7684\uff0c\u5982\u679c\u4e0d\u7d93\u904e\u7236\u7bc0\u9ede\u7684\u60c5\u6cc1\u4e0b\uff0c\u7121\u6cd5\u8d70\u56de\u7956\u5148\uff0c\u90a3\u9ebc\u8a72\u7bc0\u9ede\u7684\u7236\u7bc0\u9ede\u5c31\u662f\u5272\u9ede\u4e86\u3002\u6240\u4ee5\u8981\u5224\u65b7\u4e00\u500b\u9ede\u662f\u4e0d\u662f\u5272\u9ede\uff0c\u5c31\u8981\u5224\u65b7\u5b83\u7684\u5b50\u7bc0\u9ede\u80fd\u4e0d\u80fd\u4e0d\u7d93\u7531\u5b83\u6703\u5230\u7956\u5148\uff0ctanjan \u6f14\u7b97\u6cd5\u5b9a\u7fa9\u4e00\u500b low \u51fd\u6578\uff0c low \u51fd\u6578\u7684\u5b9a\u7fa9\u70ba\u4e00\u500b\u9ede\u900f\u904e\u81ea\u5df1\u672c\u8eab\u548c\u5b50\u5b6b\uff0c\u80fd\u8d70\u5230\u6700\u5c0f\u7956\u5148\u7684\u6df1\u5ea6\uff0c low \u51fd\u6578\u53ef\u4ee5\u5728 DFS \u6642\u4e00\u4e26\u8a08\u7b97\u3002 \u6709\u4e86 low \u51fd\u6578\uff0c\u5c31\u53ef\u4ee5\u5224\u65b7\u5b50\u7bc0\u9ede\u662f\u5426\u4e0d\u900f\u904e\u81ea\u5df1\u9023\u56de\u7956\u5148\u3002\u5c0d\u65bc\u4e00\u500b\u975e\u6839\u7bc0\u9ede\uff0c\u5982\u679c\u6709\u4efb\u4e00\u5b50\u7bc0\u9ede\u4e0d\u80fd\u4e0d\u900f\u904e\u81ea\u5df1\u9023\u56de\u7956\u5148\uff0c\u8a72\u9ede\u5c31\u662f\u5272\u9ede\u3002\u5c0d\u65bc\u6839\u7bc0\u9ede\uff0c\u5982\u679c\u5b50\u7bc0\u9ede >1 \uff0c\u8a72\u9ede\u5c31\u662f\u5272\u9ede\u3002\u6211\u5011\u6574\u7406\u6210\u4ee5\u4e0b\u6b65\u9a5f\uff1a DFS\uff1a\u5728 DFS \u904e\u7a0b\u7dad\u8b77 Low \u51fd\u6578 \u975e\u6839\u7bc0\u9ede\uff1a\u5982\u679c\u6709\u4efb\u4e00\u5b50\u7bc0\u9ede\u4e0d\u80fd\u4e0d\u900f\u904e\u81ea\u5df1\u9023\u56de\u7956\u5148\uff0c\u8a72\u9ede\u5c31\u662f\u5272\u9ede \u6839\u7bc0\u9ede\uff1a\u5982\u679c\u5b50\u7bc0\u9ede >1 \uff0c\u8a72\u9ede\u5c31\u662f\u5272\u9ede \u5982\u679c\u8a08\u7b97\u6a39\u908a\uff0c\u90a3\u9ebc\u5152\u5b50\u7684 low \u51fd\u6578\u53ea\u8981 >= \u7236\u89aa\u81ea\u5df1\u7684\u6df1\u5ea6\uff0c\u5982\u679c\u4e0d\u7b97\u6a39\u908a\u7684\u8a71\uff0c\u90a3\u9ebc\u5152\u5b50\u7684 low \u51fd\u6578\u9700\u56b4\u683c\u5927\u65bc\u7236\u89aa\u81ea\u5df1\u7684\u6df1\u5ea6\u3002 int low[N], depth[N]; bool is_cut_vertex[N], visit[N]; vector<int> G[N]; void dfs(int now, int cur_depth) { visit[now] = true; depth[now] = low[now] = cur_depth; int cut_son = 0; for (auto i : G[now]) { if (visit[i]) { // ancestor low[now] = min(low[now], depth[i]); } else { // offspring dfs(i, cur_depth + 1); cut_son += 1; low[now] = min(low[now], low[i]); if (low[i] >= depth[now]) is_cut_vertex[now] = true; } } if (cur_depth == 0) is_cut_vertex[now] = (cut_son != 1); return; } \u9019\u500b\u6f14\u7b97\u6cd5\u4e3b\u8981\u662f\u505a DFS\uff0c\u6240\u4ee5\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u908a\u96d9\u9023\u901a \u548c\u9ede\u9023\u901a\u76f8\u4f3c\uff0c\u8981\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u908a\u96d9\u9023\u901a\uff0c\u5c31\u8981\u6aa2\u67e5\u4ed6\u662f\u5426\u6709\u5272\u908a\uff0c\u5982\u679c\u6c92\u6709\u5272\u908a\uff0c\u5247\u9019\u5f35\u5716\u70ba\u908a\u96d9\u9023\u901a\u3002 \u5272\u908a\uff1a\u7d66\u5b9a\u4e00\u5f35\u5716 G \uff0c\u5982\u679c\u79fb\u9664\u908a e \u53ca e \u9023\u63a5\u7684\u9ede\u4e4b\u5f8c\uff0c\u5716 G \u518d\u9023\u901a\uff0c\u908a e \u90fd\u88ab\u7a31\u70ba G \u7684\u4e00\u500b\u5272\u908a\uff08cut-edge\uff09\u6216\u6a4b\uff08bridge)\u3002 \u6a39\u908a\u624d\u6709\u53ef\u80fd\u662f\u6a4b\uff0c\u5176\u4ed6\u7684\u908a\u62d4\u9664\u4ecd\u7136\u53ef\u4ee5\u85c9\u7531\u6a39\u908a\u9023\u901a\u3002\u985e\u4f3c\u5730\u5982\u679c\u5b50\u7bc0\u9ede\u53ea\u80fd\u5f9e\u7236\u89aa\u5230\u5b83\u9019\u689d\u908a\u53bb\u8d70\u56de\u7956\u5148\uff0c\u90a3\u9ebc\u7236\u89aa\u5230\u5152\u5b50\u7684\u9019\u689d\u908a\u5c31\u662f\u6a4b\u3002\u6211\u5011\u540c\u6a23\u53ef\u4ee5\u7528\u5b9a\u7fa9\u4e26\u7dad\u8b77 low \u51fd\u6578\uff0c\u4f46\u662f\u6839\u7bc0\u9ede\u4e0d\u518d\u662f\u7279\u4f8b\u3002 int low[N], depth[N]; bool visit[N]; vector<int> G[N]; vector<pair<int, int>> my_cut_edge; void dfs(int now, int cur_depth, int parent) { visit[now] = true; depth[now] = low[now] = cur_depth; // int cut_son = 0; for (auto i : G[now]) { if (i != parent) continue; if (visit[i]) { // ancestor low[now] = min(low[now], depth[i]); } else { // offspring dfs(i, cur_depth + 1, now); // cut_son += 1; low[now] = min(low[now], low[i]); if (low[i] > depth[now]) my_cut_edge.push_bach({now, i}); } } return; } bool is_2_edge_connected(int n) { int cut_edge = 0; memset(visit, 0, sizeof(visit)); dfs(1, 0, -1); return my_cut_edge.size() == 0; } \u548c\u524d\u9762\u9ede\u96d9\u9023\u901a\u76f8\u540c\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u96d9\u9023\u901a\u5143\u4ef6 \u9023\u901a\u5143\u4ef6\uff1a\u4e00\u5f35\u5716 G \u6709\u5f88\u591a\u5b50\u5716\uff0c\u5982\u679c\u4e00\u500b\u5b50\u5716 G' \u662f\u9023\u901a\u7684\uff0c\u6211\u5011\u7a31\u4e4b\u70ba\u9023\u901a\u5143\u4ef6\uff08connected component)\uff0c\u5982\u679c\u4e00\u500b\u9023\u901a\u5143\u4ef6\u6eff\u8db3 \"\u52a0\u4e0a\u4efb\u610f\u4e00\u500b\u5176\u4ed6\u7684\u9ede\u5c31\u4e0d\u518d\u9023\u901a\"\uff0c\u5247\u7a31\u9019\u6a23\u7684\u9023\u901a\u5143\u4ef6\u662f \"\u6975\u5927\u7684\"(maximal)\u3002 \u908a\u96d9\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u908a\u96d9\u9023\u901a\u5716\uff0c\u6211\u5011\u5c31\u6210\u9019\u5f35\u5b50\u5716\u70ba\u908a\u9023\u901a\u5143\u5b50\u5716\uff08bi-edge-connected graph\uff09\u6216\u908a\u96d9\u9023\u901a\u5143\u4ef6\uff08bi-edge-connected component)\u3002 \u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u9ede\u96d9\u9023\u901a\u5716\uff0c\u6211\u5011\u5c31\u6210\u9019\u5f35\u5b50\u5716\u70ba\u9ede\u9023\u901a\u5143\u5b50\u5716\uff08bi-vertex-connected graph\uff09\u6216\u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff08bi-vertex-connected component)\u3002 \u4e00\u822c\u4f86\u8aaa\uff0c\u6211\u5011\u6703\u8a0e\u8ad6\u6975\u5927\u7684\u9023\u901a\u5143\u4ef6\uff0c\u4ee5\u4e0b\u6240\u6709\u7684\u9023\u901a\u5143\u4ef6\u90fd\u662f\u6975\u5927\u7684\u3002 \u8981\u4e00\u5f35\u5f35\u5716\u7684\u6240\u6709\u908a\u96d9\u9023\u901a\u5143\u4ef6\uff0c\u53ea\u8981\u62d4\u6389\u6240\u6709\u6a4b\uff0c\u5269\u4e0b\u7684\u5716\u5c31\u662f\u539f\u5716\u6240\u6709\u7684\u908a\u9023\u901a\u5143\u4ef6\u3002 \u81f3\u65bc\u9ede\u9023\u901a\u5143\u4ef6\u5c31\u6c92\u90a3\u9ebc\u7c21\u55ae\u4e86\uff0c\u56e0\u70ba\u540c\u4e00\u500b\u5272\u9ede\u6709\u53ef\u80fd\u540c\u6642\u5b58\u5728\u591a\u7684\u9ede\u9023\u901a\u5143\u4ef6\u5167\uff0c\u4e26\u4e14\u9ede\u7684\u76f8\u9130\u908a\u4e0d\u4e00\u5b9a\u4e0d\u540c\u7684\u9ede\u9023\u901a\u5143\u4ef6\u4e2d\uff0c\u6240\u4ee5\u6211\u5011\u4e0d\u80fd\u76f4\u63a5\u62d4\u9ede\u62d4\u6389\u4f86\u6c42\u51fa\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u3002 \u81f3\u65bc\u70ba\u4ec0\u9ebc\u6703\u6709\u9019\u6a23\u7684\u5dee\u7570\uff0c\u662f\u56e0\u70ba\u4e00\u822c\u7684\u5716\u662f\u4ee5\u9ede\u70ba\u4e3b\u984c\uff0c\u908a\u7528\u4f86\u63cf\u6558\u9ede\u548c\u9ede\u4e4b\u9593\u7684\u6771\u897f\u3002\u800c\u9ede\u9023\u901a\u554f\u984c\u5247\u662f\u4ee5\u908a\u70ba\u4e3b\u9ad4\uff0c\u9ede\u7528\u4f86\u63cf\u8ff0\u908a\u548c\u908a\u4e4b\u9593\u7684\u95dc\u4fc2\uff0c\u5f8c\u8005\u63cf\u8ff0\u7684\u95dc\u4fc2\u4e0d\u662f\u4e8c\u5143\u95dc\u4fc2\uff0c\u6240\u4ee5\u8b93\u554f\u984c\u8b8a\u5f97\u8907\u96dc\u3002 \u90a3\u6211\u5011\u5c31\u4ee5\u908a\u7684\u89d2\u5ea6\u4f86\u601d\u8003\u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff0c\u5c0d\u65bc\u4e00\u500b\u9ede p \uff0c\u8207\u7236\u89aa\u9ede f \u4e4b\u9593\u6709\u689d\u908a e_f \uff0c\u8207\u5152\u5b50\u9ede c \u4e4b\u9593\u6709\u689d\u908a e_c \uff0c\u5982\u679c low(c)>depth(p) \uff08\u4e0d\u8a08\u7b97\u6a39\u908a\uff09\uff0c\u5247 e_f \u548c e_c \u4e0d\u5728\u540c\u4e00\u500b\u9ede\u9023\u901a\u5143\u4ef6\u5167\uff0c\u53cd\u4e4b e_f \u548c e_c \u5728\u540c\u4e00\u500b\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u5167\u3002\u6839\u64da\u4ee5\u4e0a\u6027\u8cea\uff0c\u6211\u5011\u53ef\u4ee5\u5728 DFS \u904e\u7a0b\u4e2d\u7dad\u8b77\u4e00\u500b stack \uff0c\u7d00\u9304\u76ee\u524d\u7d93\u904e\u7684\u908a\uff0c\u7576\u9047\u5230\u5272\u9ede\u6642\uff0c\u53ef\u4ee5\u5feb\u901f\u627e\u51fa\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u3002 typedef pair<int, int> PII; int low[N], depth[N]; bool is_cut_vertex[N], visit[N]; vector<int> G[N]; vector<PII> BCC[N]; int bcc_cnt = 0; stack<PII> st; void dfs(int now, int cur_depth, int f) { visit[now] = true; depth[now] = low[now] = cur_depth; int cut_son = 0; for (auto i : G[now]) { if (i == f) continue; if (visit[i]) { // ancestor if (depth[i] < depth[now]) { low[now] = min(low[now], depth[i]); st.push({now, i}); } } else { // offspring st.push({now, i}); dfs(i, cur_depth + 1, now); cut_son += 1; low[now] = min(low[now], low[i]); if (low[i] >= depth[now]) { is_cut_vertex[now] = true; auto t = st.top(); st.pop(); while (t != make_pair(now, i)) { BCC[bcc_cnt].push_back(t); t = st.top(); st.pop(); } BCC[bcc_cnt].push_back(t); ++bcc_cnt; } } } if (cur_depth == 0) is_cut_vertex[now] = (cut_son != 1); return; } \u9019\u500b\u6f14\u7b97\u6cd5\u4e00\u6a23\u6709\u505a DFS\uff0c\u4e26\u4e14\u7dad\u8b77\u4e00\u500b stack\uff0c\u6bcf\u689d\u908a\u90fd\u6703\u88ab\u4e1f\u9032\u53bb\u4e00\u6b21\uff0c\u56e0\u6b64\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002 \u6709\u5411\u5716\u7684\u5f37\u9023\u901a \u8ac7\u5b8c\u4e86\u7121\u5411\u5716\uff0c\u5c31\u4f86\u8ac7\u8ad6\u6709\u5411\u5716\uff0c\u6709\u5411\u5716\u7684\u908a\u5177\u6709\u65b9\u5411\u6027\uff0c\u56e0\u6b64\u6bd4\u7121\u5411\u5716\u66f4\u96e3\u9054\u6210 \"\u9023\u901a\" \u7684\u6027\u8cea\uff0c\u65bc\u662f\u70ba\u4e86\u8ddf\u7121\u5411\u5716\u505a\u5340\u5206\uff0c\u8a02\u4e86\u4e00\u500b\u8853\u8a9e \"\u5f37\u9023\u901a\" \u4f86\u8868\u793a\u6709\u5411\u5716\u7684\u9023\u901a\u6027\u3002 \u5f37\u9023\u901a\uff1a\u5c0d\u65bc\u6709\u5411\u5716\u4e0a\u7684\u5169\u9ede A,B \uff0c\u82e5\u5b58\u5728\u4e00\u689d\u8def\u5f91\u5f9e A \u5230 B \uff0c\u4ee5\u53ca\u5b58\u5728\u4e00\u689d\u8def\u5f91\u5f9e B \u5230 A \uff0c\u5247\u6211\u5011\u7a31 A,B \u5169\u9ede\u5f37\u9023\u901a\uff08strongly connected) \u5f37\u9023\u901a\u5716\uff1a\u5982\u679c\u4e00\u5f35\u6709\u5411\u5716\u4e0a\u4efb\u610f\u5169\u9ede\u7686\u5f37\u9023\u901a\uff0c\u5247\u9019\u5f35\u5716\u70ba\u5f37\u9023\u901a\u5716\uff08strongly connected graph) \u5f37\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u5716\u4e2d\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u5f37\u9023\u901a\u5716\uff0c\u6211\u5011\u7a31\u9019\u500b\u5b50\u5716\u70ba\u5f37\u9023\u901a\u5b50\u5716\uff08strongly connected subgraph)\uff0c\u6216\u662f\u5f37\u9023\u901a\u5143\u4ef6\uff08strongly connected component) \u5f37\u9023\u901a\u70ba\u6709\u5411\u5716\u4e2d\u5f88\u91cd\u8981\u7684\u6027\u8cea\uff0c\u5982\u679c\u5c07\u5f37\u9023\u901a\u5143\u4ef6\u5404\u81ea\u7e2e\u6210\u4e00\u9ede\uff0c\u65b0\u5716\u662f\u4e00\u5f35\u6709\u5411\u7121\u74b0\u5716\uff08Directed Acyclic Graph, DAG)\uff0cDAG \u6709\u8a31\u591a\u5f37\u529b\u6027\u8cea\uff0c\u53ef\u4ee5\u8b93\u5716\u4e0a\u7684\u554f\u984c\u8b8a\u5f97\u6709\u89e3\uff0c\u6709\u4e9b\u5716\u8ad6\u984c\u76ee\u4e00\u958b\u59cb\u6703\u5148\u627e\u51fa SCC \u4f86\u89e3\u984c\u3002 \u5f37\u9023\u901a\u5143\u4ef6 Tarjan \u6f14\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u627e\u51fa\u5f37\u9023\u901a\u5143\u4ef6\uff0c\u4e0d\u904e\u908f\u8f2f\u6703\u5f88\u8907\u96dc\uff0c\u6240\u4ee5\u6211\u5011\u4ecb\u7d39\u53e6\u4e00\u7a2e\u6f14\u7b97\u6cd5\u53eb\u505a Kosaraju's algorithm\u3002 Kosaraju's algorithm \u57fa\u65bc\u89c0\u5bdf\u5230\u7684\u5169\u4ef6\u4e8b\u800c\u6210\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u70ba\u5c07\u539f\u5716\u6bcf\u689d\u908a\u90fd\u53cd\u5411\uff0c\u5f97\u5230\u7684\u65b0\u5716\uff0c\u6240\u6709 SCC \u7684\u4f4d\u7f6e\u4f9d\u820a\u76f8\u540c\u3002\u7b2c\u4e8c\u4ef6\u4e8b\u70ba\u5982\u679c\u6211\u5011\u7528 \"\u6b63\u78ba\u7684\" \u9806\u5e8f\u904d\u6b77\u5716\uff0c\u6bcf\u6b21\u904d\u6b77\u5230\u7684\u9ede\u8996\u70ba\u540c\u4e00\u500b SCC\uff0c\u90a3\u9ebc\u662f\u6709\u53ef\u80fd\u53ef\u4ee5\u627e\u51fa\u6b63\u78ba\u7684 SCC \u7684\u3002 \u6211\u5011\u5206\u6210\u4e09\u7a2e\u60c5\u6cc1\u4f86\u8a0e\u8ad6\u90a3\u6a23\u624d\u662f\u6b63\u78ba\u7684\u904d\u6b77\u9806\u5e8f\u3002 A,B \u5728\u540c\u4e00\u500b SCC \u88e1\uff1a\u5148\u62dc\u8a2a\u8ab0\u90fd\u53ef\u4ee5\uff0c\u53cd\u6b63\u53e6\u5916\u4e00\u500b\u9ede\u4e5f\u6703\u88ab\u62dc\u8a2a\u5230 A,B \u4e92\u76f8\u90fd\u4e0d\u80fd\u8d70\u5230\u5c0d\u65b9\uff1a\u9019\u7a2e\u60c5\u6cc1\u4e5f\u662f\u5148\u62dc\u8a2a\u8ab0\u90fd\u53ef\u4ee5\uff0c\u53cd\u6b63\u6beb\u4e0d\u76f8\u5e72 A \u8d70\u7684\u5230 B \uff0c B \u8d70\u4e0d\u5230 A \uff08\u55ae\u5411\u901a\u884c\uff09\uff1a\u9019\u7a2e\u60c5\u6cc1\u53ea\u80fd\u5148\u8d70 B \u518d\u8d70 A \uff0c\u5426\u5247\u5148\u8d70 A \u7684\u8a71\uff0c B \u6703\u88ab\u8a8d\u70ba\u548c A \u5728\u540c\u4e00\u500b SCC \u5167 \u6240\u4ee5\u53ea\u8981\u7d66\u51fa\u4e00\u500b\u9806\u5e8f\uff0c\u5c0d\u65bc\u6240\u6709\u53ea\u6709 A \u8d70\u7684\u5230 B \uff0c B \u8d70\u4e0d\u5230 A \u7684\u9ede\u5c0d (A,B) \u90fd\u6eff\u8db3 B \u6703\u6bd4 B \u5148\u88ab\u8d70\u5230\uff0c\u9019\u500b\u6f14\u7b97\u6cd5\u5c31\u884c\u5f97\u901a\u4e86\u3002\u57fa\u65bc\u9019\u500b\u9053\u7406\uff0cKosaraju's algorithm \u5c31\u8a95\u751f\u4e86\uff1a \u5c07\u5716\u4e0a\u6240\u6709\u908a\u53cd\u5411\uff0c\u5f97\u5230\u65b0\u5716 G' \u5728\u5716 G' \u4e0a\u627e\u4e00\u500b\u672a\u62dc\u8a2a\u904e\u7684\u9ede DFS \u4e26\u4e14\u8a18\u9304\u6642\u9593\u6233\uff0cDFS \u5b8c\u5f8c\uff0c\u5982\u679c\u9084\u6709\u9ede\u672a\u88ab DFS\uff0c\u518d\u9032\u884c\u524d\u6558\u52d5\u4f5c\u3002 \u4f9d\u6642\u9593\u6233\u7684\u96e2\u958b\u6233\u8a18\u5c0d\u9ede\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6240\u5f97\u5e8f\u5217\u5373\u70ba\u6240\u6c42\u3002\u518d\u6839\u64da\u9019\u500b\u5e8f\u5217\u5728\u539f\u5716 G \u505a DFS\uff0c\u6bcf\u6b21 DFS \u5230\u7684\u9ede\u5f62\u6210\u4e00\u500b SCC\u3002 \u73fe\u5728\u4f86\u8b49\u660e\u9019\u500b\u5e8f\u5217\u6eff\u8db3\u6211\u5011\u7684\u8981\u6c42\uff1a \u5c0d\u65bc\u5716 G \u4e0a\u4efb\u610f\u55ae\u5411\u901a\u884c\u7684\u9ede\u5c0d A\\rightarrow B \uff0c\u5728 G' \u4e0a\u6703\u8b8a\u6210\u55ae\u5411\u901a\u884c\u7684\u9ede\u5c0d B\\rightarrow A \u3002 \u5982\u679c A \u5148\u88ab\u62dc\u8a2a\uff0c\u56e0\u70ba A \u6c92\u8fa6\u6cd5\u505a\u5230 B \uff0c\u6240\u4ee5 A \u6703\u5148\u62dc\u8a2a\u5b8c\u7562\uff0c\u56e0\u6b64 A \u7684\u96e2\u958b\u6233\u8a18\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\u3002 \u5982\u679c B \u5148\u88ab\u62dc\u8a2a\uff0c B \u4e00\u5b9a\u6703\u8d70\u5230 A \uff0c A \u62dc\u8a2a\u5b8c\u7562\u6642\uff0c B \u4e00\u5b9a\u9084\u6c92\u62dc\u8a2a\u5b8c\u7562\uff0c\u56e0\u6b64 A \u7684\u96e2\u958b\u6233\u8a18\u4f9d\u7136\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\u3002 \u5f97\u8b49 A \u7684\u96e2\u958b\u6233\u8a18\u4e00\u5b9a\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\uff0c\u5373 B \u5728\u5e8f\u5217\u4e2d\u6703\u5728 A \u524d\u9762\u3002 \u4ee5\u4e0b\u662f\u7a0b\u5f0f\u78bc\uff0c\u6b64\u7b97\u6cd5\u6703\u505a\u5169\u6b21 DFS \uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002\u3002 vector<int> G[MXN]; vector<int> rev_G[MXN]; vector<int> leave; bitset<MXN> visit; int at_scc[MXN]; void dfs_for_stamp(int now) { visit[now] = true; for (auto i : rev_G[now]) { if (!visit[i]) { dfs_for_stamp(i); } } leave.push_back(now); } void dfs_for_scc(int now, int cur_scc) { visit[now] = true; at_scc[now] = cur_scc; for (auto i : G[now]) { if (!visit[i]) { dfs_for_scc(i, cur_scc); } } } int kosaraju(int n) { visit.reset(); leave.clear(); for (int i = 0; i < n; ++i) { if (!visit[i]) { dfs_for_stamp(i); } } visit.reset(); int scc_count = 0; for (int i = n - 1; i >= 0; --i) { if (!visit[leave[i]]) { dfs_for_scc(leave[i], scc_count++); } } return scc_count; }","title":"\u9023\u901a\u6027"},{"location":"graph/connectivity/#connectivity","text":"\u4e00\u5f35\u4efb\u610f\u5169\u9ede\u63a5\u9023\u901a\u7684\u5716\u53eb\u505a\u9023\u901a\u5716\uff0c\u5728\u5be6\u969b\u60c5\u6cc1\uff0c\u4f8b\u5982\u7db2\u8def\u6216\u96fb\u529b\u7684\u67b6\u8a2d\u90fd\u5e0c\u671b\u7dda\u8def\u662f\u9023\u901a\u7684\uff0c\u8981\u662f\u5730\u65b9\u58de\u6389\uff0c\u6211\u5011\u5e0c\u671b\u5f71\u97ff\u80fd\u8d8a\u5c0f\u8d8a\u597d\u3002\u5728\u5716\u8ad6\u4e2d\uff0c\u6709\u7b97\u6cd5\u53ef\u4ee5\u627e\u51fa\u53bb\u6389\u90a3\u4e9b\u90e8\u5206\u6703\u4f7f\u5f97\u5716\u8b8a\u6210\u4e0d\u9023\u901a\u7684\uff0c\u4ee5\u4e0b\u8a73\u7d30\u8aaa\u660e\u3002","title":"Connectivity"},{"location":"graph/connectivity/#dfs","text":"\u6839\u64da DFS \u7684\u9806\u5e8f\uff08\u6642\u9593\u6233\u8a18\uff09\uff0c\u5c0d\u908a\u9032\u884c\u5206\u985e\uff0c\u9019\u4e9b\u5206\u985e\u5728\u4e4b\u5f8c\u7684\u7ae0\u7bc0\u6703\u7528\u5230\u3002 Tree edge\uff1a\u9023\u5230\u5152\u5b50\u7684\u908a Back edge\uff1a\u5b50\u5b6b\u9023\u5230\u7956\u5148\u7684\u908a Forward edge\uff1a\u9023\u5230\u5b50\u5b6b\uff08\u975e\u5152\u5b50\uff09\u7684\u908a Cross edge\uff1a\u9023\u5230\u975e\u76f4\u7cfb\u8840\u89aa\u7684\u908a \u5176\u4e2d\u6709\u5411\u5716\u662f\u56db\u7a2e\u908a\u90fd\u6709\uff0c\u7121\u5411\u5716\u53ea\u6709\u524d\u9762\u5169\u7a2e\u3002","title":"DFS \u908a\u5206\u985e"},{"location":"graph/connectivity/#_1","text":"\u9ede\u9023\u901a\u5ea6\uff1a\u6700\u5c11\u8981\u79fb\u9664\u591a\u5c11\u500b\u9ede\u624d\u6703\u8b93\u6574\u5f35\u5716\u4e0d\u518d\u9023\u901a \u908a\u9023\u901a\u5ea6\uff1a\u6700\u5c11\u8981\u79fb\u9664\u591a\u5c11\u689d\u908a\u624d\u6703\u8b93\u6574\u5f35\u5716\u4e0d\u518d\u9023\u901a \u96d9\u9023\u901a\uff1a\u79fb\u9664\u4efb\u610f\u4e00\u500b \"x\" \u5f8c\uff0c\u5716\u4f9d\u7136\u662f\u9023\u901a\u7684\uff0c\u5c31\u7a31\u70ba \"x - \u96d9\u9023\u901a\"\u3002\u4f9d\u7167 \"x\" \u7684\u4e0d\u540c\uff0c\u53ef\u5206\u70ba \"\u9ede\u96d9\u9023\u901a\" \u53ca \"\u908a\u96d9\u9023\u901a\"\u3002 \u5728\u4e4b\u524d\u63d0\u5230\u7684\u4f8b\u5b50\uff0c\u7db2\u8def\u7684\u67b6\u8a2d\uff0c\u9700\u8981\u7279\u5225\u6ce8\u610f\u96d9\u9023\u901a\u7684\u554f\u984c\uff0c\u842c\u4e00\u6709\u90e8\u5206\u7684\u7dda\u8def\uff08\u908a\uff09\u6216\u662f\u8a2d\u5099\uff08\u9ede\uff09\u640d\u58de\uff0c\u5c31\u6709\u53ef\u80fd\u5c0e\u81f4\u4e00\u90e8\u5206\u7684\u7db2\u8def\u4e0d\u9023\u901a\u3002\u4ee5\u4e0b\u5206\u5225\u5f9e\u9ede\u548c\u908a\u7684\u89d2\u5ea6\u63a2\u8a0e\u96d9\u9023\u901a\u3002","title":"\u7121\u5411\u5716\u7684\u96d9\u9023\u901a"},{"location":"graph/connectivity/#_2","text":"\u8981\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u9ede\u96d9\u9023\u901a\uff0c\u5c31\u8981\u6aa2\u67e5\u4ed6\u662f\u5426\u6709\u5272\u9ede\uff0c\u5982\u679c\u6c92\u6709\u5272\u9ede\uff0c\u5247\u9019\u5f35\u5716\u70ba\u9ede\u96d9\u9023\u901a\u3002 \u5272\u9ede\uff1a\u7d66\u5b9a\u4e00\u5f35\u5716 G \uff0c\u5982\u679c\u79fb\u9664\u9ede v \u53ca\u9023\u63a5 v \u7684\u908a\u4e4b\u5f8c\uff0c\u5716 G \u4e0d\u518d\u9023\u901a\uff0c\u9ede v \u90fd\u88ab\u7a31\u70ba G \u7684\u4e00\u500b\u5272\u9ede\uff08cut-vertex\uff09\u6216\u95dc\u7bc0\u9ede\uff08articulation-vertex, articulation-point)\u3002 \u81f3\u65bc\u600e\u9ebc\u627e\u51fa\u5272\u9ede\uff0c\u6211\u5011\u7528 tarjan \u6f14\u7b97\u6cd5\u3002\u9996\u5148\u6211\u5011\u7528 DFS \u70ba\u7121\u5411\u5716\u5efa\u7acb\u4e00\u9846 DFS \u6a39\u3002\u7121\u5411\u5716\u7684 DFS \u6a39\u53ea\u6709 Tree Edge \u548c Back Edge\uff0c\u6240\u4ee5\u4e00\u500b\u7bc0\u9ede\u662f\u4e0d\u53ef\u80fd\u900f\u904e\u5176\u4ed6\u5b50\u6a39\u56de\u5230\u7956\u5148\u7684\uff0c\u5982\u679c\u4e0d\u7d93\u904e\u7236\u7bc0\u9ede\u7684\u60c5\u6cc1\u4e0b\uff0c\u7121\u6cd5\u8d70\u56de\u7956\u5148\uff0c\u90a3\u9ebc\u8a72\u7bc0\u9ede\u7684\u7236\u7bc0\u9ede\u5c31\u662f\u5272\u9ede\u4e86\u3002\u6240\u4ee5\u8981\u5224\u65b7\u4e00\u500b\u9ede\u662f\u4e0d\u662f\u5272\u9ede\uff0c\u5c31\u8981\u5224\u65b7\u5b83\u7684\u5b50\u7bc0\u9ede\u80fd\u4e0d\u80fd\u4e0d\u7d93\u7531\u5b83\u6703\u5230\u7956\u5148\uff0ctanjan \u6f14\u7b97\u6cd5\u5b9a\u7fa9\u4e00\u500b low \u51fd\u6578\uff0c low \u51fd\u6578\u7684\u5b9a\u7fa9\u70ba\u4e00\u500b\u9ede\u900f\u904e\u81ea\u5df1\u672c\u8eab\u548c\u5b50\u5b6b\uff0c\u80fd\u8d70\u5230\u6700\u5c0f\u7956\u5148\u7684\u6df1\u5ea6\uff0c low \u51fd\u6578\u53ef\u4ee5\u5728 DFS \u6642\u4e00\u4e26\u8a08\u7b97\u3002 \u6709\u4e86 low \u51fd\u6578\uff0c\u5c31\u53ef\u4ee5\u5224\u65b7\u5b50\u7bc0\u9ede\u662f\u5426\u4e0d\u900f\u904e\u81ea\u5df1\u9023\u56de\u7956\u5148\u3002\u5c0d\u65bc\u4e00\u500b\u975e\u6839\u7bc0\u9ede\uff0c\u5982\u679c\u6709\u4efb\u4e00\u5b50\u7bc0\u9ede\u4e0d\u80fd\u4e0d\u900f\u904e\u81ea\u5df1\u9023\u56de\u7956\u5148\uff0c\u8a72\u9ede\u5c31\u662f\u5272\u9ede\u3002\u5c0d\u65bc\u6839\u7bc0\u9ede\uff0c\u5982\u679c\u5b50\u7bc0\u9ede >1 \uff0c\u8a72\u9ede\u5c31\u662f\u5272\u9ede\u3002\u6211\u5011\u6574\u7406\u6210\u4ee5\u4e0b\u6b65\u9a5f\uff1a DFS\uff1a\u5728 DFS \u904e\u7a0b\u7dad\u8b77 Low \u51fd\u6578 \u975e\u6839\u7bc0\u9ede\uff1a\u5982\u679c\u6709\u4efb\u4e00\u5b50\u7bc0\u9ede\u4e0d\u80fd\u4e0d\u900f\u904e\u81ea\u5df1\u9023\u56de\u7956\u5148\uff0c\u8a72\u9ede\u5c31\u662f\u5272\u9ede \u6839\u7bc0\u9ede\uff1a\u5982\u679c\u5b50\u7bc0\u9ede >1 \uff0c\u8a72\u9ede\u5c31\u662f\u5272\u9ede \u5982\u679c\u8a08\u7b97\u6a39\u908a\uff0c\u90a3\u9ebc\u5152\u5b50\u7684 low \u51fd\u6578\u53ea\u8981 >= \u7236\u89aa\u81ea\u5df1\u7684\u6df1\u5ea6\uff0c\u5982\u679c\u4e0d\u7b97\u6a39\u908a\u7684\u8a71\uff0c\u90a3\u9ebc\u5152\u5b50\u7684 low \u51fd\u6578\u9700\u56b4\u683c\u5927\u65bc\u7236\u89aa\u81ea\u5df1\u7684\u6df1\u5ea6\u3002 int low[N], depth[N]; bool is_cut_vertex[N], visit[N]; vector<int> G[N]; void dfs(int now, int cur_depth) { visit[now] = true; depth[now] = low[now] = cur_depth; int cut_son = 0; for (auto i : G[now]) { if (visit[i]) { // ancestor low[now] = min(low[now], depth[i]); } else { // offspring dfs(i, cur_depth + 1); cut_son += 1; low[now] = min(low[now], low[i]); if (low[i] >= depth[now]) is_cut_vertex[now] = true; } } if (cur_depth == 0) is_cut_vertex[now] = (cut_son != 1); return; } \u9019\u500b\u6f14\u7b97\u6cd5\u4e3b\u8981\u662f\u505a DFS\uff0c\u6240\u4ee5\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E)","title":"\u9ede\u96d9\u9023\u901a"},{"location":"graph/connectivity/#_3","text":"\u548c\u9ede\u9023\u901a\u76f8\u4f3c\uff0c\u8981\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u908a\u96d9\u9023\u901a\uff0c\u5c31\u8981\u6aa2\u67e5\u4ed6\u662f\u5426\u6709\u5272\u908a\uff0c\u5982\u679c\u6c92\u6709\u5272\u908a\uff0c\u5247\u9019\u5f35\u5716\u70ba\u908a\u96d9\u9023\u901a\u3002 \u5272\u908a\uff1a\u7d66\u5b9a\u4e00\u5f35\u5716 G \uff0c\u5982\u679c\u79fb\u9664\u908a e \u53ca e \u9023\u63a5\u7684\u9ede\u4e4b\u5f8c\uff0c\u5716 G \u518d\u9023\u901a\uff0c\u908a e \u90fd\u88ab\u7a31\u70ba G \u7684\u4e00\u500b\u5272\u908a\uff08cut-edge\uff09\u6216\u6a4b\uff08bridge)\u3002 \u6a39\u908a\u624d\u6709\u53ef\u80fd\u662f\u6a4b\uff0c\u5176\u4ed6\u7684\u908a\u62d4\u9664\u4ecd\u7136\u53ef\u4ee5\u85c9\u7531\u6a39\u908a\u9023\u901a\u3002\u985e\u4f3c\u5730\u5982\u679c\u5b50\u7bc0\u9ede\u53ea\u80fd\u5f9e\u7236\u89aa\u5230\u5b83\u9019\u689d\u908a\u53bb\u8d70\u56de\u7956\u5148\uff0c\u90a3\u9ebc\u7236\u89aa\u5230\u5152\u5b50\u7684\u9019\u689d\u908a\u5c31\u662f\u6a4b\u3002\u6211\u5011\u540c\u6a23\u53ef\u4ee5\u7528\u5b9a\u7fa9\u4e26\u7dad\u8b77 low \u51fd\u6578\uff0c\u4f46\u662f\u6839\u7bc0\u9ede\u4e0d\u518d\u662f\u7279\u4f8b\u3002 int low[N], depth[N]; bool visit[N]; vector<int> G[N]; vector<pair<int, int>> my_cut_edge; void dfs(int now, int cur_depth, int parent) { visit[now] = true; depth[now] = low[now] = cur_depth; // int cut_son = 0; for (auto i : G[now]) { if (i != parent) continue; if (visit[i]) { // ancestor low[now] = min(low[now], depth[i]); } else { // offspring dfs(i, cur_depth + 1, now); // cut_son += 1; low[now] = min(low[now], low[i]); if (low[i] > depth[now]) my_cut_edge.push_bach({now, i}); } } return; } bool is_2_edge_connected(int n) { int cut_edge = 0; memset(visit, 0, sizeof(visit)); dfs(1, 0, -1); return my_cut_edge.size() == 0; } \u548c\u524d\u9762\u9ede\u96d9\u9023\u901a\u76f8\u540c\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E)","title":"\u908a\u96d9\u9023\u901a"},{"location":"graph/connectivity/#_4","text":"\u9023\u901a\u5143\u4ef6\uff1a\u4e00\u5f35\u5716 G \u6709\u5f88\u591a\u5b50\u5716\uff0c\u5982\u679c\u4e00\u500b\u5b50\u5716 G' \u662f\u9023\u901a\u7684\uff0c\u6211\u5011\u7a31\u4e4b\u70ba\u9023\u901a\u5143\u4ef6\uff08connected component)\uff0c\u5982\u679c\u4e00\u500b\u9023\u901a\u5143\u4ef6\u6eff\u8db3 \"\u52a0\u4e0a\u4efb\u610f\u4e00\u500b\u5176\u4ed6\u7684\u9ede\u5c31\u4e0d\u518d\u9023\u901a\"\uff0c\u5247\u7a31\u9019\u6a23\u7684\u9023\u901a\u5143\u4ef6\u662f \"\u6975\u5927\u7684\"(maximal)\u3002 \u908a\u96d9\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u908a\u96d9\u9023\u901a\u5716\uff0c\u6211\u5011\u5c31\u6210\u9019\u5f35\u5b50\u5716\u70ba\u908a\u9023\u901a\u5143\u5b50\u5716\uff08bi-edge-connected graph\uff09\u6216\u908a\u96d9\u9023\u901a\u5143\u4ef6\uff08bi-edge-connected component)\u3002 \u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u9ede\u96d9\u9023\u901a\u5716\uff0c\u6211\u5011\u5c31\u6210\u9019\u5f35\u5b50\u5716\u70ba\u9ede\u9023\u901a\u5143\u5b50\u5716\uff08bi-vertex-connected graph\uff09\u6216\u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff08bi-vertex-connected component)\u3002 \u4e00\u822c\u4f86\u8aaa\uff0c\u6211\u5011\u6703\u8a0e\u8ad6\u6975\u5927\u7684\u9023\u901a\u5143\u4ef6\uff0c\u4ee5\u4e0b\u6240\u6709\u7684\u9023\u901a\u5143\u4ef6\u90fd\u662f\u6975\u5927\u7684\u3002 \u8981\u4e00\u5f35\u5f35\u5716\u7684\u6240\u6709\u908a\u96d9\u9023\u901a\u5143\u4ef6\uff0c\u53ea\u8981\u62d4\u6389\u6240\u6709\u6a4b\uff0c\u5269\u4e0b\u7684\u5716\u5c31\u662f\u539f\u5716\u6240\u6709\u7684\u908a\u9023\u901a\u5143\u4ef6\u3002 \u81f3\u65bc\u9ede\u9023\u901a\u5143\u4ef6\u5c31\u6c92\u90a3\u9ebc\u7c21\u55ae\u4e86\uff0c\u56e0\u70ba\u540c\u4e00\u500b\u5272\u9ede\u6709\u53ef\u80fd\u540c\u6642\u5b58\u5728\u591a\u7684\u9ede\u9023\u901a\u5143\u4ef6\u5167\uff0c\u4e26\u4e14\u9ede\u7684\u76f8\u9130\u908a\u4e0d\u4e00\u5b9a\u4e0d\u540c\u7684\u9ede\u9023\u901a\u5143\u4ef6\u4e2d\uff0c\u6240\u4ee5\u6211\u5011\u4e0d\u80fd\u76f4\u63a5\u62d4\u9ede\u62d4\u6389\u4f86\u6c42\u51fa\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u3002 \u81f3\u65bc\u70ba\u4ec0\u9ebc\u6703\u6709\u9019\u6a23\u7684\u5dee\u7570\uff0c\u662f\u56e0\u70ba\u4e00\u822c\u7684\u5716\u662f\u4ee5\u9ede\u70ba\u4e3b\u984c\uff0c\u908a\u7528\u4f86\u63cf\u6558\u9ede\u548c\u9ede\u4e4b\u9593\u7684\u6771\u897f\u3002\u800c\u9ede\u9023\u901a\u554f\u984c\u5247\u662f\u4ee5\u908a\u70ba\u4e3b\u9ad4\uff0c\u9ede\u7528\u4f86\u63cf\u8ff0\u908a\u548c\u908a\u4e4b\u9593\u7684\u95dc\u4fc2\uff0c\u5f8c\u8005\u63cf\u8ff0\u7684\u95dc\u4fc2\u4e0d\u662f\u4e8c\u5143\u95dc\u4fc2\uff0c\u6240\u4ee5\u8b93\u554f\u984c\u8b8a\u5f97\u8907\u96dc\u3002 \u90a3\u6211\u5011\u5c31\u4ee5\u908a\u7684\u89d2\u5ea6\u4f86\u601d\u8003\u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff0c\u5c0d\u65bc\u4e00\u500b\u9ede p \uff0c\u8207\u7236\u89aa\u9ede f \u4e4b\u9593\u6709\u689d\u908a e_f \uff0c\u8207\u5152\u5b50\u9ede c \u4e4b\u9593\u6709\u689d\u908a e_c \uff0c\u5982\u679c low(c)>depth(p) \uff08\u4e0d\u8a08\u7b97\u6a39\u908a\uff09\uff0c\u5247 e_f \u548c e_c \u4e0d\u5728\u540c\u4e00\u500b\u9ede\u9023\u901a\u5143\u4ef6\u5167\uff0c\u53cd\u4e4b e_f \u548c e_c \u5728\u540c\u4e00\u500b\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u5167\u3002\u6839\u64da\u4ee5\u4e0a\u6027\u8cea\uff0c\u6211\u5011\u53ef\u4ee5\u5728 DFS \u904e\u7a0b\u4e2d\u7dad\u8b77\u4e00\u500b stack \uff0c\u7d00\u9304\u76ee\u524d\u7d93\u904e\u7684\u908a\uff0c\u7576\u9047\u5230\u5272\u9ede\u6642\uff0c\u53ef\u4ee5\u5feb\u901f\u627e\u51fa\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u3002 typedef pair<int, int> PII; int low[N], depth[N]; bool is_cut_vertex[N], visit[N]; vector<int> G[N]; vector<PII> BCC[N]; int bcc_cnt = 0; stack<PII> st; void dfs(int now, int cur_depth, int f) { visit[now] = true; depth[now] = low[now] = cur_depth; int cut_son = 0; for (auto i : G[now]) { if (i == f) continue; if (visit[i]) { // ancestor if (depth[i] < depth[now]) { low[now] = min(low[now], depth[i]); st.push({now, i}); } } else { // offspring st.push({now, i}); dfs(i, cur_depth + 1, now); cut_son += 1; low[now] = min(low[now], low[i]); if (low[i] >= depth[now]) { is_cut_vertex[now] = true; auto t = st.top(); st.pop(); while (t != make_pair(now, i)) { BCC[bcc_cnt].push_back(t); t = st.top(); st.pop(); } BCC[bcc_cnt].push_back(t); ++bcc_cnt; } } } if (cur_depth == 0) is_cut_vertex[now] = (cut_son != 1); return; } \u9019\u500b\u6f14\u7b97\u6cd5\u4e00\u6a23\u6709\u505a DFS\uff0c\u4e26\u4e14\u7dad\u8b77\u4e00\u500b stack\uff0c\u6bcf\u689d\u908a\u90fd\u6703\u88ab\u4e1f\u9032\u53bb\u4e00\u6b21\uff0c\u56e0\u6b64\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002","title":"\u96d9\u9023\u901a\u5143\u4ef6"},{"location":"graph/connectivity/#_5","text":"\u8ac7\u5b8c\u4e86\u7121\u5411\u5716\uff0c\u5c31\u4f86\u8ac7\u8ad6\u6709\u5411\u5716\uff0c\u6709\u5411\u5716\u7684\u908a\u5177\u6709\u65b9\u5411\u6027\uff0c\u56e0\u6b64\u6bd4\u7121\u5411\u5716\u66f4\u96e3\u9054\u6210 \"\u9023\u901a\" \u7684\u6027\u8cea\uff0c\u65bc\u662f\u70ba\u4e86\u8ddf\u7121\u5411\u5716\u505a\u5340\u5206\uff0c\u8a02\u4e86\u4e00\u500b\u8853\u8a9e \"\u5f37\u9023\u901a\" \u4f86\u8868\u793a\u6709\u5411\u5716\u7684\u9023\u901a\u6027\u3002 \u5f37\u9023\u901a\uff1a\u5c0d\u65bc\u6709\u5411\u5716\u4e0a\u7684\u5169\u9ede A,B \uff0c\u82e5\u5b58\u5728\u4e00\u689d\u8def\u5f91\u5f9e A \u5230 B \uff0c\u4ee5\u53ca\u5b58\u5728\u4e00\u689d\u8def\u5f91\u5f9e B \u5230 A \uff0c\u5247\u6211\u5011\u7a31 A,B \u5169\u9ede\u5f37\u9023\u901a\uff08strongly connected) \u5f37\u9023\u901a\u5716\uff1a\u5982\u679c\u4e00\u5f35\u6709\u5411\u5716\u4e0a\u4efb\u610f\u5169\u9ede\u7686\u5f37\u9023\u901a\uff0c\u5247\u9019\u5f35\u5716\u70ba\u5f37\u9023\u901a\u5716\uff08strongly connected graph) \u5f37\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u5716\u4e2d\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u5f37\u9023\u901a\u5716\uff0c\u6211\u5011\u7a31\u9019\u500b\u5b50\u5716\u70ba\u5f37\u9023\u901a\u5b50\u5716\uff08strongly connected subgraph)\uff0c\u6216\u662f\u5f37\u9023\u901a\u5143\u4ef6\uff08strongly connected component) \u5f37\u9023\u901a\u70ba\u6709\u5411\u5716\u4e2d\u5f88\u91cd\u8981\u7684\u6027\u8cea\uff0c\u5982\u679c\u5c07\u5f37\u9023\u901a\u5143\u4ef6\u5404\u81ea\u7e2e\u6210\u4e00\u9ede\uff0c\u65b0\u5716\u662f\u4e00\u5f35\u6709\u5411\u7121\u74b0\u5716\uff08Directed Acyclic Graph, DAG)\uff0cDAG \u6709\u8a31\u591a\u5f37\u529b\u6027\u8cea\uff0c\u53ef\u4ee5\u8b93\u5716\u4e0a\u7684\u554f\u984c\u8b8a\u5f97\u6709\u89e3\uff0c\u6709\u4e9b\u5716\u8ad6\u984c\u76ee\u4e00\u958b\u59cb\u6703\u5148\u627e\u51fa SCC \u4f86\u89e3\u984c\u3002","title":"\u6709\u5411\u5716\u7684\u5f37\u9023\u901a"},{"location":"graph/connectivity/#_6","text":"Tarjan \u6f14\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u627e\u51fa\u5f37\u9023\u901a\u5143\u4ef6\uff0c\u4e0d\u904e\u908f\u8f2f\u6703\u5f88\u8907\u96dc\uff0c\u6240\u4ee5\u6211\u5011\u4ecb\u7d39\u53e6\u4e00\u7a2e\u6f14\u7b97\u6cd5\u53eb\u505a Kosaraju's algorithm\u3002 Kosaraju's algorithm \u57fa\u65bc\u89c0\u5bdf\u5230\u7684\u5169\u4ef6\u4e8b\u800c\u6210\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u70ba\u5c07\u539f\u5716\u6bcf\u689d\u908a\u90fd\u53cd\u5411\uff0c\u5f97\u5230\u7684\u65b0\u5716\uff0c\u6240\u6709 SCC \u7684\u4f4d\u7f6e\u4f9d\u820a\u76f8\u540c\u3002\u7b2c\u4e8c\u4ef6\u4e8b\u70ba\u5982\u679c\u6211\u5011\u7528 \"\u6b63\u78ba\u7684\" \u9806\u5e8f\u904d\u6b77\u5716\uff0c\u6bcf\u6b21\u904d\u6b77\u5230\u7684\u9ede\u8996\u70ba\u540c\u4e00\u500b SCC\uff0c\u90a3\u9ebc\u662f\u6709\u53ef\u80fd\u53ef\u4ee5\u627e\u51fa\u6b63\u78ba\u7684 SCC \u7684\u3002 \u6211\u5011\u5206\u6210\u4e09\u7a2e\u60c5\u6cc1\u4f86\u8a0e\u8ad6\u90a3\u6a23\u624d\u662f\u6b63\u78ba\u7684\u904d\u6b77\u9806\u5e8f\u3002 A,B \u5728\u540c\u4e00\u500b SCC \u88e1\uff1a\u5148\u62dc\u8a2a\u8ab0\u90fd\u53ef\u4ee5\uff0c\u53cd\u6b63\u53e6\u5916\u4e00\u500b\u9ede\u4e5f\u6703\u88ab\u62dc\u8a2a\u5230 A,B \u4e92\u76f8\u90fd\u4e0d\u80fd\u8d70\u5230\u5c0d\u65b9\uff1a\u9019\u7a2e\u60c5\u6cc1\u4e5f\u662f\u5148\u62dc\u8a2a\u8ab0\u90fd\u53ef\u4ee5\uff0c\u53cd\u6b63\u6beb\u4e0d\u76f8\u5e72 A \u8d70\u7684\u5230 B \uff0c B \u8d70\u4e0d\u5230 A \uff08\u55ae\u5411\u901a\u884c\uff09\uff1a\u9019\u7a2e\u60c5\u6cc1\u53ea\u80fd\u5148\u8d70 B \u518d\u8d70 A \uff0c\u5426\u5247\u5148\u8d70 A \u7684\u8a71\uff0c B \u6703\u88ab\u8a8d\u70ba\u548c A \u5728\u540c\u4e00\u500b SCC \u5167 \u6240\u4ee5\u53ea\u8981\u7d66\u51fa\u4e00\u500b\u9806\u5e8f\uff0c\u5c0d\u65bc\u6240\u6709\u53ea\u6709 A \u8d70\u7684\u5230 B \uff0c B \u8d70\u4e0d\u5230 A \u7684\u9ede\u5c0d (A,B) \u90fd\u6eff\u8db3 B \u6703\u6bd4 B \u5148\u88ab\u8d70\u5230\uff0c\u9019\u500b\u6f14\u7b97\u6cd5\u5c31\u884c\u5f97\u901a\u4e86\u3002\u57fa\u65bc\u9019\u500b\u9053\u7406\uff0cKosaraju's algorithm \u5c31\u8a95\u751f\u4e86\uff1a \u5c07\u5716\u4e0a\u6240\u6709\u908a\u53cd\u5411\uff0c\u5f97\u5230\u65b0\u5716 G' \u5728\u5716 G' \u4e0a\u627e\u4e00\u500b\u672a\u62dc\u8a2a\u904e\u7684\u9ede DFS \u4e26\u4e14\u8a18\u9304\u6642\u9593\u6233\uff0cDFS \u5b8c\u5f8c\uff0c\u5982\u679c\u9084\u6709\u9ede\u672a\u88ab DFS\uff0c\u518d\u9032\u884c\u524d\u6558\u52d5\u4f5c\u3002 \u4f9d\u6642\u9593\u6233\u7684\u96e2\u958b\u6233\u8a18\u5c0d\u9ede\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6240\u5f97\u5e8f\u5217\u5373\u70ba\u6240\u6c42\u3002\u518d\u6839\u64da\u9019\u500b\u5e8f\u5217\u5728\u539f\u5716 G \u505a DFS\uff0c\u6bcf\u6b21 DFS \u5230\u7684\u9ede\u5f62\u6210\u4e00\u500b SCC\u3002 \u73fe\u5728\u4f86\u8b49\u660e\u9019\u500b\u5e8f\u5217\u6eff\u8db3\u6211\u5011\u7684\u8981\u6c42\uff1a \u5c0d\u65bc\u5716 G \u4e0a\u4efb\u610f\u55ae\u5411\u901a\u884c\u7684\u9ede\u5c0d A\\rightarrow B \uff0c\u5728 G' \u4e0a\u6703\u8b8a\u6210\u55ae\u5411\u901a\u884c\u7684\u9ede\u5c0d B\\rightarrow A \u3002 \u5982\u679c A \u5148\u88ab\u62dc\u8a2a\uff0c\u56e0\u70ba A \u6c92\u8fa6\u6cd5\u505a\u5230 B \uff0c\u6240\u4ee5 A \u6703\u5148\u62dc\u8a2a\u5b8c\u7562\uff0c\u56e0\u6b64 A \u7684\u96e2\u958b\u6233\u8a18\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\u3002 \u5982\u679c B \u5148\u88ab\u62dc\u8a2a\uff0c B \u4e00\u5b9a\u6703\u8d70\u5230 A \uff0c A \u62dc\u8a2a\u5b8c\u7562\u6642\uff0c B \u4e00\u5b9a\u9084\u6c92\u62dc\u8a2a\u5b8c\u7562\uff0c\u56e0\u6b64 A \u7684\u96e2\u958b\u6233\u8a18\u4f9d\u7136\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\u3002 \u5f97\u8b49 A \u7684\u96e2\u958b\u6233\u8a18\u4e00\u5b9a\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\uff0c\u5373 B \u5728\u5e8f\u5217\u4e2d\u6703\u5728 A \u524d\u9762\u3002 \u4ee5\u4e0b\u662f\u7a0b\u5f0f\u78bc\uff0c\u6b64\u7b97\u6cd5\u6703\u505a\u5169\u6b21 DFS \uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002\u3002 vector<int> G[MXN]; vector<int> rev_G[MXN]; vector<int> leave; bitset<MXN> visit; int at_scc[MXN]; void dfs_for_stamp(int now) { visit[now] = true; for (auto i : rev_G[now]) { if (!visit[i]) { dfs_for_stamp(i); } } leave.push_back(now); } void dfs_for_scc(int now, int cur_scc) { visit[now] = true; at_scc[now] = cur_scc; for (auto i : G[now]) { if (!visit[i]) { dfs_for_scc(i, cur_scc); } } } int kosaraju(int n) { visit.reset(); leave.clear(); for (int i = 0; i < n; ++i) { if (!visit[i]) { dfs_for_stamp(i); } } visit.reset(); int scc_count = 0; for (int i = n - 1; i >= 0; --i) { if (!visit[leave[i]]) { dfs_for_scc(leave[i], scc_count++); } } return scc_count; }","title":"\u5f37\u9023\u901a\u5143\u4ef6"},{"location":"graph/disjointSet/","text":"\u4e26\u67e5\u96c6 \u4e26\u67e5\u96c6\u662f\u4e00\u7a2e\u6a39\u72c0\u7d50\u69cb\uff0c\u4ed6\u652f\u63f4\u5169\u4ef6\u4e8b \u67e5\u8a62\u6240\u96b8\u5c6c\u96c6\u5408 \u5408\u4f75\u5169\u500b\u96c6\u5408 \u6211\u5011\u628a\u96c6\u5408\u8f49\u5316\u6210\u6a39\uff0c\u4e00\u9846\u6a39\u4ee3\u8868\u4e00\u500b\u96c6\u5408\uff0c\u6a39\u6839\u4ee3\u8868\u96c6\u5408\u7684\u8001\u5927\uff0c\u67e5\u8a62\u96b8\u5c6c\u96c6\u5408\u5c31\u56de\u50b3\u6a39\u6839\u662f\u8ab0\uff08\u4e00\u500b\u6a39\u9914\u53ef\u80fd\u6709\u5169\u9846\u6a39\u6839\u5427\uff09\uff0c\u5408\u4f75\u7684\u6642\u4faf\uff0c\u5c31\u628a\u4e00\u9846\u6a39\u7684\u6a39\u6839\u53ea\u5230\u53e6\u4e00\u9846\uff0c\u4ee5\u4e0b\u70ba\u8a73\u7d30\u7684\u63cf\u8ff0\u3002 \u521d\u59cb \u4e00\u958b\u59cb\u7684\u6642\u5019\uff0c\u6bcf\u500b\u9ede\u81ea\u6210\u4e00\u500b\u96c6\u5408\uff0c\u6240\u4ee5\u628a\u6a39\u6839\u90fd\u8a2d\u70ba\u81ea\u5df1\u3002 int Find(int x) { if (x == p[x]) return x; return find(p[x]); } \u72c0\u614b\u58d3\u7e2e\uff1a\u5728\u5408\u4f75\u4e4b\u5f8c\u539f\u672c\u88ab\u6307\u5411\u7684\u6a39\u6839\u5c31\u6c92\u7528\u4e86\uff0c\u6211\u5011\u53ef\u4ee5\u4e00\u908a\u505a\u67e5\u8a62\u6642\uff0c\u4e00\u908a\u505a\u66f4\u65b0\u3002 int Find(int x) { if (x == p[x]) return x; return p[x] = find(p[x]); } \u67e5\u8a62 \u67e5\u8a62\u7684\u6642\u5019\uff0c\u8981\u67e5\u5230\u6a39\u6839\u70ba\u81ea\u5df1\u7684\u9ede\uff0c\u70ba\u6b62\u5426\u5247\u7684\u8a71\u5c31\u8981\u7e7c\u7e8c\u67e5\u3002 void Union(int a, int b) { a = Find(a); b = Find(b); if (a == b) return; p[a] = b; } \u555f\u767c\u5f0f\u5408\u4f75\uff1a\u5efa\u7acb\u4e00\u500b h[i] \u4ee3\u8868\u6a39\u7684\u9ad8\u5ea6\uff0c\u4ea6\u662f\u5143\u7d20\u6700\u5927\u905e\u8ff4\u6b21\u6578\uff0c h[i] \u4e00\u958b\u59cb\u70ba 1 \u3002\u518d\u4f86\uff0c\u6211\u5011\u6bcf\u6b21\u90fd\u8b93\u9ad8\u5ea6\u5c0f\u7684\u9ad8\u5ea6\u5927\u7684\u5408\u4f75\uff0c\u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e00\u6a23\u7684\uff0c\u5c31\u8b93\u5408\u4f75\u5225\u4eba\u7684\u6a39\u9ad8\u5ea6\u52a0 1 \u3002\u5982\u679c\u8981\u628a\u9ad8\u5ea6\u8b8a\u70ba x \uff0c\u5247\u81f3\u5c11\u9700\u8981 2^x \u500b\u9ede\uff0c\u7531\u6b64\u63a8\u51fa N \u500b\u9ede\u6240\u5f62\u6210\u6700\u9ad8\u4e4b\u9ad8\u5ea6\u70ba \\log(N) \u3002 void Union(int a, int b) { a = Find(a); b = Find(b); if (a == b) return; if (rank[a] < rank[b]) p[a] = b; else if (rank[a] > rank[b]) p[b] = a; else { p[a] = b; rank[a]++; } } \u5b8c\u6574\u7a0b\u5f0f\u78bc int p[N], rank[N]; void init() { for (int i = 0; i < N; i++) { p[i] = i; rnak[i] = 1; } } int Find(int x) { if (x == p[x]) return x; return p[x] = find(p[x]); } void Union(int a, int b) { a = Find(a); b = Find(b); if (a == b) return; if (rank[a] < rank[b]) p[a] = b; else if (rank[a] > rank[b]) p[b] = a; else { p[a] = b; rank[a]++; } }","title":"\u4e26\u67e5\u96c6"},{"location":"graph/disjointSet/#_1","text":"\u4e26\u67e5\u96c6\u662f\u4e00\u7a2e\u6a39\u72c0\u7d50\u69cb\uff0c\u4ed6\u652f\u63f4\u5169\u4ef6\u4e8b \u67e5\u8a62\u6240\u96b8\u5c6c\u96c6\u5408 \u5408\u4f75\u5169\u500b\u96c6\u5408 \u6211\u5011\u628a\u96c6\u5408\u8f49\u5316\u6210\u6a39\uff0c\u4e00\u9846\u6a39\u4ee3\u8868\u4e00\u500b\u96c6\u5408\uff0c\u6a39\u6839\u4ee3\u8868\u96c6\u5408\u7684\u8001\u5927\uff0c\u67e5\u8a62\u96b8\u5c6c\u96c6\u5408\u5c31\u56de\u50b3\u6a39\u6839\u662f\u8ab0\uff08\u4e00\u500b\u6a39\u9914\u53ef\u80fd\u6709\u5169\u9846\u6a39\u6839\u5427\uff09\uff0c\u5408\u4f75\u7684\u6642\u4faf\uff0c\u5c31\u628a\u4e00\u9846\u6a39\u7684\u6a39\u6839\u53ea\u5230\u53e6\u4e00\u9846\uff0c\u4ee5\u4e0b\u70ba\u8a73\u7d30\u7684\u63cf\u8ff0\u3002","title":"\u4e26\u67e5\u96c6"},{"location":"graph/disjointSet/#_2","text":"\u4e00\u958b\u59cb\u7684\u6642\u5019\uff0c\u6bcf\u500b\u9ede\u81ea\u6210\u4e00\u500b\u96c6\u5408\uff0c\u6240\u4ee5\u628a\u6a39\u6839\u90fd\u8a2d\u70ba\u81ea\u5df1\u3002 int Find(int x) { if (x == p[x]) return x; return find(p[x]); } \u72c0\u614b\u58d3\u7e2e\uff1a\u5728\u5408\u4f75\u4e4b\u5f8c\u539f\u672c\u88ab\u6307\u5411\u7684\u6a39\u6839\u5c31\u6c92\u7528\u4e86\uff0c\u6211\u5011\u53ef\u4ee5\u4e00\u908a\u505a\u67e5\u8a62\u6642\uff0c\u4e00\u908a\u505a\u66f4\u65b0\u3002 int Find(int x) { if (x == p[x]) return x; return p[x] = find(p[x]); }","title":"\u521d\u59cb"},{"location":"graph/disjointSet/#_3","text":"\u67e5\u8a62\u7684\u6642\u5019\uff0c\u8981\u67e5\u5230\u6a39\u6839\u70ba\u81ea\u5df1\u7684\u9ede\uff0c\u70ba\u6b62\u5426\u5247\u7684\u8a71\u5c31\u8981\u7e7c\u7e8c\u67e5\u3002 void Union(int a, int b) { a = Find(a); b = Find(b); if (a == b) return; p[a] = b; } \u555f\u767c\u5f0f\u5408\u4f75\uff1a\u5efa\u7acb\u4e00\u500b h[i] \u4ee3\u8868\u6a39\u7684\u9ad8\u5ea6\uff0c\u4ea6\u662f\u5143\u7d20\u6700\u5927\u905e\u8ff4\u6b21\u6578\uff0c h[i] \u4e00\u958b\u59cb\u70ba 1 \u3002\u518d\u4f86\uff0c\u6211\u5011\u6bcf\u6b21\u90fd\u8b93\u9ad8\u5ea6\u5c0f\u7684\u9ad8\u5ea6\u5927\u7684\u5408\u4f75\uff0c\u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e00\u6a23\u7684\uff0c\u5c31\u8b93\u5408\u4f75\u5225\u4eba\u7684\u6a39\u9ad8\u5ea6\u52a0 1 \u3002\u5982\u679c\u8981\u628a\u9ad8\u5ea6\u8b8a\u70ba x \uff0c\u5247\u81f3\u5c11\u9700\u8981 2^x \u500b\u9ede\uff0c\u7531\u6b64\u63a8\u51fa N \u500b\u9ede\u6240\u5f62\u6210\u6700\u9ad8\u4e4b\u9ad8\u5ea6\u70ba \\log(N) \u3002 void Union(int a, int b) { a = Find(a); b = Find(b); if (a == b) return; if (rank[a] < rank[b]) p[a] = b; else if (rank[a] > rank[b]) p[b] = a; else { p[a] = b; rank[a]++; } }","title":"\u67e5\u8a62"},{"location":"graph/disjointSet/#_4","text":"int p[N], rank[N]; void init() { for (int i = 0; i < N; i++) { p[i] = i; rnak[i] = 1; } } int Find(int x) { if (x == p[x]) return x; return p[x] = find(p[x]); } void Union(int a, int b) { a = Find(a); b = Find(b); if (a == b) return; if (rank[a] < rank[b]) p[a] = b; else if (rank[a] > rank[b]) p[b] = a; else { p[a] = b; rank[a]++; } }","title":"\u5b8c\u6574\u7a0b\u5f0f\u78bc"},{"location":"graph/euler/","text":"\u6b50\u62c9\u8ff4\u8def \u547d\u984c \u67ef\u5c3c\u65af\u5821\u4e03\u6a4b\u554f\u984c\u53ef\u8aaa\u662f\u5716\u8ad6\u6700\u65e9\u7684\u8d77\u6e90\uff0c\u554f\u984c\u5982\u4e0b\uff08from \u7dad\u57fa\u767e\u79d1\uff09\uff1a\"\u7576\u6642\u6771\u666e\u9b6f\u58eb\u67ef\u5c3c\u65af\u5821\uff08\u4eca\u65e5\u4fc4\u7f85\u65af\u52a0\u91cc\u5be7\u683c\u52d2\uff09\u5e02\u5340\u8de8\u666e\u5217\u6208\u5229\u4e9e\u6cb3\u5169\u5cb8\uff0c\u6cb3\u4e2d\u5fc3\u6709\u5169\u500b\u5c0f\u5cf6\u3002\u5c0f\u5cf6\u8207\u6cb3\u7684\u5169\u5cb8\u6709\u4e03\u689d\u6a4b\u9023\u63a5\u3002\u5728\u6240\u6709\u6a4b\u90fd\u53ea\u80fd\u8d70\u4e00\u904d\u7684\u524d\u63d0\u4e0b\uff0c\u5982\u4f55\u624d\u80fd\u628a\u9019\u500b\u5730\u65b9\u6240\u6709\u7684\u6a4b\u90fd\u8d70\u904d\uff1f\" \u6b50\u62c9\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u5716\u8ad6\u4e5f\u56e0\u6b64\u8a95\u751f\u3002 \u4e03\u6a4b\u554f\u984c\u6839\u64da\u8d77\u9ede\u8207\u7d42\u9ede\u662f\u5426\u76f8\u540c\uff0c\u5206\u6210 Euler path \u53ca Euler circuit\u3002 \u7121\u5411\u5716 \u7121\u5411\u5716\u90e8\u5206\uff0c\u5c07\u9ede\u5206\u6210\u5947\u9ede\uff08\u5ea6\u6578\u70ba\u5947\u6578\uff09\u548c\u5076\u9ede\uff08\u5ea6\u6578\u70ba\u5076\u6578\uff09\u3002 Euler path\uff1a\u5947\u9ede\u6578\u70ba 0 \u6216 2 Euler circuit\uff1a\u6c92\u6709\u5947\u9ede \u8b49\u660e from wiki\uff1a \u5fc5\u8981\u6027\uff1a\u5982\u679c\u4e00\u500b\u5716\u80fd\u4e00\u7b46\u756b\u6210\uff0c\u90a3\u9ebc\u5c0d\u6bcf\u4e00\u500b\u9802\u9ede\uff0c\u8981\u9ebc\u8def\u5f91\u4e2d\u300c\u9032\u5165\u300d\u9019\u500b\u9ede\u7684\u908a\u6578\u7b49\u65bc\u300c\u96e2\u958b\u300d\u9019\u500b\u9ede\u7684\u908a\u6578\uff1a\u9019\u6642\u9ede\u7684\u5ea6\u70ba\u5076\u6578\u3002\u8981\u9ebc\u5169\u8005\u76f8\u5dee\u4e00\uff1a\u9019\u6642\u9019\u500b\u9ede\u5fc5\u7136\u662f\u8d77\u9ede\u6216\u7d42\u9ede\u4e4b\u4e00\u3002\u6ce8\u610f\u5230\u6709\u8d77\u9ede\u5c31\u5fc5\u7136\u6709\u7d42\u9ede\uff0c\u56e0\u6b64\u5947\u9802\u9ede\u7684\u6578\u76ee\u8981\u9ebc\u662f 0\uff0c\u8981\u9ebc\u662f 2\u3002 \u5145\u5206\u6027\uff1a\u5982\u679c\u5716\u4e2d\u6c92\u6709\u5947\u9802\u9ede\uff0c\u90a3\u9ebc\u96a8\u4fbf\u9078\u4e00\u500b\u9ede\u51fa\u767c\uff0c\u9023\u4e00\u500b\u74b0 C_{1} \u3002\u5982\u679c\u9019\u500b\u74b0\u5c31\u662f\u539f\u5716\uff0c\u90a3\u9ebc\u7d50\u675f\u3002\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u9ebc\u7531\u65bc\u539f\u5716\u662f\u9023\u901a\u7684\uff0c C\\_{1} \u548c\u539f\u5716\u7684\u5176\u5b83\u90e8\u5206\u5fc5\u7136\u6709\u516c\u5171\u9802\u9ede s\\_{1} \u3002\u5f9e\u9019\u4e00\u9ede\u51fa\u767c\uff0c\u5728\u539f\u5716\u7684\u5269\u9918\u90e8\u5206\u4e2d\u91cd\u8907\u4e0a\u8ff0\u6b65\u9a5f\u3002\u7531\u65bc\u539f\u5716\u662f\u9023\u901a\u5716\uff0c\u7d93\u904e\u82e5\u5e72\u6b65\u5f8c\uff0c\u5168\u5716\u88ab\u5206\u70ba\u4e00\u4e9b\u74b0\u3002\u7531\u65bc\u5169\u500b\u76f8\u9023\u7684\u74b0\u5c31\u662f\u4e00\u500b\u74b0\uff0c\u539f\u4f86\u7684\u5716\u4e5f\u5c31\u662f\u4e00\u500b\u6b50\u62c9\u74b0\u4e86\u3002\u5982\u679c\u5716\u4e2d\u6709\u5169\u500b\u5947\u9802\u9ede u \u548c v \uff0c\u90a3\u9ebc\u52a0\u591a\u4e00\u689d\u908a\u5c07\u5b83\u5011\u9023\u4e0a\u5f8c\u5f97\u5230\u4e00\u500b\u7121\u5947\u9802\u9ede\u7684\u9023\u901a\u5716\u3002\u7531\u4e0a\u77e5\u9019\u500b\u5716\u662f\u4e00\u500b\u74b0\uff0c\u56e0\u6b64\u53bb\u6389\u65b0\u52a0\u7684\u908a\u5f8c\u6210\u70ba\u4e00\u689d\u8def\u5f91\uff0c\u8d77\u9ede\u548c\u7d42\u9ede\u662f u \u548c v \u3002\u8b49\u7562\u3002 \u6709\u5411\u5716 \u6709\u5411\u5716\u90e8\u5206\uff0c\u5c07\u9ede\u5206\u6210\u51fa\u9ede\uff08\u51fa\u5ea6 - \u5165\u5ea6 = 1\uff09\u548c\u5076\u9ede\uff08\u5165\u5ea6 - \u51fa\u5ea6 = 1\uff09\u9084\u6709\u5e73\u8861\u9ede\uff08\u51fa\u5ea6 = \u5165\u5ea6\uff09\u3002 Euler path\uff1a\u51fa\u9ede\u548c\u5165\u9ede\u500b\u6578\u540c\u6642\u70ba 0 \u6216 1\u3002 Euler circuit\uff1a\u53ea\u6709\u5e73\u8861\u9ede\u3002 \u627e\u51fa\u4e00\u7d44\u89e3\u8981\u4f7f\u7528 DFS\uff0c\u4ee5\u4e0b\u70ba\u7b97\u6cd5\u6846\u67b6 \u5224\u65b7\u7121\u5411\u5716\u5224\u65b7\u5176\u9ede\u500b\u6578\uff0c\u5982\u679c = 0\uff0c\u9078\u4efb\u610f\u4e00\u9ede DFS\uff0c\u5982\u679c = 2\uff0c\u9078\u4efb\u610f\u4e00\u5947\u9ede DFS\uff0c\u5426\u5247\u7121\u89e3\u3002\u6709\u5411\u5716\u5224\u65b7\u51fa\u5165\u9ede\u500b\u6578\uff0c\u5982\u679c\u53ea\u6709\u5e73\u8861\u9ede\uff0c\u9078\u4efb\u610f\u4e00\u9ede DFS\uff0c\u5982\u679c\u51fa\u9ede = \u5165\u9ede = 1\uff0c\u7531\u51fa\u9ede DFS\uff0c\u5426\u5247\u7121\u89e3\u3002 DFS \u82e5\u7576\u524d\u7bc0\u9ede\u9084\u6709\u5c1a\u672a\u8d70\u904e\u7684\u908a\uff0c\u90a3\u9ebc\u62dc\u8a2a\u8a72\u908a\uff0c\u4e26\u5728\u62dc\u8a2a\u5b8c\u5f8c\u8f38\u51fa\u8a72\u908a\uff0c\u5426\u5247\u96e2\u958b\u7576\u524d\u7d50\u9ede\u3002\u82e5\u9084\u6709\u7bc0\u9ede\u5c1a\u672a\u62dc\u8a2a\uff0c\u5247\u7121\u89e3\uff0c\u5426\u5247\u8f38\u51fa\u9806\u5e8f\u5373\u70ba\u4e00\u7d44\u89e3\uff08\u7121\u5411\u5716\uff09/\u5c07\u8f38\u51fa\u9806\u5e8f\u53cd\u5411\uff08\u6709\u5411\u5716\uff09\u5373\u70ba\u4e00\u7d44\u89e3\u3002","title":"\u6b50\u62c9\u56de\u8def"},{"location":"graph/euler/#_1","text":"","title":"\u6b50\u62c9\u8ff4\u8def"},{"location":"graph/euler/#_2","text":"\u67ef\u5c3c\u65af\u5821\u4e03\u6a4b\u554f\u984c\u53ef\u8aaa\u662f\u5716\u8ad6\u6700\u65e9\u7684\u8d77\u6e90\uff0c\u554f\u984c\u5982\u4e0b\uff08from \u7dad\u57fa\u767e\u79d1\uff09\uff1a\"\u7576\u6642\u6771\u666e\u9b6f\u58eb\u67ef\u5c3c\u65af\u5821\uff08\u4eca\u65e5\u4fc4\u7f85\u65af\u52a0\u91cc\u5be7\u683c\u52d2\uff09\u5e02\u5340\u8de8\u666e\u5217\u6208\u5229\u4e9e\u6cb3\u5169\u5cb8\uff0c\u6cb3\u4e2d\u5fc3\u6709\u5169\u500b\u5c0f\u5cf6\u3002\u5c0f\u5cf6\u8207\u6cb3\u7684\u5169\u5cb8\u6709\u4e03\u689d\u6a4b\u9023\u63a5\u3002\u5728\u6240\u6709\u6a4b\u90fd\u53ea\u80fd\u8d70\u4e00\u904d\u7684\u524d\u63d0\u4e0b\uff0c\u5982\u4f55\u624d\u80fd\u628a\u9019\u500b\u5730\u65b9\u6240\u6709\u7684\u6a4b\u90fd\u8d70\u904d\uff1f\" \u6b50\u62c9\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u5716\u8ad6\u4e5f\u56e0\u6b64\u8a95\u751f\u3002 \u4e03\u6a4b\u554f\u984c\u6839\u64da\u8d77\u9ede\u8207\u7d42\u9ede\u662f\u5426\u76f8\u540c\uff0c\u5206\u6210 Euler path \u53ca Euler circuit\u3002","title":"\u547d\u984c"},{"location":"graph/euler/#_3","text":"\u7121\u5411\u5716\u90e8\u5206\uff0c\u5c07\u9ede\u5206\u6210\u5947\u9ede\uff08\u5ea6\u6578\u70ba\u5947\u6578\uff09\u548c\u5076\u9ede\uff08\u5ea6\u6578\u70ba\u5076\u6578\uff09\u3002 Euler path\uff1a\u5947\u9ede\u6578\u70ba 0 \u6216 2 Euler circuit\uff1a\u6c92\u6709\u5947\u9ede","title":"\u7121\u5411\u5716"},{"location":"graph/euler/#from-wiki","text":"\u5fc5\u8981\u6027\uff1a\u5982\u679c\u4e00\u500b\u5716\u80fd\u4e00\u7b46\u756b\u6210\uff0c\u90a3\u9ebc\u5c0d\u6bcf\u4e00\u500b\u9802\u9ede\uff0c\u8981\u9ebc\u8def\u5f91\u4e2d\u300c\u9032\u5165\u300d\u9019\u500b\u9ede\u7684\u908a\u6578\u7b49\u65bc\u300c\u96e2\u958b\u300d\u9019\u500b\u9ede\u7684\u908a\u6578\uff1a\u9019\u6642\u9ede\u7684\u5ea6\u70ba\u5076\u6578\u3002\u8981\u9ebc\u5169\u8005\u76f8\u5dee\u4e00\uff1a\u9019\u6642\u9019\u500b\u9ede\u5fc5\u7136\u662f\u8d77\u9ede\u6216\u7d42\u9ede\u4e4b\u4e00\u3002\u6ce8\u610f\u5230\u6709\u8d77\u9ede\u5c31\u5fc5\u7136\u6709\u7d42\u9ede\uff0c\u56e0\u6b64\u5947\u9802\u9ede\u7684\u6578\u76ee\u8981\u9ebc\u662f 0\uff0c\u8981\u9ebc\u662f 2\u3002 \u5145\u5206\u6027\uff1a\u5982\u679c\u5716\u4e2d\u6c92\u6709\u5947\u9802\u9ede\uff0c\u90a3\u9ebc\u96a8\u4fbf\u9078\u4e00\u500b\u9ede\u51fa\u767c\uff0c\u9023\u4e00\u500b\u74b0 C_{1} \u3002\u5982\u679c\u9019\u500b\u74b0\u5c31\u662f\u539f\u5716\uff0c\u90a3\u9ebc\u7d50\u675f\u3002\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u9ebc\u7531\u65bc\u539f\u5716\u662f\u9023\u901a\u7684\uff0c C\\_{1} \u548c\u539f\u5716\u7684\u5176\u5b83\u90e8\u5206\u5fc5\u7136\u6709\u516c\u5171\u9802\u9ede s\\_{1} \u3002\u5f9e\u9019\u4e00\u9ede\u51fa\u767c\uff0c\u5728\u539f\u5716\u7684\u5269\u9918\u90e8\u5206\u4e2d\u91cd\u8907\u4e0a\u8ff0\u6b65\u9a5f\u3002\u7531\u65bc\u539f\u5716\u662f\u9023\u901a\u5716\uff0c\u7d93\u904e\u82e5\u5e72\u6b65\u5f8c\uff0c\u5168\u5716\u88ab\u5206\u70ba\u4e00\u4e9b\u74b0\u3002\u7531\u65bc\u5169\u500b\u76f8\u9023\u7684\u74b0\u5c31\u662f\u4e00\u500b\u74b0\uff0c\u539f\u4f86\u7684\u5716\u4e5f\u5c31\u662f\u4e00\u500b\u6b50\u62c9\u74b0\u4e86\u3002\u5982\u679c\u5716\u4e2d\u6709\u5169\u500b\u5947\u9802\u9ede u \u548c v \uff0c\u90a3\u9ebc\u52a0\u591a\u4e00\u689d\u908a\u5c07\u5b83\u5011\u9023\u4e0a\u5f8c\u5f97\u5230\u4e00\u500b\u7121\u5947\u9802\u9ede\u7684\u9023\u901a\u5716\u3002\u7531\u4e0a\u77e5\u9019\u500b\u5716\u662f\u4e00\u500b\u74b0\uff0c\u56e0\u6b64\u53bb\u6389\u65b0\u52a0\u7684\u908a\u5f8c\u6210\u70ba\u4e00\u689d\u8def\u5f91\uff0c\u8d77\u9ede\u548c\u7d42\u9ede\u662f u \u548c v \u3002\u8b49\u7562\u3002","title":"\u8b49\u660e from wiki\uff1a"},{"location":"graph/euler/#_4","text":"\u6709\u5411\u5716\u90e8\u5206\uff0c\u5c07\u9ede\u5206\u6210\u51fa\u9ede\uff08\u51fa\u5ea6 - \u5165\u5ea6 = 1\uff09\u548c\u5076\u9ede\uff08\u5165\u5ea6 - \u51fa\u5ea6 = 1\uff09\u9084\u6709\u5e73\u8861\u9ede\uff08\u51fa\u5ea6 = \u5165\u5ea6\uff09\u3002 Euler path\uff1a\u51fa\u9ede\u548c\u5165\u9ede\u500b\u6578\u540c\u6642\u70ba 0 \u6216 1\u3002 Euler circuit\uff1a\u53ea\u6709\u5e73\u8861\u9ede\u3002 \u627e\u51fa\u4e00\u7d44\u89e3\u8981\u4f7f\u7528 DFS\uff0c\u4ee5\u4e0b\u70ba\u7b97\u6cd5\u6846\u67b6 \u5224\u65b7\u7121\u5411\u5716\u5224\u65b7\u5176\u9ede\u500b\u6578\uff0c\u5982\u679c = 0\uff0c\u9078\u4efb\u610f\u4e00\u9ede DFS\uff0c\u5982\u679c = 2\uff0c\u9078\u4efb\u610f\u4e00\u5947\u9ede DFS\uff0c\u5426\u5247\u7121\u89e3\u3002\u6709\u5411\u5716\u5224\u65b7\u51fa\u5165\u9ede\u500b\u6578\uff0c\u5982\u679c\u53ea\u6709\u5e73\u8861\u9ede\uff0c\u9078\u4efb\u610f\u4e00\u9ede DFS\uff0c\u5982\u679c\u51fa\u9ede = \u5165\u9ede = 1\uff0c\u7531\u51fa\u9ede DFS\uff0c\u5426\u5247\u7121\u89e3\u3002 DFS \u82e5\u7576\u524d\u7bc0\u9ede\u9084\u6709\u5c1a\u672a\u8d70\u904e\u7684\u908a\uff0c\u90a3\u9ebc\u62dc\u8a2a\u8a72\u908a\uff0c\u4e26\u5728\u62dc\u8a2a\u5b8c\u5f8c\u8f38\u51fa\u8a72\u908a\uff0c\u5426\u5247\u96e2\u958b\u7576\u524d\u7d50\u9ede\u3002\u82e5\u9084\u6709\u7bc0\u9ede\u5c1a\u672a\u62dc\u8a2a\uff0c\u5247\u7121\u89e3\uff0c\u5426\u5247\u8f38\u51fa\u9806\u5e8f\u5373\u70ba\u4e00\u7d44\u89e3\uff08\u7121\u5411\u5716\uff09/\u5c07\u8f38\u51fa\u9806\u5e8f\u53cd\u5411\uff08\u6709\u5411\u5716\uff09\u5373\u70ba\u4e00\u7d44\u89e3\u3002","title":"\u6709\u5411\u5716"},{"location":"graph/hamilton/","text":"\u54c8\u5bc6\u9813\u554f\u984c \u8ddf\u6b50\u62c9\u8ff4\u8def\u5f88\u50cf\uff0c\u4e0d\u904e\u9019\u6b21\u4e0d\u80fd\u91cd\u8907\u7684\u662f\u9ede\u3002\u81f3\u65bc\u5224\u65b7\u662f\u5426\u5b58\u5728 Hamilton Circuit\u3001\u627e\u5230\u4e00\u500b Hamilton Circuit \u662f NP-complete \u554f\u984c\uff0c\u627e\u5230\u4e00\u500b\u6b0a\u91cd\u6700\u5c0f\u7684 Hamilton Circuit \u662f NP-hard \u554f\u984c\uff0c\u76ee\u524d\u5c1a\u672a\u51fa\u73fe\u6709\u6548\u7387\u7684\u6f14\u7b97\u6cd5\u3002 \u7528 DP \u53ef\u4ee5\u505a\u5230 O(2^n\\times n^2) \u7684\u8907\u96dc\u5ea6\u3002","title":"\u54c8\u5bc6\u9813"},{"location":"graph/hamilton/#_1","text":"\u8ddf\u6b50\u62c9\u8ff4\u8def\u5f88\u50cf\uff0c\u4e0d\u904e\u9019\u6b21\u4e0d\u80fd\u91cd\u8907\u7684\u662f\u9ede\u3002\u81f3\u65bc\u5224\u65b7\u662f\u5426\u5b58\u5728 Hamilton Circuit\u3001\u627e\u5230\u4e00\u500b Hamilton Circuit \u662f NP-complete \u554f\u984c\uff0c\u627e\u5230\u4e00\u500b\u6b0a\u91cd\u6700\u5c0f\u7684 Hamilton Circuit \u662f NP-hard \u554f\u984c\uff0c\u76ee\u524d\u5c1a\u672a\u51fa\u73fe\u6709\u6548\u7387\u7684\u6f14\u7b97\u6cd5\u3002 \u7528 DP \u53ef\u4ee5\u505a\u5230 O(2^n\\times n^2) \u7684\u8907\u96dc\u5ea6\u3002","title":"\u54c8\u5bc6\u9813\u554f\u984c"},{"location":"graph/lca/","text":"","title":"\u6700\u4f4e\u5171\u540c\u7956\u5148"},{"location":"graph/mst/","text":"\u6700\u5c0f\u751f\u6210\u6a39\uff08Minimun Spanning Tree, MST) \u5728\u4e00\u5f35\u5716\u4e2d\uff0c\u5982\u679c\u6709\u5b50\u5716\u525b\u597d\u70ba\u4e5f\u70ba\u4e00\u9846\u6a39\uff0c\u6211\u5011\u5c31\u7a31\u8a72\u5b50\u5716\u70ba\u751f\u6210\u6a39\u3002\u73fe\u5728\u6211\u5011\u5728\u5716\u4e0a\u52a0\u4e0a\u6b0a\u91cd\uff0c\u800c\u5728\u6240\u6709\u7684\u751f\u6210\u6a39\u4e2d\uff0c\u6b0a\u91cd\u7e3d\u548c\u6700\u5c0f\u7684\uff0c\u6211\u5011\u7a31\u70ba \"\u6700\u5c0f\u751f\u6210\u6a39\"\uff0c\u6700\u5c0f\u751f\u6210\u6a39\u4e26\u4e0d\u552f\u4e00\uff0c\u4ee5\u4e0b\u4ecb\u7d39\u5e7e\u7a2e\u6700\u5c0f\u751f\u6210\u6a39\u7684\u6f14\u7b97\u6cd5\u3002 Kruskal\u2019s algorithm Kruskal\u2019s algorithm \u7684\u6982\u5ff5\u662f\uff0c\u5408\u4f75\u5169\u9846 MST \u7684\u6642\u5019\uff0c\u52a0\u5165\u9023\u63a5\u5169\u9846\u6a39\u4e2d\uff0c\u6700\u5c0f\u6b0a\u91cd\u7684\u908a\u3002\u6240\u4ee5\u6211\u5011\u5c31\u5229\u7528 greedy\uff0c\u5c07\u908a\u4f9d\u6b0a\u91cd\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u908a\u7684\u5169\u908a\u662f\u5728\u4e0d\u540c\u7684 MST\uff0c\u6211\u5011\u5c31\u628a\u5408\u4f75\uff08\u4e26\u67e5\u96c6\u61c9\u7528\u65bc\u6b64\uff09\uff0c\u53cd\u4e4b\u5c31\u8df3\u904e\u3002\u6392\u5e8f\u9700\u82b1 O(E\\log E) \u7684\u6642\u9593\uff0c\u9078\u908a\u9700\u8981\u82b1 O(E\\alpha(V)) \u7684\u6642\u9593\uff0c\u7e3d\u5171\u6642\u9593\u8907\u96dc\u5ea6 O(E(\\log E+\\alpha(V))) struct Edge { int s, t, w; bool operaotr < (const Edge &rhs) const { return w < rhs.w; } }; void Kruskal() { int cost = 0; vector<Edge> E; init(); for (auto it : E) { it.s = Find(it.s); it.t = Find(it.t); if (it.s == it.t) continue; cost += it.w; Union(it.s, it.t); } } Prim\u2019s algorithm Prim\u2019s algorithm \u7684\u601d\u7dad\u5247\u662f\uff0c\u5c07\u4e00\u68f5 MST \u9023\u51fa\u7684\u908a\u4e2d\uff0c\u52a0\u5165\u6b0a\u91cd\u6700\u5c0f\u7684\u908a\uff08\u8ddd\u96e2\u6700\u8fd1\u7684\u9ede\uff09\uff0c\u91cd\u8907\u57f7\u884c\u5f8c\u5f97\u51fa\u6700\u5c0f\u7684\u751f\u6210\u6a39\u3002\u5728\u5be6\u4f5c\u4e0a\uff0c\u9996\u5148\u53d6\u4e00\u500b\u9ede\u7576 MST\uff0c\u66f4\u65b0\u6240\u6709\u8207\u5b83\u76f8\u9130\u7684\u9ede\uff0c\u66f4\u65b0\u5f8c\u628a\u8ddd\u96e2\u6700\u5c0f\u7684\u9ede\u52a0\u5165 MST\uff08\u4e0d\u7528\u4e26\u67e5\u96c6\uff09\uff0c\u6301\u7e8c\u57f7\u884c\u66f4\u65b0\u53ca\u52a0\u5165\u9ede\u7684\u52d5\u4f5c\uff0c\u76f4\u5230\u6240\u6709\u9ede\u90fd\u5df2\u52a0\u5165 MST\u3002\u7dad\u8b77\u6700\u5c0f\u8ddd\u96e2\u7528 priority_queue \u7dad\u8b77\uff0c\u6bcf\u500b\u9ede\u53ea\u6703\u88ab\u5408\u4f75\u4e00\u6b21\uff0c\u6bcf\u689d\u908a\u90fd\u53ea\u6703\u904d\u6b77\u4e00\u6b21\uff0c\u8907\u96dc\u5ea6 O((V+E)logE) \u3002\u53e6\u5916\u6709\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u7528\u8cbb\u6ce2\u90a3\u5951\u5806\uff08fibonacci heap\uff09\u53ef\u4ee5\u9054\u5230 O(E+V\\log V) \u3002\u4f46\u662f\u56e0\u70ba\u5b83\u5e38\u6578\u6bd4\u8f03\u5927\uff0c\u5be6\u4f5c\u8907\u96dc\uff0c\u6211\u5011\u4e0d\u6703\u4f7f\u7528\u5b83\u3002\u7e3d\u9ad4\u800c\u8a00\uff0cKruskal \u6bd4 Prim \u597d\u7528\u3002 Bor\u016fvka\u2019s algorithm Bor\u016fvka\u2019s algorithm \u548c Prim \u4e00\u6a23\u90fd\u5728\u52a0\u5165 MST \u548c\u6700\u9130\u8fd1\u7684\u9ede\uff0c\u4e0d\u4e00\u6a23\u7684\u662f\uff0c\u5b83\u8b93\u6240\u6709\u7684 MST \u4e00\u8d77\u505a\u9019\u4ef6\u4e8b\u3002\u6bcf\u6b21\u627e\u51fa\u6bcf\u68f5 MST \u5916\u6b0a\u91cd\u6700\u5c0f\u7684\u908a\uff0c\u4e26\u52a0\u5165 MST\uff08\u5982\u679c\u6b0a\u91cd\u4e00\u6a23\uff0c\u5c31\u627e\u7d22\u5f15\u503c\u6700\u5c0f\u7684\uff09\uff0c\u6aa2\u67e5\u662f\u5426\u53ea\u5269\u4e00\u68f5 MST\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u91cd\u8907\u6383\u63cf\u7684\u52d5\u4f5c\uff0c\u9019\u88e1\u4e00\u6a23\u7528\u4e26\u67e5\u96c6\u7dad\u8b77\u806f\u901a\u6027\u3002\\\u6700\u5dee\u7684\u60c5\u6cc1\u70ba\u6bcf\u6b21\u90fd\u525b\u597d\u5169\u5169\u6210\u5c0d\u5408\u4f75\uff0c\u9019\u6a23\u6700\u591a\u53ea\u6703\u57f7\u884c \\log V \u6b21\uff0c\u6574\u984c\u8907\u96dc\u5ea6\u70ba O((V+E)\\log V) )\u3002\u671f\u671b\u8907\u96dc\u5ea6\u53ef\u4ee5\u9054\u5230 O((V+E)) \uff08\u56e0\u70ba\u6bcf\u6b21\u4e26\u67e5\u96c6\u90fd\u6703\u88ab\u5408\u4f75 + \u67e5\u8a62\uff0c\u6240\u4ee5 \\alpha \u53ef\u4ee5\u5b8c\u5168\u7701\u7565\uff09\u3002","title":"\u6700\u5c0f\u751f\u6210\u6a39"},{"location":"graph/mst/#minimun-spanning-tree-mst","text":"\u5728\u4e00\u5f35\u5716\u4e2d\uff0c\u5982\u679c\u6709\u5b50\u5716\u525b\u597d\u70ba\u4e5f\u70ba\u4e00\u9846\u6a39\uff0c\u6211\u5011\u5c31\u7a31\u8a72\u5b50\u5716\u70ba\u751f\u6210\u6a39\u3002\u73fe\u5728\u6211\u5011\u5728\u5716\u4e0a\u52a0\u4e0a\u6b0a\u91cd\uff0c\u800c\u5728\u6240\u6709\u7684\u751f\u6210\u6a39\u4e2d\uff0c\u6b0a\u91cd\u7e3d\u548c\u6700\u5c0f\u7684\uff0c\u6211\u5011\u7a31\u70ba \"\u6700\u5c0f\u751f\u6210\u6a39\"\uff0c\u6700\u5c0f\u751f\u6210\u6a39\u4e26\u4e0d\u552f\u4e00\uff0c\u4ee5\u4e0b\u4ecb\u7d39\u5e7e\u7a2e\u6700\u5c0f\u751f\u6210\u6a39\u7684\u6f14\u7b97\u6cd5\u3002","title":"\u6700\u5c0f\u751f\u6210\u6a39\uff08Minimun Spanning Tree, MST)"},{"location":"graph/mst/#kruskals-algorithm","text":"Kruskal\u2019s algorithm \u7684\u6982\u5ff5\u662f\uff0c\u5408\u4f75\u5169\u9846 MST \u7684\u6642\u5019\uff0c\u52a0\u5165\u9023\u63a5\u5169\u9846\u6a39\u4e2d\uff0c\u6700\u5c0f\u6b0a\u91cd\u7684\u908a\u3002\u6240\u4ee5\u6211\u5011\u5c31\u5229\u7528 greedy\uff0c\u5c07\u908a\u4f9d\u6b0a\u91cd\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u908a\u7684\u5169\u908a\u662f\u5728\u4e0d\u540c\u7684 MST\uff0c\u6211\u5011\u5c31\u628a\u5408\u4f75\uff08\u4e26\u67e5\u96c6\u61c9\u7528\u65bc\u6b64\uff09\uff0c\u53cd\u4e4b\u5c31\u8df3\u904e\u3002\u6392\u5e8f\u9700\u82b1 O(E\\log E) \u7684\u6642\u9593\uff0c\u9078\u908a\u9700\u8981\u82b1 O(E\\alpha(V)) \u7684\u6642\u9593\uff0c\u7e3d\u5171\u6642\u9593\u8907\u96dc\u5ea6 O(E(\\log E+\\alpha(V))) struct Edge { int s, t, w; bool operaotr < (const Edge &rhs) const { return w < rhs.w; } }; void Kruskal() { int cost = 0; vector<Edge> E; init(); for (auto it : E) { it.s = Find(it.s); it.t = Find(it.t); if (it.s == it.t) continue; cost += it.w; Union(it.s, it.t); } }","title":"Kruskal\u2019s algorithm"},{"location":"graph/mst/#prims-algorithm","text":"Prim\u2019s algorithm \u7684\u601d\u7dad\u5247\u662f\uff0c\u5c07\u4e00\u68f5 MST \u9023\u51fa\u7684\u908a\u4e2d\uff0c\u52a0\u5165\u6b0a\u91cd\u6700\u5c0f\u7684\u908a\uff08\u8ddd\u96e2\u6700\u8fd1\u7684\u9ede\uff09\uff0c\u91cd\u8907\u57f7\u884c\u5f8c\u5f97\u51fa\u6700\u5c0f\u7684\u751f\u6210\u6a39\u3002\u5728\u5be6\u4f5c\u4e0a\uff0c\u9996\u5148\u53d6\u4e00\u500b\u9ede\u7576 MST\uff0c\u66f4\u65b0\u6240\u6709\u8207\u5b83\u76f8\u9130\u7684\u9ede\uff0c\u66f4\u65b0\u5f8c\u628a\u8ddd\u96e2\u6700\u5c0f\u7684\u9ede\u52a0\u5165 MST\uff08\u4e0d\u7528\u4e26\u67e5\u96c6\uff09\uff0c\u6301\u7e8c\u57f7\u884c\u66f4\u65b0\u53ca\u52a0\u5165\u9ede\u7684\u52d5\u4f5c\uff0c\u76f4\u5230\u6240\u6709\u9ede\u90fd\u5df2\u52a0\u5165 MST\u3002\u7dad\u8b77\u6700\u5c0f\u8ddd\u96e2\u7528 priority_queue \u7dad\u8b77\uff0c\u6bcf\u500b\u9ede\u53ea\u6703\u88ab\u5408\u4f75\u4e00\u6b21\uff0c\u6bcf\u689d\u908a\u90fd\u53ea\u6703\u904d\u6b77\u4e00\u6b21\uff0c\u8907\u96dc\u5ea6 O((V+E)logE) \u3002\u53e6\u5916\u6709\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u7528\u8cbb\u6ce2\u90a3\u5951\u5806\uff08fibonacci heap\uff09\u53ef\u4ee5\u9054\u5230 O(E+V\\log V) \u3002\u4f46\u662f\u56e0\u70ba\u5b83\u5e38\u6578\u6bd4\u8f03\u5927\uff0c\u5be6\u4f5c\u8907\u96dc\uff0c\u6211\u5011\u4e0d\u6703\u4f7f\u7528\u5b83\u3002\u7e3d\u9ad4\u800c\u8a00\uff0cKruskal \u6bd4 Prim \u597d\u7528\u3002","title":"Prim\u2019s algorithm"},{"location":"graph/mst/#boruvkas-algorithm","text":"Bor\u016fvka\u2019s algorithm \u548c Prim \u4e00\u6a23\u90fd\u5728\u52a0\u5165 MST \u548c\u6700\u9130\u8fd1\u7684\u9ede\uff0c\u4e0d\u4e00\u6a23\u7684\u662f\uff0c\u5b83\u8b93\u6240\u6709\u7684 MST \u4e00\u8d77\u505a\u9019\u4ef6\u4e8b\u3002\u6bcf\u6b21\u627e\u51fa\u6bcf\u68f5 MST \u5916\u6b0a\u91cd\u6700\u5c0f\u7684\u908a\uff0c\u4e26\u52a0\u5165 MST\uff08\u5982\u679c\u6b0a\u91cd\u4e00\u6a23\uff0c\u5c31\u627e\u7d22\u5f15\u503c\u6700\u5c0f\u7684\uff09\uff0c\u6aa2\u67e5\u662f\u5426\u53ea\u5269\u4e00\u68f5 MST\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u91cd\u8907\u6383\u63cf\u7684\u52d5\u4f5c\uff0c\u9019\u88e1\u4e00\u6a23\u7528\u4e26\u67e5\u96c6\u7dad\u8b77\u806f\u901a\u6027\u3002\\\u6700\u5dee\u7684\u60c5\u6cc1\u70ba\u6bcf\u6b21\u90fd\u525b\u597d\u5169\u5169\u6210\u5c0d\u5408\u4f75\uff0c\u9019\u6a23\u6700\u591a\u53ea\u6703\u57f7\u884c \\log V \u6b21\uff0c\u6574\u984c\u8907\u96dc\u5ea6\u70ba O((V+E)\\log V) )\u3002\u671f\u671b\u8907\u96dc\u5ea6\u53ef\u4ee5\u9054\u5230 O((V+E)) \uff08\u56e0\u70ba\u6bcf\u6b21\u4e26\u67e5\u96c6\u90fd\u6703\u88ab\u5408\u4f75 + \u67e5\u8a62\uff0c\u6240\u4ee5 \\alpha \u53ef\u4ee5\u5b8c\u5168\u7701\u7565\uff09\u3002","title":"Bor\u016fvka\u2019s algorithm"},{"location":"graph/save/","text":"\u81f3\u65bc\u5716\u8981\u600e\u9ebc\u5b58\u8d77\u4f86\u5462\uff0c\u4ee5\u4e0b\u4ecb\u7d39\u5169\u7a2e\u8fa6\u6cd5\u3002 \u76f8\u9130\u77e9\u9663\uff08adjacency matrix) \u958b\u4e00\u500b V\\times V \u7684\u8cc7\u6599\u7d50\u69cb M \uff08\u901a\u5e38\u6703\u7528\u4e8c\u7dad\u9663\u5217\uff09\uff0c M[a][b] \u4ee3\u8868\u7684\u662f\u9ede a \u81f3 b \u7684\u908a\u6578\u6216\u6b0a\u91cd\u3002\u7a7a\u9593\u8907\u96dc\u5ea6 O(V^2) \u3002\u52a0\u3001\u522a\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(1) \u3002 \u76f8\u9130\u4e32\u5217\uff08adjacency list) \u958b V \u500b\u53ef\u8b8a\u9577\u5ea6\u7684\u8cc7\u6599\u7d50\u69cb\uff08\u901a\u5e38\u5728 C++ \u7528 vector \u3001\u5728 C \u7528 linked list), \u7b2c i \u500b\u88e1\u9762\u653e\u6240\u6709\u7b2c i \u500b\u9ede\u6307\u5411\u7684\u9ede\u7684\u7de8\u865f\uff08\u548c\u908a\u6b0a\u6216\u5176\u4ed6\u908a\u7684\u8cc7\u8a0a\uff09\u3002\u7a7a\u9593\u8907\u96dc\u5ea6 O(V+E) , \u52a0\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(1) \u3001\u522a\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(V) \u3002 \u81f3\u65bc\u4f7f\u7528\u6642\u6a5f\uff0c\u5982\u679c\u908a\u6578\u8f03\u5bc6\uff0c\u4e14\u983b\u7e41\u5730\u9700\u8981\u627e\u5c0b\u5169\u9ede\u4e4b\u9593\u7684\u6b0a\u91cd\uff0c\u90a3\u9ebc\u76f8\u9130\u77e9\u9663\u6bd4\u8f03\u9069\u5408\uff0c\u5176\u9918\u60c5\u6cc1\u5247\u662f\u7528\u76f8\u9130\u4e32\u5217\u3002","title":"\u5716\u7684\u5132\u5b58"},{"location":"graph/save/#adjacency-matrix","text":"\u958b\u4e00\u500b V\\times V \u7684\u8cc7\u6599\u7d50\u69cb M \uff08\u901a\u5e38\u6703\u7528\u4e8c\u7dad\u9663\u5217\uff09\uff0c M[a][b] \u4ee3\u8868\u7684\u662f\u9ede a \u81f3 b \u7684\u908a\u6578\u6216\u6b0a\u91cd\u3002\u7a7a\u9593\u8907\u96dc\u5ea6 O(V^2) \u3002\u52a0\u3001\u522a\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(1) \u3002","title":"\u76f8\u9130\u77e9\u9663\uff08adjacency matrix)"},{"location":"graph/save/#adjacency-list","text":"\u958b V \u500b\u53ef\u8b8a\u9577\u5ea6\u7684\u8cc7\u6599\u7d50\u69cb\uff08\u901a\u5e38\u5728 C++ \u7528 vector \u3001\u5728 C \u7528 linked list), \u7b2c i \u500b\u88e1\u9762\u653e\u6240\u6709\u7b2c i \u500b\u9ede\u6307\u5411\u7684\u9ede\u7684\u7de8\u865f\uff08\u548c\u908a\u6b0a\u6216\u5176\u4ed6\u908a\u7684\u8cc7\u8a0a\uff09\u3002\u7a7a\u9593\u8907\u96dc\u5ea6 O(V+E) , \u52a0\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(1) \u3001\u522a\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(V) \u3002 \u81f3\u65bc\u4f7f\u7528\u6642\u6a5f\uff0c\u5982\u679c\u908a\u6578\u8f03\u5bc6\uff0c\u4e14\u983b\u7e41\u5730\u9700\u8981\u627e\u5c0b\u5169\u9ede\u4e4b\u9593\u7684\u6b0a\u91cd\uff0c\u90a3\u9ebc\u76f8\u9130\u77e9\u9663\u6bd4\u8f03\u9069\u5408\uff0c\u5176\u9918\u60c5\u6cc1\u5247\u662f\u7528\u76f8\u9130\u4e32\u5217\u3002","title":"\u76f8\u9130\u4e32\u5217\uff08adjacency list)"},{"location":"graph/shortestPath/","text":"\u6700\u77ed\u8def\u5f91 \u8853\u8a9e \u8ca0\u908a\uff1a\u6b0a\u91cd\u70ba\u8ca0\u7684\u908a \u8ca0\u74b0\uff1a\u6b0a\u91cd\u548c\u70ba\u8ca0\u7684\u74b0 \u9ede\u6e90\uff1a\u6210\u70ba\u8d77\u9ede\u7684\u9ede\uff0c\u5206\u6210\u55ae\u6e90\u982d\u53ca\u591a\u6e90\u982d\u3002 \u9b06\u5f1b\uff1a\u55ae\u6e90\u982d\u6700\u77ed\u8def\u5f91\u4e2d\uff0c\u5c0d\u65bc\u4efb\u610f\u5169\u500b\u9ede u,v \uff0c\u8d77\u9ede s \u5230\u5b83\u5011\u7684\u8ddd\u96e2 d_u,d_v \uff0c\u5982\u679c d_u>d_v+w_{u,v} \uff0c w_{u,v} \u70ba\u908a (u,v) \u7684\u6b0a\u91cd\uff0c\u6211\u5011\u53ef\u4ee5\u8b93 d_u \u66f4\u65b0\u70ba d_v+w_{u,v} \uff0c\u8b93 s \u5230 u \u7684\u8ddd\u96e2\u7e2e\u77ed\uff0c\u9019\u500b\u52d5\u4f5c\u7a31\u70ba \"\u9b06\u5f1b\"\u3002 Floyd-Warshall Algorithm \u70ba\u591a\u6e90\u982d\u6700\u77ed\u8def\u5f91\uff0c\u6c42\u51fa\u6240\u6709\u9ede\u5c0d\u7684\u6700\u77ed\u8def\u5f91\u3002 Floyd-Warshall \u662f\u4e00\u7a2e\u52d5\u614b\u898f\u5283\u554f\u984c\uff0c\u4ee5\u4e0b\u662f\u4ed6\u7684 dp \u5f0f\u3002 \u72c0\u614b\uff1a dp[k][i][j] \u4ee3\u8868\uff0c\u82e5\u53ea\u4ee5\u9ede 1 \u223c k \u7576\u4e2d\u7e7c\u9ede\u7684\u8a71\uff0c\u5247 dp[k][i][j] \u70ba i \u5230 j \u7684\u6700\u77ed\u8def\u5f91\u9577\u3002 \u8f49\u79fb\uff1a dp[k][i][j] = min(dp[k \u2212 1][i][k] + dp[k \u2212 1][k][j], dp[k \u2212 1][i][j]) \u57fa\u5e95\uff1a dp[0][i][j] = \\left\\{ \\begin{array}{cc}w[i][j] & if\\ w[i][j]\\ exists\\\\INF & else\\end{array} \\right\\} \u6642/\u7a7a\u9593\u8907\u96dc\u5ea6\u7686\u70ba O(V^3) \uff0c\u7136\u800c\u6b64 DP \u662f\u53ef\u4ee5\u6efe\u52d5\uff0c\u6240\u4ee5\u7a7a\u9593\u8907\u96dc\u5ea6\u53ef\u964d\u70ba O(V^2) for (k = 0; k < n; k++) for (i = 0; i < n; i++) for (j = 0; j < n; j++) w[i][j] = w[j][i] = min(w[i][j], max(w[i][k], w[k][j])); \u57f7\u884c\u7684\u6642\u5019\u5982\u679c dp[i][j]\\leq 0 \uff0c\u4ee3\u8868\u5b58\u5728\u8ca0\u74b0\uff0cFloyd-Warshall \u662f\u53ef\u4ee5\u5224\u65b7\u8ca0\u74b0\u3002 \u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91 \u6c42\u51fa\u4e00\u500b\u9ede\u5230\u6240\u6709\u9ede\u7684\u6700\u77ed\u8def\u5f91\uff0c\u5176\u5be6\u5c31\u662f\u4ee5\u8d77\u9ede\u70ba\u6839\uff0c\u6700\u77ed\u8def\u5f91\u662f\u7531\u7236\u7bc0\u9ede\u9b06\u5f1b\u800c\u4f86\u7684\u6700\u77ed\u8def\u5f91\u6a39\u3002\u6211\u5011\u627e\u6700\u77ed\u8def\u5f91\uff0c\u5c31\u662f\u4e00\u76f4\u628a\u9b06\u5f1b\uff0c\u76f4\u5230\u6240\u6709\u9ede\u90fd\u4e0d\u80fd\u9b06\u5f1b\uff0c\u6240\u6709\u9ede\u90fd\u7372\u5f97\u6700\u77ed\u8def\u5f91\u4e86\u3002\u8981\u84cb\u51fa\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u5c31\u53ea\u8981\u628a\u9ede\u6307\u5411\u6700\u5f8c\u4e00\u6b21\u88ab\u8ab0\u9b06\u5f1b\u5c31\u597d\u4e86\u3002 Bellman-Ford Algorithm \u70ba\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91\uff0c\u8a2d\u8d77\u9ede\u7684\u6700\u77ed\u8def\u5f91\u70ba 0\uff0c\u5176\u4ed6\u9ede\u70ba\u7121\u9650\u5927\uff0c\u6bcf\u6b21\u5c0d\u6240\u6709\u908a\u679a\u8209\uff0c\u56e0\u70ba\u6700\u77ed\u8def\u5f91\u4e0d\u6703\u7d93\u904e\u540c\u6a23\u7684\u908a\u7b2c\u4e8c\u6b21\uff0c\u6240\u4ee5\u53ea\u8981\u57f7\u884c V-1 \u8f2a\uff0c\u8907\u96dc\u5ea6\u70ba O(VE) \u3002\u5982\u679c\u57f7\u884c\u7b2c V \u6b21\u6642\u9084\u6709\u908a\u53ef\u4ee5\u9b06\u5f1b\uff0c\u4ee3\u8868\u6709\u8ca0\u74b0\uff0cBellman-Ford \u4e5f\u53ef\u4ee5\u7576\u6210\u8ca0\u74b0\u7684\u5224\u65b7\u65b9\u6cd5\u3002 void bellman_ford(int s) { d[s] = 0; p[s] = s; for (int i = 0; i < V - 1; i++) { for (int ss = 0; ss < V; ss++) { for (auto tt : v[ss]) { if (d[ss] + w[ss][tt] < d[tt]) { d[tt] = d[ss] + w[ss][tt]; p[tt] = ss; } } } } } bool has_negative_cycle() { for (int i = 0; i < V; i++) { for (int j = 0; j < V; j++) { if (d[i] + w[i][j] < d[j]) return true; } } return false; } \u6b64\u6f14\u7b97\u6cd5\u9084\u6709\u4e00\u500b\u512a\u5316\u7248\u672c\u53eb\u505a Shortest Path Faster Algorithm (SPFA)\uff0c\u4ed6\u7684\u505a\u6cd5\u662f\u679a\u8209\u8d77\u9ede\u662f\u9b06\u5f1b\u904e\u7684\u908a\uff0c\u4ee5\u9b06\u5f1b\u904e\u7684\u9ede\u9664\u975e\u88ab\u91cd\u65b0\u9b06\u5f1b\uff0c\u5426\u5247\u4e0d\u6703\u66f4\u52d5\u3002\u9810\u671f\u8907\u96dc\u5ea6\u70ba O(V+E) \uff0c\u4e0d\u904e\u6700\u5dee\u72c0\u6cc1\u4ecd\u70ba O(VE) \u3002 Dijkstra\u2019s Algorithm \u540c\u6a23\u70ba\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91\uff0c\u4ed6\u7684\u60f3\u6cd5\u548c Prim's Algorithm \u985e\u4f3c\uff0c\u6bcf\u6b21\u628a\u96e2\u6a39\u6839\u6700\u8fd1\u7684\u9ede\u52a0\u5165\u6700\u77ed\u8def\u5f91\u6a39\u88e1\uff0c\u4e26\u628a\u6240\u6709\u8207\u8a72\u9ede\u76f8\u9023\u7684\u908a\u9b06\u5f1b\uff0c\u5df2\u7d93\u52a0\u5165\u7684\u9ede\u4e0d\u6703\u5728\u88ab\u9b06\u5f1b\u3002\u4f7f\u7528 priority_queue \u7684\u8907\u96dc\u5ea6\u70ba O((V+E)\\log E) \uff0c\u4f7f\u7528\u8cbb\u6ce2\u90a3\u5951\u5806\uff0c\u8907\u96dc\u5ea6\u70ba O(E+V\\log V) struct edge { int s, t; LL d; edge(){}; edge(int s, int t, LL d) : s(s), t(t), d(d) {} }; struct heap { LL d; int p; // point heap(){}; heap(LL d, int p) : d(d), p(p) {} bool operator<(const heap &b) const { return d > b.d; } }; int d[N], p[N]; vector<edge> edges; vector<int> G[N]; bitset<N> vis; void dijkstra(int ss) { priority_queue<heap> Q; for (int i = 0; i < V; i++) d[i] = INF; d[ss] = 0; p[ss] = -1; vis.reset() : Q.push(heap(0, ss)); heap x; while (!Q.empty()) { x = Q.top(); Q.pop(); int p = x.p; if (vis[p]) continue; vis[p] = 1; for (int i = 0; i < G[p].size(); i++) { edge &e = edges[G[p][i]]; if (d[e.t] > d[p] + e.d) { d[e.t] = d[p] + e.d; p[e.t] = G[p][i]; Q.push(heap(d[e.t], e.t)); } } } } \u800c Dijkstra\u2019s Algorithm \u4e0d\u80fd\u8655\u7406\u8ca0\u908a\uff0c\u539f\u56e0\u662f\u4e00\u65e6\u9ede\u52a0\u5165\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u5c31\u4e0d\u6703\u518d\u88ab\u66f4\u65b0\uff0c\u4ee5\u7dad\u6301\u826f\u597d\u8907\u96dc\u5ea6\uff0c\u8ca0\u908a\u6703\u7834\u58de\u6b64\u898f\u5247\u3002","title":"\u6700\u77ed\u8def\u5f91"},{"location":"graph/shortestPath/#_1","text":"","title":"\u6700\u77ed\u8def\u5f91"},{"location":"graph/shortestPath/#_2","text":"\u8ca0\u908a\uff1a\u6b0a\u91cd\u70ba\u8ca0\u7684\u908a \u8ca0\u74b0\uff1a\u6b0a\u91cd\u548c\u70ba\u8ca0\u7684\u74b0 \u9ede\u6e90\uff1a\u6210\u70ba\u8d77\u9ede\u7684\u9ede\uff0c\u5206\u6210\u55ae\u6e90\u982d\u53ca\u591a\u6e90\u982d\u3002 \u9b06\u5f1b\uff1a\u55ae\u6e90\u982d\u6700\u77ed\u8def\u5f91\u4e2d\uff0c\u5c0d\u65bc\u4efb\u610f\u5169\u500b\u9ede u,v \uff0c\u8d77\u9ede s \u5230\u5b83\u5011\u7684\u8ddd\u96e2 d_u,d_v \uff0c\u5982\u679c d_u>d_v+w_{u,v} \uff0c w_{u,v} \u70ba\u908a (u,v) \u7684\u6b0a\u91cd\uff0c\u6211\u5011\u53ef\u4ee5\u8b93 d_u \u66f4\u65b0\u70ba d_v+w_{u,v} \uff0c\u8b93 s \u5230 u \u7684\u8ddd\u96e2\u7e2e\u77ed\uff0c\u9019\u500b\u52d5\u4f5c\u7a31\u70ba \"\u9b06\u5f1b\"\u3002","title":"\u8853\u8a9e"},{"location":"graph/shortestPath/#floyd-warshall-algorithm","text":"\u70ba\u591a\u6e90\u982d\u6700\u77ed\u8def\u5f91\uff0c\u6c42\u51fa\u6240\u6709\u9ede\u5c0d\u7684\u6700\u77ed\u8def\u5f91\u3002 Floyd-Warshall \u662f\u4e00\u7a2e\u52d5\u614b\u898f\u5283\u554f\u984c\uff0c\u4ee5\u4e0b\u662f\u4ed6\u7684 dp \u5f0f\u3002 \u72c0\u614b\uff1a dp[k][i][j] \u4ee3\u8868\uff0c\u82e5\u53ea\u4ee5\u9ede 1 \u223c k \u7576\u4e2d\u7e7c\u9ede\u7684\u8a71\uff0c\u5247 dp[k][i][j] \u70ba i \u5230 j \u7684\u6700\u77ed\u8def\u5f91\u9577\u3002 \u8f49\u79fb\uff1a dp[k][i][j] = min(dp[k \u2212 1][i][k] + dp[k \u2212 1][k][j], dp[k \u2212 1][i][j]) \u57fa\u5e95\uff1a dp[0][i][j] = \\left\\{ \\begin{array}{cc}w[i][j] & if\\ w[i][j]\\ exists\\\\INF & else\\end{array} \\right\\} \u6642/\u7a7a\u9593\u8907\u96dc\u5ea6\u7686\u70ba O(V^3) \uff0c\u7136\u800c\u6b64 DP \u662f\u53ef\u4ee5\u6efe\u52d5\uff0c\u6240\u4ee5\u7a7a\u9593\u8907\u96dc\u5ea6\u53ef\u964d\u70ba O(V^2) for (k = 0; k < n; k++) for (i = 0; i < n; i++) for (j = 0; j < n; j++) w[i][j] = w[j][i] = min(w[i][j], max(w[i][k], w[k][j])); \u57f7\u884c\u7684\u6642\u5019\u5982\u679c dp[i][j]\\leq 0 \uff0c\u4ee3\u8868\u5b58\u5728\u8ca0\u74b0\uff0cFloyd-Warshall \u662f\u53ef\u4ee5\u5224\u65b7\u8ca0\u74b0\u3002","title":"Floyd-Warshall Algorithm"},{"location":"graph/shortestPath/#_3","text":"\u6c42\u51fa\u4e00\u500b\u9ede\u5230\u6240\u6709\u9ede\u7684\u6700\u77ed\u8def\u5f91\uff0c\u5176\u5be6\u5c31\u662f\u4ee5\u8d77\u9ede\u70ba\u6839\uff0c\u6700\u77ed\u8def\u5f91\u662f\u7531\u7236\u7bc0\u9ede\u9b06\u5f1b\u800c\u4f86\u7684\u6700\u77ed\u8def\u5f91\u6a39\u3002\u6211\u5011\u627e\u6700\u77ed\u8def\u5f91\uff0c\u5c31\u662f\u4e00\u76f4\u628a\u9b06\u5f1b\uff0c\u76f4\u5230\u6240\u6709\u9ede\u90fd\u4e0d\u80fd\u9b06\u5f1b\uff0c\u6240\u6709\u9ede\u90fd\u7372\u5f97\u6700\u77ed\u8def\u5f91\u4e86\u3002\u8981\u84cb\u51fa\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u5c31\u53ea\u8981\u628a\u9ede\u6307\u5411\u6700\u5f8c\u4e00\u6b21\u88ab\u8ab0\u9b06\u5f1b\u5c31\u597d\u4e86\u3002","title":"\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91"},{"location":"graph/shortestPath/#bellman-ford-algorithm","text":"\u70ba\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91\uff0c\u8a2d\u8d77\u9ede\u7684\u6700\u77ed\u8def\u5f91\u70ba 0\uff0c\u5176\u4ed6\u9ede\u70ba\u7121\u9650\u5927\uff0c\u6bcf\u6b21\u5c0d\u6240\u6709\u908a\u679a\u8209\uff0c\u56e0\u70ba\u6700\u77ed\u8def\u5f91\u4e0d\u6703\u7d93\u904e\u540c\u6a23\u7684\u908a\u7b2c\u4e8c\u6b21\uff0c\u6240\u4ee5\u53ea\u8981\u57f7\u884c V-1 \u8f2a\uff0c\u8907\u96dc\u5ea6\u70ba O(VE) \u3002\u5982\u679c\u57f7\u884c\u7b2c V \u6b21\u6642\u9084\u6709\u908a\u53ef\u4ee5\u9b06\u5f1b\uff0c\u4ee3\u8868\u6709\u8ca0\u74b0\uff0cBellman-Ford \u4e5f\u53ef\u4ee5\u7576\u6210\u8ca0\u74b0\u7684\u5224\u65b7\u65b9\u6cd5\u3002 void bellman_ford(int s) { d[s] = 0; p[s] = s; for (int i = 0; i < V - 1; i++) { for (int ss = 0; ss < V; ss++) { for (auto tt : v[ss]) { if (d[ss] + w[ss][tt] < d[tt]) { d[tt] = d[ss] + w[ss][tt]; p[tt] = ss; } } } } } bool has_negative_cycle() { for (int i = 0; i < V; i++) { for (int j = 0; j < V; j++) { if (d[i] + w[i][j] < d[j]) return true; } } return false; } \u6b64\u6f14\u7b97\u6cd5\u9084\u6709\u4e00\u500b\u512a\u5316\u7248\u672c\u53eb\u505a Shortest Path Faster Algorithm (SPFA)\uff0c\u4ed6\u7684\u505a\u6cd5\u662f\u679a\u8209\u8d77\u9ede\u662f\u9b06\u5f1b\u904e\u7684\u908a\uff0c\u4ee5\u9b06\u5f1b\u904e\u7684\u9ede\u9664\u975e\u88ab\u91cd\u65b0\u9b06\u5f1b\uff0c\u5426\u5247\u4e0d\u6703\u66f4\u52d5\u3002\u9810\u671f\u8907\u96dc\u5ea6\u70ba O(V+E) \uff0c\u4e0d\u904e\u6700\u5dee\u72c0\u6cc1\u4ecd\u70ba O(VE) \u3002","title":"Bellman-Ford Algorithm"},{"location":"graph/shortestPath/#dijkstras-algorithm","text":"\u540c\u6a23\u70ba\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91\uff0c\u4ed6\u7684\u60f3\u6cd5\u548c Prim's Algorithm \u985e\u4f3c\uff0c\u6bcf\u6b21\u628a\u96e2\u6a39\u6839\u6700\u8fd1\u7684\u9ede\u52a0\u5165\u6700\u77ed\u8def\u5f91\u6a39\u88e1\uff0c\u4e26\u628a\u6240\u6709\u8207\u8a72\u9ede\u76f8\u9023\u7684\u908a\u9b06\u5f1b\uff0c\u5df2\u7d93\u52a0\u5165\u7684\u9ede\u4e0d\u6703\u5728\u88ab\u9b06\u5f1b\u3002\u4f7f\u7528 priority_queue \u7684\u8907\u96dc\u5ea6\u70ba O((V+E)\\log E) \uff0c\u4f7f\u7528\u8cbb\u6ce2\u90a3\u5951\u5806\uff0c\u8907\u96dc\u5ea6\u70ba O(E+V\\log V) struct edge { int s, t; LL d; edge(){}; edge(int s, int t, LL d) : s(s), t(t), d(d) {} }; struct heap { LL d; int p; // point heap(){}; heap(LL d, int p) : d(d), p(p) {} bool operator<(const heap &b) const { return d > b.d; } }; int d[N], p[N]; vector<edge> edges; vector<int> G[N]; bitset<N> vis; void dijkstra(int ss) { priority_queue<heap> Q; for (int i = 0; i < V; i++) d[i] = INF; d[ss] = 0; p[ss] = -1; vis.reset() : Q.push(heap(0, ss)); heap x; while (!Q.empty()) { x = Q.top(); Q.pop(); int p = x.p; if (vis[p]) continue; vis[p] = 1; for (int i = 0; i < G[p].size(); i++) { edge &e = edges[G[p][i]]; if (d[e.t] > d[p] + e.d) { d[e.t] = d[p] + e.d; p[e.t] = G[p][i]; Q.push(heap(d[e.t], e.t)); } } } } \u800c Dijkstra\u2019s Algorithm \u4e0d\u80fd\u8655\u7406\u8ca0\u908a\uff0c\u539f\u56e0\u662f\u4e00\u65e6\u9ede\u52a0\u5165\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u5c31\u4e0d\u6703\u518d\u88ab\u66f4\u65b0\uff0c\u4ee5\u7dad\u6301\u826f\u597d\u8907\u96dc\u5ea6\uff0c\u8ca0\u908a\u6703\u7834\u58de\u6b64\u898f\u5247\u3002","title":"Dijkstra\u2019s Algorithm"},{"location":"graph/timeStamp/","text":"","title":"\u6642\u9593\u6233\u8a18"},{"location":"graph/topology/","text":"\u62d3\u64b2\u6392\u5e8f \u62d3\u6a38\u6392\u5e8f\u662f\u5c0d\u5c07\u6709\u5411\u5716\u8f49\u63db\u6210\u4e00\u500b\u7dda\u6027\u5e8f\u5217\uff0c\u6eff\u8db3\u5716\u4e0a\u4efb\u610f\u4e00\u689d\u908a (u,v) \uff0c\u5728\u7dda\u6027\u5e8f\u5217\u4e2d\uff0c u \u5728 v \u4e4b\u524d\u3002\u4e00\u500b\u5e38\u898b\u7684\u61c9\u7528\u5b78\u6821\u7684\u64cb\u4fee\u6a5f\u5236\uff0c\u8981\u4fee\u4e00\u9580\u8ab2\u5fc5\u9808\u4fee\u5b8c\u4ed6\u7684\u5148\u4fee\u8ab2\u3002 \u6211\u5011\u85c9\u7531\u64cb\u4fee\u6a5f\u5236\u4f86\u8f49\u63db\u5716\u8ad6\uff0c\u628a\u8ab2\u7a0b\u8f49\u70ba\u9ede\uff0c\u628a\u6709\u64cb\u4fee\u95dc\u4fc2\u7684\u8ab2\u7a0b\u9023\u4e00\u689d\u908a\uff0c\u5148\u4fee\u8ab2\u6307\u5411\u5f8c\u4fee\u8ab2\u3002\u5982\u679c\u628a\u9ede\uff08\u4fee\u5b8c\u7684\u8ab2\uff09\u62d4\u6389\uff0c\u90a3\u9ebc\u7576\u4e00\u500b\u9ede\u6c92\u6709\u5165\u5ea6\u6642\uff08\u610f\u5373\u4fee\u5b8c\u8a72\u8ab2\u7a0b\u7684\u6240\u6709\u5148\u4fee\u8ab2\uff09\uff0c\u5c31\u53ef\u4ee5\u88ab\u62d4\u6389\u3002 \u6709\u5169\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u627e\u51fa\u62d3\u8b5c\u6392\u5e8f\uff0c\u4e00\u7a2e\u662f\u7528 queue\uff0c\u628a\u6240\u6709\u5165\u5ea6 =0 \u7684\u9ede\u90fd\u9032\u53bb\uff0c\u6bcf\u4e00\u6b21\u90fd\u5f9e queue \u62ff\u51fa\u4e00\u500b\u9ede\uff0c\u5c07\u4ed6\u6240\u6709\u6307\u5411\u7684\u9ede\u5165\u5ea6\u90fd - 1\uff0c\u5176\u4e2d\u5982\u679c\u6709\u9ede\u7684\u5165\u5ea6\u8b8a\u6210 0\uff0c\u4e00\u6a23\u5c07\u8a72\u9ede\u653e\u9032 queue \u88e1\u9762\uff0c\u5982\u679c queue \u88e1\u9762\u6c92\u9ede\uff0c\u4f46\u662f\u9084\u6709\u9ede\u5165\u5ea6 >0 \uff0c\u5247\u7121\u89e3\uff0c\u5426\u5247\u5f9e queue \u62ff\u51fa\u7684\u9806\u5e8f\u5c31\u662f\u62d3\u6a38\u6392\u5e8f\u3002 int q[N], din[N]; vector<int> G[N]; bool TopologicalSort(int n) { int head = -1, tail = -1; for (int i = 0; i < n; ++i) { if (din[i] == 0) { q[++head] = 1; } } while (head > tail) { int s = q[++tail]; for (int i : G[s]) { if (--din[i] == 0) q[++head] = i; } } return head == n; } \u53e6\u4e00\u7a2e\u662f\u5229\u7528 DFS + \u6642\u9593\u6233\u8a18\uff0c\u5982\u679c\u767c\u73fe\u6709\u4efb\u4e00\u689d\u908a (u,v) \uff0c tin[u]>tin[v] \uff0c\u90a3\u5c31\u7121\u89e3\uff0c\u5426\u5247\u4f9d\u7167 tout \u7531\u5927\u5230\u5c0f\u5f62\u6210\u62d3\u8b5c\u6392\u5e8f\u3002 \u9019\u5169\u7a2e\u8fa6\u6cd5\u7684\u6642\u9593\u8907\u96dc\u5ea6\u7686\u70ba O(V+E) \u3002","title":"\u62d3\u8b5c\u6392\u5e8f"},{"location":"graph/topology/#_1","text":"\u62d3\u6a38\u6392\u5e8f\u662f\u5c0d\u5c07\u6709\u5411\u5716\u8f49\u63db\u6210\u4e00\u500b\u7dda\u6027\u5e8f\u5217\uff0c\u6eff\u8db3\u5716\u4e0a\u4efb\u610f\u4e00\u689d\u908a (u,v) \uff0c\u5728\u7dda\u6027\u5e8f\u5217\u4e2d\uff0c u \u5728 v \u4e4b\u524d\u3002\u4e00\u500b\u5e38\u898b\u7684\u61c9\u7528\u5b78\u6821\u7684\u64cb\u4fee\u6a5f\u5236\uff0c\u8981\u4fee\u4e00\u9580\u8ab2\u5fc5\u9808\u4fee\u5b8c\u4ed6\u7684\u5148\u4fee\u8ab2\u3002 \u6211\u5011\u85c9\u7531\u64cb\u4fee\u6a5f\u5236\u4f86\u8f49\u63db\u5716\u8ad6\uff0c\u628a\u8ab2\u7a0b\u8f49\u70ba\u9ede\uff0c\u628a\u6709\u64cb\u4fee\u95dc\u4fc2\u7684\u8ab2\u7a0b\u9023\u4e00\u689d\u908a\uff0c\u5148\u4fee\u8ab2\u6307\u5411\u5f8c\u4fee\u8ab2\u3002\u5982\u679c\u628a\u9ede\uff08\u4fee\u5b8c\u7684\u8ab2\uff09\u62d4\u6389\uff0c\u90a3\u9ebc\u7576\u4e00\u500b\u9ede\u6c92\u6709\u5165\u5ea6\u6642\uff08\u610f\u5373\u4fee\u5b8c\u8a72\u8ab2\u7a0b\u7684\u6240\u6709\u5148\u4fee\u8ab2\uff09\uff0c\u5c31\u53ef\u4ee5\u88ab\u62d4\u6389\u3002 \u6709\u5169\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u627e\u51fa\u62d3\u8b5c\u6392\u5e8f\uff0c\u4e00\u7a2e\u662f\u7528 queue\uff0c\u628a\u6240\u6709\u5165\u5ea6 =0 \u7684\u9ede\u90fd\u9032\u53bb\uff0c\u6bcf\u4e00\u6b21\u90fd\u5f9e queue \u62ff\u51fa\u4e00\u500b\u9ede\uff0c\u5c07\u4ed6\u6240\u6709\u6307\u5411\u7684\u9ede\u5165\u5ea6\u90fd - 1\uff0c\u5176\u4e2d\u5982\u679c\u6709\u9ede\u7684\u5165\u5ea6\u8b8a\u6210 0\uff0c\u4e00\u6a23\u5c07\u8a72\u9ede\u653e\u9032 queue \u88e1\u9762\uff0c\u5982\u679c queue \u88e1\u9762\u6c92\u9ede\uff0c\u4f46\u662f\u9084\u6709\u9ede\u5165\u5ea6 >0 \uff0c\u5247\u7121\u89e3\uff0c\u5426\u5247\u5f9e queue \u62ff\u51fa\u7684\u9806\u5e8f\u5c31\u662f\u62d3\u6a38\u6392\u5e8f\u3002 int q[N], din[N]; vector<int> G[N]; bool TopologicalSort(int n) { int head = -1, tail = -1; for (int i = 0; i < n; ++i) { if (din[i] == 0) { q[++head] = 1; } } while (head > tail) { int s = q[++tail]; for (int i : G[s]) { if (--din[i] == 0) q[++head] = i; } } return head == n; } \u53e6\u4e00\u7a2e\u662f\u5229\u7528 DFS + \u6642\u9593\u6233\u8a18\uff0c\u5982\u679c\u767c\u73fe\u6709\u4efb\u4e00\u689d\u908a (u,v) \uff0c tin[u]>tin[v] \uff0c\u90a3\u5c31\u7121\u89e3\uff0c\u5426\u5247\u4f9d\u7167 tout \u7531\u5927\u5230\u5c0f\u5f62\u6210\u62d3\u8b5c\u6392\u5e8f\u3002 \u9019\u5169\u7a2e\u8fa6\u6cd5\u7684\u6642\u9593\u8907\u96dc\u5ea6\u7686\u70ba O(V+E) \u3002","title":"\u62d3\u64b2\u6392\u5e8f"},{"location":"graph/traverse/","text":"\u5b58\u597d\u5716\u5f8c\uff0c\u70ba\u4e86\u7372\u5f97\u67d0\u4e9b\u8cc7\u8a0a\uff0c\u9700\u8981\u904d\u6b77\u6216\u641c\u7d22\u5716\u3002\u4ee5\u4e0b\u4ecb\u7d39\u5169\u7a2e\u65b9\u6cd5\uff1aDFS \u548c BFS\u3002 \u6df1\u5ea6\u512a\u5148\u641c\u5c0b (Depth First Search, DFS) DFS \u6703\u512a\u5148\u641c\u5c0b\u8ddd\u96e2\u8d77\u9ede\u9060\u7684\uff0c\u901a\u5e38\u7528\u905e\u8ff4\u5be6\u4f5c\u6216\u7528 stack \u7dad\u8b77\u3002 vector<int> G[N]; bitset<N> vis; void dfs(int s) { vis[s] = 1; for (int t : G[s]) { if (!vis[i]) dfs(i); } } \u5ee3\u5ea6\u512a\u5148\u641c\u5c0b (Breadth First Search, BFS) BFS \u6703\u628a\u8ddd\u96e2\u8d77\u9ede\u76f8\u540c\u7684\u9ede\u904d\u6b77\u904e\u5f8c\uff0c\u518d\u53bb\u904d\u6b77\u8ddd\u96e2\u66f4\u9060\u7684\u9ede\u3002\u901a\u5e38\u4ee5 queue \u4f86\u7dad\u8b77\u3002 vector<int> G[N]; bitset<N> vis; void bfs(int s) { queue<int> q; q.push(s); vis[s] = 1; while (!q.empty()) { int v = q.front(); q.pop(); for (int t : G[v]) { if (!vis[t]) { q.push(t); vis[t] = 1; } } } }","title":"\u5716\u7684\u904d\u6b77"},{"location":"graph/traverse/#depth-first-search-dfs","text":"DFS \u6703\u512a\u5148\u641c\u5c0b\u8ddd\u96e2\u8d77\u9ede\u9060\u7684\uff0c\u901a\u5e38\u7528\u905e\u8ff4\u5be6\u4f5c\u6216\u7528 stack \u7dad\u8b77\u3002 vector<int> G[N]; bitset<N> vis; void dfs(int s) { vis[s] = 1; for (int t : G[s]) { if (!vis[i]) dfs(i); } }","title":"\u6df1\u5ea6\u512a\u5148\u641c\u5c0b (Depth First Search, DFS)"},{"location":"graph/traverse/#breadth-first-search-bfs","text":"BFS \u6703\u628a\u8ddd\u96e2\u8d77\u9ede\u76f8\u540c\u7684\u9ede\u904d\u6b77\u904e\u5f8c\uff0c\u518d\u53bb\u904d\u6b77\u8ddd\u96e2\u66f4\u9060\u7684\u9ede\u3002\u901a\u5e38\u4ee5 queue \u4f86\u7dad\u8b77\u3002 vector<int> G[N]; bitset<N> vis; void bfs(int s) { queue<int> q; q.push(s); vis[s] = 1; while (!q.empty()) { int v = q.front(); q.pop(); for (int t : G[v]) { if (!vis[t]) { q.push(t); vis[t] = 1; } } } }","title":"\u5ee3\u5ea6\u512a\u5148\u641c\u5c0b (Breadth First Search, BFS)"},{"location":"math/chineseRemainderTheorem/","text":"\u4e2d\u570b\u5269\u9918\u5b9a\u7406 \u4e2d\u570b\u5269\u9918\u5b9a\u7406\uff0c\u53c8\u7a31\u4e2d\u570b\u9918\u6578\u5b9a\u7406\uff0c\u662f\u6578\u8ad6\u4e2d\u7684\u4e00\u500b\u95dc\u65bc\u4e00\u5143\u7dda\u6027\u540c\u9918\u65b9\u7a0b\u7d44\u7684\u5b9a\u7406\u3002\u7528\u4f86\u89e3\u6c7a\u50cf\u4e0b\u9762\u9019\u7a2e\u554f\u984c\uff1a \"\u6709\u7269\u4e0d\u77e5\u5176\u6578\uff0c\u4e09\u4e09\u6578\u4e4b\u5269\u4e8c\uff0c\u4e94\u4e94\u6578\u4e4b\u5269\u4e09\uff0c\u4e03\u4e03\u6578\u4e4b\u5269\u4e8c\u3002\u554f\u7269\u5e7e\u4f55\uff1f\"\uff0c\u9019\u984c\u7b54\u6848\u70ba 23+105n,n>=0 \u5217\u51fa\u9019\u7a2e\u554f\u984c\u7684\u5f0f\u5b50\uff08\u8a2d m_i \u5169\u5169\u4e92\u8cea\uff09\uff1a \\left \\{ \\begin{matrix} X\\equiv a_1 (\\operatorname{mod} m_1)\\\\ X\\equiv a_2 (\\operatorname{mod} m_2)\\\\ \\cdot \\\\ \\cdot \\\\ X\\equiv a_n (\\operatorname{mod} m_n)\\end{matrix}\\right. \u89e3\u6c7a\u9019\u985e\u554f\u984c\u6700\u7c21\u55ae\u9069\u7528\u679a\u8209\u4f86\u6c42\u89e3\uff0c\u4e0d\u904e\u5982\u679c\u7bc4\u570d\u592a\u5927\u5c31\u6703\u5403 TLE \u4e86\u3002\u56e0\u6b64\u6211\u5011\uff0c\u6211\u5011\u8a2d M=\\Pi_{i=1}^{n} m_i \uff0c\u4ee4 x_1 \\operatorname{mod} m_1 \\equiv a_1 \uff0c\u800c\u5c0d\u5176\u4ed6 m_i \u7686\u6574\u9664\uff0c\u62c6\u89e3 x_1 \u6210\u70ba x_1=(M/m_1)r_1 \u4ea6\u5373 (M/m_1)r_1\\equiv a_1 (\\operatorname{mod} m_1) \uff0c\u7528\u627e\u6a21\u9006\u5143\u7684\u65b9\u5f0f\u6c42\u51fa x_1 \u3002 x_2,x_3,...,x_n \u4e5f\u662f\u4f9d\u7167\u9019\u500b\u8fa6\u6cd5\u6c42\u51fa\uff0c\u6700\u5f8c X=(\\Sigma_{i=1}^{n} x_i)\\operatorname{mod} M+kM(k>=0) \u3002 \u7e3d\u5171\u6709 n \u500b\u5f0f\u5b50\uff0c\u6bcf\u500b\u5f0f\u5b50\u90fd\u8981\u627e\u4e00\u6b21\u6a21\u9006\u5143\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u70ba O(n \\log m)","title":"\u4e2d\u570b\u5269\u9918\u5b9a\u7406"},{"location":"math/chineseRemainderTheorem/#_1","text":"\u4e2d\u570b\u5269\u9918\u5b9a\u7406\uff0c\u53c8\u7a31\u4e2d\u570b\u9918\u6578\u5b9a\u7406\uff0c\u662f\u6578\u8ad6\u4e2d\u7684\u4e00\u500b\u95dc\u65bc\u4e00\u5143\u7dda\u6027\u540c\u9918\u65b9\u7a0b\u7d44\u7684\u5b9a\u7406\u3002\u7528\u4f86\u89e3\u6c7a\u50cf\u4e0b\u9762\u9019\u7a2e\u554f\u984c\uff1a \"\u6709\u7269\u4e0d\u77e5\u5176\u6578\uff0c\u4e09\u4e09\u6578\u4e4b\u5269\u4e8c\uff0c\u4e94\u4e94\u6578\u4e4b\u5269\u4e09\uff0c\u4e03\u4e03\u6578\u4e4b\u5269\u4e8c\u3002\u554f\u7269\u5e7e\u4f55\uff1f\"\uff0c\u9019\u984c\u7b54\u6848\u70ba 23+105n,n>=0 \u5217\u51fa\u9019\u7a2e\u554f\u984c\u7684\u5f0f\u5b50\uff08\u8a2d m_i \u5169\u5169\u4e92\u8cea\uff09\uff1a \\left \\{ \\begin{matrix} X\\equiv a_1 (\\operatorname{mod} m_1)\\\\ X\\equiv a_2 (\\operatorname{mod} m_2)\\\\ \\cdot \\\\ \\cdot \\\\ X\\equiv a_n (\\operatorname{mod} m_n)\\end{matrix}\\right. \u89e3\u6c7a\u9019\u985e\u554f\u984c\u6700\u7c21\u55ae\u9069\u7528\u679a\u8209\u4f86\u6c42\u89e3\uff0c\u4e0d\u904e\u5982\u679c\u7bc4\u570d\u592a\u5927\u5c31\u6703\u5403 TLE \u4e86\u3002\u56e0\u6b64\u6211\u5011\uff0c\u6211\u5011\u8a2d M=\\Pi_{i=1}^{n} m_i \uff0c\u4ee4 x_1 \\operatorname{mod} m_1 \\equiv a_1 \uff0c\u800c\u5c0d\u5176\u4ed6 m_i \u7686\u6574\u9664\uff0c\u62c6\u89e3 x_1 \u6210\u70ba x_1=(M/m_1)r_1 \u4ea6\u5373 (M/m_1)r_1\\equiv a_1 (\\operatorname{mod} m_1) \uff0c\u7528\u627e\u6a21\u9006\u5143\u7684\u65b9\u5f0f\u6c42\u51fa x_1 \u3002 x_2,x_3,...,x_n \u4e5f\u662f\u4f9d\u7167\u9019\u500b\u8fa6\u6cd5\u6c42\u51fa\uff0c\u6700\u5f8c X=(\\Sigma_{i=1}^{n} x_i)\\operatorname{mod} M+kM(k>=0) \u3002 \u7e3d\u5171\u6709 n \u500b\u5f0f\u5b50\uff0c\u6bcf\u500b\u5f0f\u5b50\u90fd\u8981\u627e\u4e00\u6b21\u6a21\u9006\u5143\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u70ba O(n \\log m)","title":"\u4e2d\u570b\u5269\u9918\u5b9a\u7406"},{"location":"math/euler/","text":"\u6b50\u62c9\u5b9a\u7406\u53ca\u76f8\u95dc\u61c9\u7528 \u6b50\u62c9\u51fd\u6578 \u6b50\u62c9\u51fd\u6578\u8a08\u7b97\u5c0d\u65bc\u4e00\u500b\u6574\u6578 N\uff0c\u5c0f\u65bc\u7b49\u65bc N \u7684\u6b63\u6574\u6578\u4e2d\uff0c\u6709\u5e7e\u500b\u548c N \u4e92\u8cea\u3002\u901a\u5e38\u7528 \\Phi(n) \u8868\u793a\u3002\u5176\u516c\u5f0f\u70ba \\Phi(N)=N\\times\\Pi_{p|N}(1-\\frac{1}{p}) int Phi(int n) { int ret = n; for (int i : p) { if (i * i > n) break; if (n % i == 0) { ret /= i; ret *= i - 1; while (n % i == 0) n /= i; } } if (n != 1) { ret /= n; ret *= n - 1; } return ret; } \u6b50\u62c9\u51fd\u6578\u9084\u6709\u4e00\u4e9b\u6027\u8cea \u5982\u679c p \u662f\u8cea\u6578\uff1a \\Phi(p) = p-1 \u4ee5\u53ca \\Phi(p^k)=p^{k\u22121}\\times (p\u22121) \u5982\u679c pq \u4e92\u8cea\uff1a \\Phi(pq) = \\Phi(p)\\times\\Phi(q) \u6839\u64da\u9019\u4e9b\u6027\u8cea\uff0c\u6211\u5011\u80fd\u5beb\u51fa\u4e00\u500b\u985e\u4f3c\u8cea\u6578\u7be9\u6cd5\u7684\u4f5c\u6cd5\u3002 void phi_table(int n) { phi[1] = 1; for (int i = 2; i <= n; i++) { if (phi[i]) continue; for (int j = i; j < n; j += i) { if (!phi[j]) phi[j] = j; phi[j] = phi[j] / i * (i - 1); } } } \u8cbb\u99ac\u5c0f\u5b9a\u7406 \u7d66\u5b9a\u4e00\u500b\u8cea\u6578 p \u53ca\u4e00\u500b\u6574\u6578 a \uff0c\u90a3\u9ebc\uff1a a^p \\equiv a (\\mod p) \u5982\u679c gcd(a,p)=1 \uff0c\u5247\uff1a a^{p-1} \\equiv 1 (\\mod p) \u6b50\u62c9\u5b9a\u7406 \u6b50\u62c9\u5b9a\u7406\u662f\u6bd4\u8f03 generate \u7248\u672c\u7684\u8cbb\u99ac\u5c0f\u5b9a\u7406\u3002\u7d66\u5b9a\u5169\u500b\u6574\u6578 n \u548c a \uff0c\u5982\u679c gcd(a,n)=1 \uff0c\u5247 a^{\\Phi(n)} \\equiv 1 (\\mod n) \u5982\u679c n \u662f\u8cea\u6578\uff0c \\Phi(n)=n-1 \uff0c\u4e5f\u5c31\u662f\u8cbb\u99ac\u5c0f\u5b9a\u7406\u3002 Wilson's theorem \u7d66\u5b9a\u4e00\u500b\u8cea\u6578 p \uff0c\u5247\uff1a (p-1)!\\equiv -1 (\\mod p)","title":"\u6b50\u62c9\u5b9a\u7406\u53ca\u76f8\u95dc\u61c9\u7528"},{"location":"math/euler/#_1","text":"","title":"\u6b50\u62c9\u5b9a\u7406\u53ca\u76f8\u95dc\u61c9\u7528"},{"location":"math/euler/#_2","text":"\u6b50\u62c9\u51fd\u6578\u8a08\u7b97\u5c0d\u65bc\u4e00\u500b\u6574\u6578 N\uff0c\u5c0f\u65bc\u7b49\u65bc N \u7684\u6b63\u6574\u6578\u4e2d\uff0c\u6709\u5e7e\u500b\u548c N \u4e92\u8cea\u3002\u901a\u5e38\u7528 \\Phi(n) \u8868\u793a\u3002\u5176\u516c\u5f0f\u70ba \\Phi(N)=N\\times\\Pi_{p|N}(1-\\frac{1}{p}) int Phi(int n) { int ret = n; for (int i : p) { if (i * i > n) break; if (n % i == 0) { ret /= i; ret *= i - 1; while (n % i == 0) n /= i; } } if (n != 1) { ret /= n; ret *= n - 1; } return ret; } \u6b50\u62c9\u51fd\u6578\u9084\u6709\u4e00\u4e9b\u6027\u8cea \u5982\u679c p \u662f\u8cea\u6578\uff1a \\Phi(p) = p-1 \u4ee5\u53ca \\Phi(p^k)=p^{k\u22121}\\times (p\u22121) \u5982\u679c pq \u4e92\u8cea\uff1a \\Phi(pq) = \\Phi(p)\\times\\Phi(q) \u6839\u64da\u9019\u4e9b\u6027\u8cea\uff0c\u6211\u5011\u80fd\u5beb\u51fa\u4e00\u500b\u985e\u4f3c\u8cea\u6578\u7be9\u6cd5\u7684\u4f5c\u6cd5\u3002 void phi_table(int n) { phi[1] = 1; for (int i = 2; i <= n; i++) { if (phi[i]) continue; for (int j = i; j < n; j += i) { if (!phi[j]) phi[j] = j; phi[j] = phi[j] / i * (i - 1); } } }","title":"\u6b50\u62c9\u51fd\u6578"},{"location":"math/euler/#_3","text":"\u7d66\u5b9a\u4e00\u500b\u8cea\u6578 p \u53ca\u4e00\u500b\u6574\u6578 a \uff0c\u90a3\u9ebc\uff1a a^p \\equiv a (\\mod p) \u5982\u679c gcd(a,p)=1 \uff0c\u5247\uff1a a^{p-1} \\equiv 1 (\\mod p)","title":"\u8cbb\u99ac\u5c0f\u5b9a\u7406"},{"location":"math/euler/#_4","text":"\u6b50\u62c9\u5b9a\u7406\u662f\u6bd4\u8f03 generate \u7248\u672c\u7684\u8cbb\u99ac\u5c0f\u5b9a\u7406\u3002\u7d66\u5b9a\u5169\u500b\u6574\u6578 n \u548c a \uff0c\u5982\u679c gcd(a,n)=1 \uff0c\u5247 a^{\\Phi(n)} \\equiv 1 (\\mod n) \u5982\u679c n \u662f\u8cea\u6578\uff0c \\Phi(n)=n-1 \uff0c\u4e5f\u5c31\u662f\u8cbb\u99ac\u5c0f\u5b9a\u7406\u3002","title":"\u6b50\u62c9\u5b9a\u7406"},{"location":"math/euler/#wilsons-theorem","text":"\u7d66\u5b9a\u4e00\u500b\u8cea\u6578 p \uff0c\u5247\uff1a (p-1)!\\equiv -1 (\\mod p)","title":"Wilson's theorem"},{"location":"math/mod/","text":"\u6a21 \u53d6\u9918\u6578\u3002 \u6027\u8cea \u52a0\u6cd5\uff1a (a+b) \\operatorname{mod} p= (a \\operatorname{mod} p +b \\operatorname{mod} p ) \\operatorname{mod} p \u6e1b\u6cd5\uff1a (a-b) \\operatorname{mod} p= (a \\operatorname{mod} p -b \\operatorname{mod} p +p) \\operatorname{mod} p \u4e58\u6cd5\uff1a (a*b) \\operatorname{mod} p= (a \\operatorname{mod} p *b \\operatorname{mod} p ) \\operatorname{mod} p \u6b21\u65b9\uff1a (a^b) \\operatorname{mod} p= ((a \\operatorname{mod} p )^b) \\operatorname{mod} p \u52a0\u6cd5\u7d50\u5408\u5f8b\uff1a ((a+b) \\operatorname{mod} p+c) \\operatorname{mod} p = (a+(b+c)) \\operatorname{mod} p \u4e58\u6cd5\u7d50\u5408\u5f8b\uff1a ((a*b) \\operatorname{mod} p*c) \\operatorname{mod} p = (a*(b*c)) \\operatorname{mod} p \u52a0\u6cd5\u4ea4\u63db\u5f8b\uff1a (a+b) \\operatorname{mod} p=(b+a) \\operatorname{mod} p \u4e58\u6cd5\u4ea4\u63db\u5f8b\uff1a (a*b) \\operatorname{mod} p=(b*a) \\operatorname{mod} p \u7d50\u5408\u5f8b\uff1a ((a+b) \\operatorname{mod} p*c)= ((a*c) \\operatorname{mod} p +(b*c) \\operatorname{mod} p ) \\operatorname{mod} p \u540c\u9918 \u5982\u679c a\\equiv b (\\operatorname{mod} m) \uff0c\u6211\u5011\u6703\u8aaa a,b \u5728\u6a21 m \u4e0b\u540c\u9918\u3002 \u4ee5\u4e0b\u70ba\u6027\u8cea\uff1a \u6574\u9664\u6027\uff1a a\\equiv b \\quad (\\operatorname{mod} m) \\Rightarrow c \\cdot m = a - b , c \\in \\mathbb{Z} \\ \\Rightarrow a \\equiv b\\quad ( \\operatorname{mod} m ) \\Rightarrow m \\; | \\; a-b \u905e\u79fb\u6027\uff1a\u82e5 a \\equiv b \\quad (\\operatorname{mod} c) , b \\equiv d \\quad (\\operatorname{mod} c) \\\u5247 a \\equiv d (\\operatorname{mod} c) \u4fdd\u6301\u57fa\u672c\u904b\u7b97\uff1a \\left \\{ \\begin{matrix} a \\equiv b (\\operatorname{mod} m)\\\\ c \\equiv d (\\operatorname{mod} m)\\end{matrix}\\right. \\Rightarrow \\left\\{\\begin{matrix}a \\pm c \\equiv b \\pm d (\\operatorname{mod} m)\\\\ a \\cdot c \\equiv b \\cdot d (\\operatorname{mod} m)\\end{matrix}\\right. \u653e\u5927\u7e2e\u5c0f\u6a21\u6578\uff1a k \\in \\mathbb{Z}^+ , a \\equiv b \\quad (\\operatorname{mod} m) \\Leftrightarrow k \\cdot a \\equiv k \\cdot b \\quad (\\operatorname{mod} k \\cdot m) \u53c3\u8003\u6587\u7ae0\uff1a https://wangwilly.github.io/willywangkaa/2018/05/08/Discrete-mathematics-Chinese-Remainder-Theorem/ \u5feb\u901f\u51aa \u6211\u5011\u5e38\u5e38\u9047\u5230\u6c42 a^b mod\\ c \u70ba\u591a\u5c11\u7684\u984c\u76ee\uff0c\u6700\u7c21\u55ae\u7684\u4f5c\u6cd5\u662f\u7528\u8ff4\u5708\u82b1 b \u6b21\u7b97\u51fa\u7b54\u6848\uff0c\u4f46\u662f\u5728 b \u5f88\u5927\u6642\u5c31\u7121\u6cd5\u5feb\u901f\u7b97\u51fa\u3002\u9019\u6642\u5982\u679c\u62c6\u6210 a^1,a^2,a^4,...,a^{2^x} \uff0c\u5148\u5206\u5225\u8a08\u7b97\u5728\u4e58\u8d77\u4f86\uff0c\u9019\u6a23\u53ea\u8981\u82b1\u8cbb O(\\log b) \u7684\u6642\u9593\u5373\u53ef\u3002 T pow(int a, int b, int c) { // calculate a^b%c T res = 1, tmp = a; for (; b; b >>= 1) { if (b & 1) res = res * tmp % c; tmp = tmp * tmp % c; } return res; } \u6a21\u9006\u5143 \u6a21\u9006\u5143\u662f\u53d6\u6a21\u4e0b\u7684\u53cd\u5143\u7d20\uff0c\u5373\u70ba\u627e\u5230 a^{-1} \u4f7f\u5f97 aa^{-1}\\equiv\\ 1\\ mod\\ c \u3002\u5982\u679c a \u8981\u5728 mod c \u4e0b\u6709\u53cd\u5143\u7d20\uff0c\u90a3\u9ebc gcd(a,c)=1 \uff0c\u6839\u64da\u8c9d\u7956\u5b9a\u7406\uff0c\u53ef\u77e5\u5b58\u5728\u6574\u6578 x,y \uff0c\u4f7f\u5f97 ax+cy=gcd(a,c)=1 \uff0c\u9019\u88e1\u7684 x \u5373\u70ba a \u7684\u53cd\u5143\u7d20\uff0c\u6211\u5011\u53ef\u4ee5\u4fee\u6539\u627e GCD \u7684\u8fa6\u6cd5\uff0c\u627e\u51fa a \u7684\u53cd\u5143\u7d20\u3002 int extgcd(int a, int b, int &x, int &y) { int d = a; if (b) { d = extgcd(b, a % b, y, x); y -= -(a / b) * x; } else { x = 1; y = 0; } return d; }","title":"\u6a21"},{"location":"math/mod/#_1","text":"\u53d6\u9918\u6578\u3002","title":"\u6a21"},{"location":"math/mod/#_2","text":"\u52a0\u6cd5\uff1a (a+b) \\operatorname{mod} p= (a \\operatorname{mod} p +b \\operatorname{mod} p ) \\operatorname{mod} p \u6e1b\u6cd5\uff1a (a-b) \\operatorname{mod} p= (a \\operatorname{mod} p -b \\operatorname{mod} p +p) \\operatorname{mod} p \u4e58\u6cd5\uff1a (a*b) \\operatorname{mod} p= (a \\operatorname{mod} p *b \\operatorname{mod} p ) \\operatorname{mod} p \u6b21\u65b9\uff1a (a^b) \\operatorname{mod} p= ((a \\operatorname{mod} p )^b) \\operatorname{mod} p \u52a0\u6cd5\u7d50\u5408\u5f8b\uff1a ((a+b) \\operatorname{mod} p+c) \\operatorname{mod} p = (a+(b+c)) \\operatorname{mod} p \u4e58\u6cd5\u7d50\u5408\u5f8b\uff1a ((a*b) \\operatorname{mod} p*c) \\operatorname{mod} p = (a*(b*c)) \\operatorname{mod} p \u52a0\u6cd5\u4ea4\u63db\u5f8b\uff1a (a+b) \\operatorname{mod} p=(b+a) \\operatorname{mod} p \u4e58\u6cd5\u4ea4\u63db\u5f8b\uff1a (a*b) \\operatorname{mod} p=(b*a) \\operatorname{mod} p \u7d50\u5408\u5f8b\uff1a ((a+b) \\operatorname{mod} p*c)= ((a*c) \\operatorname{mod} p +(b*c) \\operatorname{mod} p ) \\operatorname{mod} p","title":"\u6027\u8cea"},{"location":"math/mod/#_3","text":"\u5982\u679c a\\equiv b (\\operatorname{mod} m) \uff0c\u6211\u5011\u6703\u8aaa a,b \u5728\u6a21 m \u4e0b\u540c\u9918\u3002 \u4ee5\u4e0b\u70ba\u6027\u8cea\uff1a \u6574\u9664\u6027\uff1a a\\equiv b \\quad (\\operatorname{mod} m) \\Rightarrow c \\cdot m = a - b , c \\in \\mathbb{Z} \\ \\Rightarrow a \\equiv b\\quad ( \\operatorname{mod} m ) \\Rightarrow m \\; | \\; a-b \u905e\u79fb\u6027\uff1a\u82e5 a \\equiv b \\quad (\\operatorname{mod} c) , b \\equiv d \\quad (\\operatorname{mod} c) \\\u5247 a \\equiv d (\\operatorname{mod} c) \u4fdd\u6301\u57fa\u672c\u904b\u7b97\uff1a \\left \\{ \\begin{matrix} a \\equiv b (\\operatorname{mod} m)\\\\ c \\equiv d (\\operatorname{mod} m)\\end{matrix}\\right. \\Rightarrow \\left\\{\\begin{matrix}a \\pm c \\equiv b \\pm d (\\operatorname{mod} m)\\\\ a \\cdot c \\equiv b \\cdot d (\\operatorname{mod} m)\\end{matrix}\\right. \u653e\u5927\u7e2e\u5c0f\u6a21\u6578\uff1a k \\in \\mathbb{Z}^+ , a \\equiv b \\quad (\\operatorname{mod} m) \\Leftrightarrow k \\cdot a \\equiv k \\cdot b \\quad (\\operatorname{mod} k \\cdot m) \u53c3\u8003\u6587\u7ae0\uff1a https://wangwilly.github.io/willywangkaa/2018/05/08/Discrete-mathematics-Chinese-Remainder-Theorem/","title":"\u540c\u9918"},{"location":"math/mod/#_4","text":"\u6211\u5011\u5e38\u5e38\u9047\u5230\u6c42 a^b mod\\ c \u70ba\u591a\u5c11\u7684\u984c\u76ee\uff0c\u6700\u7c21\u55ae\u7684\u4f5c\u6cd5\u662f\u7528\u8ff4\u5708\u82b1 b \u6b21\u7b97\u51fa\u7b54\u6848\uff0c\u4f46\u662f\u5728 b \u5f88\u5927\u6642\u5c31\u7121\u6cd5\u5feb\u901f\u7b97\u51fa\u3002\u9019\u6642\u5982\u679c\u62c6\u6210 a^1,a^2,a^4,...,a^{2^x} \uff0c\u5148\u5206\u5225\u8a08\u7b97\u5728\u4e58\u8d77\u4f86\uff0c\u9019\u6a23\u53ea\u8981\u82b1\u8cbb O(\\log b) \u7684\u6642\u9593\u5373\u53ef\u3002 T pow(int a, int b, int c) { // calculate a^b%c T res = 1, tmp = a; for (; b; b >>= 1) { if (b & 1) res = res * tmp % c; tmp = tmp * tmp % c; } return res; }","title":"\u5feb\u901f\u51aa"},{"location":"math/mod/#_5","text":"\u6a21\u9006\u5143\u662f\u53d6\u6a21\u4e0b\u7684\u53cd\u5143\u7d20\uff0c\u5373\u70ba\u627e\u5230 a^{-1} \u4f7f\u5f97 aa^{-1}\\equiv\\ 1\\ mod\\ c \u3002\u5982\u679c a \u8981\u5728 mod c \u4e0b\u6709\u53cd\u5143\u7d20\uff0c\u90a3\u9ebc gcd(a,c)=1 \uff0c\u6839\u64da\u8c9d\u7956\u5b9a\u7406\uff0c\u53ef\u77e5\u5b58\u5728\u6574\u6578 x,y \uff0c\u4f7f\u5f97 ax+cy=gcd(a,c)=1 \uff0c\u9019\u88e1\u7684 x \u5373\u70ba a \u7684\u53cd\u5143\u7d20\uff0c\u6211\u5011\u53ef\u4ee5\u4fee\u6539\u627e GCD \u7684\u8fa6\u6cd5\uff0c\u627e\u51fa a \u7684\u53cd\u5143\u7d20\u3002 int extgcd(int a, int b, int &x, int &y) { int d = a; if (b) { d = extgcd(b, a % b, y, x); y -= -(a / b) * x; } else { x = 1; y = 0; } return d; }","title":"\u6a21\u9006\u5143"},{"location":"math/primeAndFactor/","text":"\u8cea\u6578\u8207\u56e0\u6578 \u8cea\u6578 \u8cea\u6578\u70ba\u56e0\u6578\u53ea\u6709 1 \u548c\u81ea\u5df1\u7684\u6578\uff0c\u8cea\u6578\u554f\u984c\u5728\u7a0b\u5f0f\u7af6\u8cfd\u4e2d\u5e38\u5e38\u9047\u5230\uff0c\u901a\u6703\u5efa\u7acb\u8cea\u6578\u8868\u4f86\u67e5\u8a62\u8cea\u6578\u3002 \u4e00\u822c\u7be9\u6cd5 \u6bcf\u627e\u5230\u4e00\u500b\u8cea\u6578 x \uff0c\u5c31\u77e5\u9053 2x, 3x, 4x... \u90fd\u4e0d\u662f\u8cea\u6578\uff0c\u628a\u4ed6\u5011\u5f9e\u5019\u9078\u540d\u55ae\u5243\u9664\u3002 vector<int> p; bitset<MAXN> is_notp; void PrimeTable(int n) { is_notp.reset(); is_notp[0] = is_notp[1] = 1; for (int i = 2; i <= n; i++) { if (is_notp[i]) continue; p.push_back(i); for (int j = i * i; j <= n; j += i) { is_notp[j] = 1; } } } \u8907\u96dc\u5ea6\u53ef\u5230 O(N\\log\\log N) \uff0c\u5982\u679c\u4e0d\u5f9e\u5e73\u65b9\u958b\u59cb\u5243\u9664\uff0c\u5247\u6703\u9000\u5316\u81f3 O(N\\log N) \u7dda\u6027\u7be9\u6cd5 \u5c07\u4e00\u822c\u7be9\u6cd5\u512a\u5316\u81f3 O(N) \uff0c\u6211\u5011\u671f\u671b\u6bcf\u500b\u5408\u6578\u90fd\u53ea\u88ab\u5176\u6700\u5c0f\u8cea\u56e0\u6578\u5254\u9664\uff0c\u9019\u6a23\u53ef\u4ee5\u78ba\u4fdd\u5176\u5747\u6524\u7684\u7dda\u6027\u3002\u5be6\u4f5c\u4e0a\uff0c\u6211\u5011\u8b93\u6bcf\u4e00\u500b\u6578\u53bb\u66ff\u9664\u81ea\u5df1\u4e58\u4e0a\u300c \u5c0f\u65bc\u7b49\u65bc \u5176\u8cea\u56e0\u6578\u7684\u6240\u6709\u8cea\u6578\u300d\u7684\u6578\u5b57\u5373\u53ef\u3002 vector<int> p; bitset<MAXN> is_notp; void PrimeTable(int n) { is_notp.reset(); is_notp[0] = is_notp[1] = 1; for (int i = 2; i <= n; i++) { if (!is_notp[i]) p.push_back(i); for (int j : p) { if (i * j > n) break; is_notp[i * j] = 1; if (i % j == 0) break; } } } \u56e0\u6578 \u6211\u5011\u80fd\u5c07\u4efb\u610f\u4e00\u500b\u6b63\u6574\u6578\u505a\u8cea\u56e0\u6578\u5206\u89e3\uff0c\u5f62\u5f0f\u70ba N=P_{1}^{x_{1}}P_{2}^{x_{2}}P_{3}^{x_{3}}...=\\Pi P_{i}^{x_{i}} \uff0c\u6839\u64da\u6b64\u5f62\u5f0f\uff0c\u6211\u5011\u53ef\u4ee5\u6c42\u51fa\u4efb\u4e00\u6b63\u6574\u6578\u7684\u56e0\u6578\u500b\u6578\u53ca\u56e0\u6578\u7e3d\u548c \u56e0\u6578\u500b\u6578\uff1a (x_{1}+1)(x_{2}+1)(x_{3}+1)...=\\Pi (x_{i}+1) \u56e0\u6578\u7e3d\u548c\uff1a (P_{1}^{0}+P_{1}^{1}+...+P_{1}^{x_{1}})(P_{2}^{0}+P_{2}^{1}+...+P_{2}^{x_{2}})...=\\Pi\\Sigma_{j=0}^{x_{i}}(P_{i}^{j}) \u6700\u5927\u516c\u56e0\u6578 \u6700\u5927\u516c\u56e0\u6578\uff08Greatest Common Divisor, GCD)\uff0c\u53ef\u4ee5\u7528\u8f3e\u8f49\u76f8\u9664\u6cd5\u6c42\u5f97\u3002 int GCD(int a, int b) { if (b == 0) return a; return GCD(b, a % b); } \u8907\u96dc\u5ea6\u70ba O(\\log(min(a,b))) \uff0c\u6700\u6158\u72c0\u6cc1\u767c\u751f\u5728\u5169\u6578\u70ba\u8cbb\u5f0f\u6578\u5217\u76f8\u9130\u9805\u6642\uff0c C++<algorithm> \u6709\u5167\u5efa\u7684 __gcd \u53ef\u4ee5\u7528\u3002 \u6700\u5c0f\u516c\u500d\u6578\uff08Least Common Multiple,LCM)\uff0c\u5247\u70ba\u5169\u6578\u76f8\u4e58\u518d\u9664\u4ee5\u4ed6\u5011\u7684 GCD\uff0c\u70ba\u907f\u514d\u6ea2\u4f4d\u72c0\u6cc1\uff0c\u53ef\u5148\u5c07\u4e00\u6578\u9664\u4ee5 GCD\uff0c\u518d\u4e58\u4ee5\u53e6\u5916\u4e00\u6578\u3002","title":"\u8cea\u6578\u548c\u56e0\u6578"},{"location":"math/primeAndFactor/#_1","text":"","title":"\u8cea\u6578\u8207\u56e0\u6578"},{"location":"math/primeAndFactor/#_2","text":"\u8cea\u6578\u70ba\u56e0\u6578\u53ea\u6709 1 \u548c\u81ea\u5df1\u7684\u6578\uff0c\u8cea\u6578\u554f\u984c\u5728\u7a0b\u5f0f\u7af6\u8cfd\u4e2d\u5e38\u5e38\u9047\u5230\uff0c\u901a\u6703\u5efa\u7acb\u8cea\u6578\u8868\u4f86\u67e5\u8a62\u8cea\u6578\u3002","title":"\u8cea\u6578"},{"location":"math/primeAndFactor/#_3","text":"\u6bcf\u627e\u5230\u4e00\u500b\u8cea\u6578 x \uff0c\u5c31\u77e5\u9053 2x, 3x, 4x... \u90fd\u4e0d\u662f\u8cea\u6578\uff0c\u628a\u4ed6\u5011\u5f9e\u5019\u9078\u540d\u55ae\u5243\u9664\u3002 vector<int> p; bitset<MAXN> is_notp; void PrimeTable(int n) { is_notp.reset(); is_notp[0] = is_notp[1] = 1; for (int i = 2; i <= n; i++) { if (is_notp[i]) continue; p.push_back(i); for (int j = i * i; j <= n; j += i) { is_notp[j] = 1; } } } \u8907\u96dc\u5ea6\u53ef\u5230 O(N\\log\\log N) \uff0c\u5982\u679c\u4e0d\u5f9e\u5e73\u65b9\u958b\u59cb\u5243\u9664\uff0c\u5247\u6703\u9000\u5316\u81f3 O(N\\log N)","title":"\u4e00\u822c\u7be9\u6cd5"},{"location":"math/primeAndFactor/#_4","text":"\u5c07\u4e00\u822c\u7be9\u6cd5\u512a\u5316\u81f3 O(N) \uff0c\u6211\u5011\u671f\u671b\u6bcf\u500b\u5408\u6578\u90fd\u53ea\u88ab\u5176\u6700\u5c0f\u8cea\u56e0\u6578\u5254\u9664\uff0c\u9019\u6a23\u53ef\u4ee5\u78ba\u4fdd\u5176\u5747\u6524\u7684\u7dda\u6027\u3002\u5be6\u4f5c\u4e0a\uff0c\u6211\u5011\u8b93\u6bcf\u4e00\u500b\u6578\u53bb\u66ff\u9664\u81ea\u5df1\u4e58\u4e0a\u300c \u5c0f\u65bc\u7b49\u65bc \u5176\u8cea\u56e0\u6578\u7684\u6240\u6709\u8cea\u6578\u300d\u7684\u6578\u5b57\u5373\u53ef\u3002 vector<int> p; bitset<MAXN> is_notp; void PrimeTable(int n) { is_notp.reset(); is_notp[0] = is_notp[1] = 1; for (int i = 2; i <= n; i++) { if (!is_notp[i]) p.push_back(i); for (int j : p) { if (i * j > n) break; is_notp[i * j] = 1; if (i % j == 0) break; } } }","title":"\u7dda\u6027\u7be9\u6cd5"},{"location":"math/primeAndFactor/#_5","text":"\u6211\u5011\u80fd\u5c07\u4efb\u610f\u4e00\u500b\u6b63\u6574\u6578\u505a\u8cea\u56e0\u6578\u5206\u89e3\uff0c\u5f62\u5f0f\u70ba N=P_{1}^{x_{1}}P_{2}^{x_{2}}P_{3}^{x_{3}}...=\\Pi P_{i}^{x_{i}} \uff0c\u6839\u64da\u6b64\u5f62\u5f0f\uff0c\u6211\u5011\u53ef\u4ee5\u6c42\u51fa\u4efb\u4e00\u6b63\u6574\u6578\u7684\u56e0\u6578\u500b\u6578\u53ca\u56e0\u6578\u7e3d\u548c \u56e0\u6578\u500b\u6578\uff1a (x_{1}+1)(x_{2}+1)(x_{3}+1)...=\\Pi (x_{i}+1) \u56e0\u6578\u7e3d\u548c\uff1a (P_{1}^{0}+P_{1}^{1}+...+P_{1}^{x_{1}})(P_{2}^{0}+P_{2}^{1}+...+P_{2}^{x_{2}})...=\\Pi\\Sigma_{j=0}^{x_{i}}(P_{i}^{j})","title":"\u56e0\u6578"},{"location":"math/primeAndFactor/#_6","text":"\u6700\u5927\u516c\u56e0\u6578\uff08Greatest Common Divisor, GCD)\uff0c\u53ef\u4ee5\u7528\u8f3e\u8f49\u76f8\u9664\u6cd5\u6c42\u5f97\u3002 int GCD(int a, int b) { if (b == 0) return a; return GCD(b, a % b); } \u8907\u96dc\u5ea6\u70ba O(\\log(min(a,b))) \uff0c\u6700\u6158\u72c0\u6cc1\u767c\u751f\u5728\u5169\u6578\u70ba\u8cbb\u5f0f\u6578\u5217\u76f8\u9130\u9805\u6642\uff0c C++<algorithm> \u6709\u5167\u5efa\u7684 __gcd \u53ef\u4ee5\u7528\u3002 \u6700\u5c0f\u516c\u500d\u6578\uff08Least Common Multiple,LCM)\uff0c\u5247\u70ba\u5169\u6578\u76f8\u4e58\u518d\u9664\u4ee5\u4ed6\u5011\u7684 GCD\uff0c\u70ba\u907f\u514d\u6ea2\u4f4d\u72c0\u6cc1\uff0c\u53ef\u5148\u5c07\u4e00\u6578\u9664\u4ee5 GCD\uff0c\u518d\u4e58\u4ee5\u53e6\u5916\u4e00\u6578\u3002","title":"\u6700\u5927\u516c\u56e0\u6578"},{"location":"other/complexity/","text":"\u8907\u96dc\u5ea6 \u8907\u96dc\u5ea6\u662f\u5b9a\u6027\u63cf\u8ff0\u8a72\u6f14\u7b97\u6cd5\u57f7\u884c\u6210\u672c\uff08\u6642\u9593/\u7a7a\u9593\uff09\u51fd\u5f0f\uff0c\u7528\u4f86\u5206\u6790\u8cc7\u6599\u7d50\u69cb\u548c\u6f14\u7b97\u6cd5\uff08DSA)\u3002 \u5e38\u7528\u51fd\u6578 Big O \u7528\u4f86\u8868\u793a\u4e00\u500b\u8907\u96dc\u5ea6\u7684\u4e0a\u754c\uff0c\u5b9a\u7fa9\u70ba f(n)\\in O(g(n))\\ iff\\ \\exists\\ c,N\\in R^{+},\\forall n \\geq N \u6709 |f(n)| \\leq |cg(n)| \uff0c\u4f8b\u5982 f(n)=5n^2+4n+1 \uff0c\u6211\u5011\u6703\u6ce8\u91cd\u6700\u9ad8\u9805 5n^2 \uff0c\u4e14\u6211\u5011\u6703 5 \u662f\u5e38\u6578\uff0c\u5f97\u51fa f(n)\\in O(n^2) Big \\Omega \u7528\u4f86\u8868\u793a\u4e00\u500b\u8907\u96dc\u5ea6\u7684\u4e0b\u754c\uff0c\u5c0d\u65bc\u4efb\u610f\u7684 f(n) \\in O(g(n)) , \u90fd\u6709 g(n) \\in \\Omega (f(n)) \u3002 Big \\Theta \u8981\u540c\u6642\u6eff\u8db3 Big O \u548c Big \\Omega Big O \u662f\u6211\u5011\u6bd4\u8f03\u5e38\u7528\u7684\uff0c\u5176\u4ed6\u5169\u500b\u53ef\u80fd\u518d\u4e00\u4e9b\u5730\u65b9\u6703\u7528\u5230 \u5e38\u898b\u8907\u96dc\u5ea6 O(1) < O(\\log n) < O(n) < O(n\\log n) < O(n^2) < O(n^3) < O(2^n) < O(n!) \u53e6\u5916\u9084\u6709\u4e00\u500b\u5728\u4e26\u67e5\u96c6\u5e38\u898b\uff0c\u5373 O(\\alpha(n)) \uff0c\u8fd1\u4f3c\u65bc O(1) \uff0c\u53ef\u76f4\u63a5\u7576\u4f5c O(1) \u6642\u9593/\u7a7a\u9593\u8907\u96dc\u5ea6 \u6642\u9593\u8907\u96dc\u5ea6\uff1a\u548c\u904b\u7b97\u6709\u95dc\uff0c *% \u6703\u6bd4 +- \u9084\u8981\u4e45\uff0c\u800c\u8907\u96dc\u5ea6\u5f97\u9805\u6b21\u6703\u8ddf\u8ff4\u5708\u6709\u95dc\uff0c\u521d\u968e\u7af6\u8cfd\u53ea\u6703\u5728\u610f\u4f60\u7684\u9805\u6b21\uff0c\u53ea\u8981\u4e0d\u8981\u592a\u5927\u57fa\u672c\u90fd\u6703\u904e\uff0c\u9032\u968e\u4e9b\u6bd4\u8cfd\uff0c\u6709\u53ef\u80fd\u51fa\u73fe\u5e38\u6578\u904e\u5927\uff0c\u5c0e\u81f4\u8907\u96dc\u5ea6\u5408\u7406\u537b\u9084\u662f\u5403 TLE \u7684\u60c5\u6cc1\uff0c\u9019\u6642\u5019\u9700\u8981\u5229\u7528 \"\u58d3\u5e38\u6578\" \u6280\u5de7\uff0c\u964d\u4f4e\u6642\u9593\uff0c\u8b93\u7a0b\u5f0f AC\u3002 \u7a7a\u9593\u8907\u96dc\u5ea6\uff1a\u5247\u662f\u8ddf\u4f60\u5ba3\u544a\u7684\u8b8a\u6578\u8a18\u61b6\u9ad4\u7e3d\u548c\u6709\u95dc\uff0c\u6bd4\u6642\u9593\u8907\u96dc\u5ea6\u5bb9\u6613\u4f30\u8a08\uff0c\u5728\u6a39\u72c0\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u5f80\u5f80\u9700\u8981\u642d\u914d\u52d5\u614b\u8a18\u61b6\u9ad4\uff0c\u624d\u4e0d\u6703\u56e0\u70ba\u958b\u592a\u591a\u7a7a\u9593\u800c\u5403\u4e86 MLE\u3002 \u984c\u5916\u8a71\uff0c\u5982\u679c\u4f60\u5728\u4f60\u7684 array \u4e0d\u662f\u958b\u5728\u5168\u57df\u5167\uff0c\u958b\u4e86 10 \u7684 5,6 \u6b21\uff0c\u5728\u57f7\u884c\u6642\u8dd1\u51fa RE\uff0c\u90a3\u4f60\u6709\u4ee5\u4e0b\u5169\u7a2e\u89e3\u6c7a\u65b9\u5f0f \u628a array \u79fb\u81f3\u5168\u57df \u52a0\u4e0a static\uff0c\u8868\u793a\u975c\u614b\u8b8a\u6578","title":"\u8907\u96dc\u5ea6"},{"location":"other/complexity/#_1","text":"\u8907\u96dc\u5ea6\u662f\u5b9a\u6027\u63cf\u8ff0\u8a72\u6f14\u7b97\u6cd5\u57f7\u884c\u6210\u672c\uff08\u6642\u9593/\u7a7a\u9593\uff09\u51fd\u5f0f\uff0c\u7528\u4f86\u5206\u6790\u8cc7\u6599\u7d50\u69cb\u548c\u6f14\u7b97\u6cd5\uff08DSA)\u3002","title":"\u8907\u96dc\u5ea6"},{"location":"other/complexity/#_2","text":"Big O \u7528\u4f86\u8868\u793a\u4e00\u500b\u8907\u96dc\u5ea6\u7684\u4e0a\u754c\uff0c\u5b9a\u7fa9\u70ba f(n)\\in O(g(n))\\ iff\\ \\exists\\ c,N\\in R^{+},\\forall n \\geq N \u6709 |f(n)| \\leq |cg(n)| \uff0c\u4f8b\u5982 f(n)=5n^2+4n+1 \uff0c\u6211\u5011\u6703\u6ce8\u91cd\u6700\u9ad8\u9805 5n^2 \uff0c\u4e14\u6211\u5011\u6703 5 \u662f\u5e38\u6578\uff0c\u5f97\u51fa f(n)\\in O(n^2) Big \\Omega \u7528\u4f86\u8868\u793a\u4e00\u500b\u8907\u96dc\u5ea6\u7684\u4e0b\u754c\uff0c\u5c0d\u65bc\u4efb\u610f\u7684 f(n) \\in O(g(n)) , \u90fd\u6709 g(n) \\in \\Omega (f(n)) \u3002 Big \\Theta \u8981\u540c\u6642\u6eff\u8db3 Big O \u548c Big \\Omega Big O \u662f\u6211\u5011\u6bd4\u8f03\u5e38\u7528\u7684\uff0c\u5176\u4ed6\u5169\u500b\u53ef\u80fd\u518d\u4e00\u4e9b\u5730\u65b9\u6703\u7528\u5230","title":"\u5e38\u7528\u51fd\u6578"},{"location":"other/complexity/#_3","text":"O(1) < O(\\log n) < O(n) < O(n\\log n) < O(n^2) < O(n^3) < O(2^n) < O(n!) \u53e6\u5916\u9084\u6709\u4e00\u500b\u5728\u4e26\u67e5\u96c6\u5e38\u898b\uff0c\u5373 O(\\alpha(n)) \uff0c\u8fd1\u4f3c\u65bc O(1) \uff0c\u53ef\u76f4\u63a5\u7576\u4f5c O(1)","title":"\u5e38\u898b\u8907\u96dc\u5ea6"},{"location":"other/complexity/#_4","text":"\u6642\u9593\u8907\u96dc\u5ea6\uff1a\u548c\u904b\u7b97\u6709\u95dc\uff0c *% \u6703\u6bd4 +- \u9084\u8981\u4e45\uff0c\u800c\u8907\u96dc\u5ea6\u5f97\u9805\u6b21\u6703\u8ddf\u8ff4\u5708\u6709\u95dc\uff0c\u521d\u968e\u7af6\u8cfd\u53ea\u6703\u5728\u610f\u4f60\u7684\u9805\u6b21\uff0c\u53ea\u8981\u4e0d\u8981\u592a\u5927\u57fa\u672c\u90fd\u6703\u904e\uff0c\u9032\u968e\u4e9b\u6bd4\u8cfd\uff0c\u6709\u53ef\u80fd\u51fa\u73fe\u5e38\u6578\u904e\u5927\uff0c\u5c0e\u81f4\u8907\u96dc\u5ea6\u5408\u7406\u537b\u9084\u662f\u5403 TLE \u7684\u60c5\u6cc1\uff0c\u9019\u6642\u5019\u9700\u8981\u5229\u7528 \"\u58d3\u5e38\u6578\" \u6280\u5de7\uff0c\u964d\u4f4e\u6642\u9593\uff0c\u8b93\u7a0b\u5f0f AC\u3002 \u7a7a\u9593\u8907\u96dc\u5ea6\uff1a\u5247\u662f\u8ddf\u4f60\u5ba3\u544a\u7684\u8b8a\u6578\u8a18\u61b6\u9ad4\u7e3d\u548c\u6709\u95dc\uff0c\u6bd4\u6642\u9593\u8907\u96dc\u5ea6\u5bb9\u6613\u4f30\u8a08\uff0c\u5728\u6a39\u72c0\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u5f80\u5f80\u9700\u8981\u642d\u914d\u52d5\u614b\u8a18\u61b6\u9ad4\uff0c\u624d\u4e0d\u6703\u56e0\u70ba\u958b\u592a\u591a\u7a7a\u9593\u800c\u5403\u4e86 MLE\u3002 \u984c\u5916\u8a71\uff0c\u5982\u679c\u4f60\u5728\u4f60\u7684 array \u4e0d\u662f\u958b\u5728\u5168\u57df\u5167\uff0c\u958b\u4e86 10 \u7684 5,6 \u6b21\uff0c\u5728\u57f7\u884c\u6642\u8dd1\u51fa RE\uff0c\u90a3\u4f60\u6709\u4ee5\u4e0b\u5169\u7a2e\u89e3\u6c7a\u65b9\u5f0f \u628a array \u79fb\u81f3\u5168\u57df \u52a0\u4e0a static\uff0c\u8868\u793a\u975c\u614b\u8b8a\u6578","title":"\u6642\u9593/\u7a7a\u9593\u8907\u96dc\u5ea6"},{"location":"other/define/","text":"","title":"define"},{"location":"syntax/array/","text":"","title":"\u9663\u5217"},{"location":"syntax/condition/","text":"","title":"\u689d\u4ef6\u5224\u65b7"},{"location":"syntax/functionAndRecursive/","text":"\u51fd\u5f0f\u8207\u905e\u8ff4 \u51fd\u5f0f\u70ba\u7a0b\u5f0f\u88e1\u7684\u904b\u7b97\u55ae\u5143\uff0c\u53ef\u4ee5\u63a5\u53d7\u8cc7\u6599\uff0c\u4e26\u56de\u50b3\u6307\u5b9a\u503c\u3002main \u662f C/C++ \u7a0b\u5f0f\u7684\u5165\u53e3\u51fd\u5f0f\uff0c\u63a5\u53d7\u547d\u4ee4\u5217\u7684\u53c3\u6578\uff0c\u6b63\u5e38\u60c5\u6cc1\u6703\u56de\u50b3 0 \u4ee3\u8868\u6b63\u5e38\u904b\u4f5c\u3002 \u4ee5\u4e0b\u70ba\u5176\u8a9e\u6cd5 return_type function_name(parameter list) { Do something... return data; // void need not return; } \u7bc4\u4f8b int sum(int x, int y) { int sum = 0; sum += x; sum += y; reutnr x + y; } \u51fd\u5f0f\u6709\u500b\u7279\u6027\u70ba\u81ea\u547c\u53eb\uff0c\u4e5f\u5c31\u662f\u81ea\u5df1\u7684\u5340\u57df\u53ef\u4ee5\u547c\u53eb\u81ea\u5df1\uff0c\u4f46\u8981\u6709\u7d42\u6b62\u689d\u4ef6\uff0c\u4e0d\u7136\u6703\u9677\u5165\u7121\u9650\u905e\u8ff4\uff0c\u540c\u6642\u4e5f\u8981\u907f\u514d\u905e\u8ff4\u904e\u6df1\uff0c\u9020\u6210 stack overflow\u3002 int ans; void f(int i) { if (i == 1) { ans = 1; return; } f(i - 1); ans *= i; return; } \u51fd\u5f0f\u6709\u5f88\u591a\u7528\u8655\uff0c\u4e00\u500b\u70ba\u6a21\u7d44\u5316\uff0c\u610f\u5373\u76f8\u540c\u7684\u90e8\u5206\uff08\u6700\u591a\u53ea\u5dee\u4e00\u4e9b\u53c3\u6578\uff09\uff0c\u5beb\u6210\u4e00\u500b\u51fd\u5f0f\uff0c\u9664\u4e86\u7c21\u6f54\uff0c\u5728\u9664\u932f\u4e5f\u6bd4\u8f03\u65b9\u4fbf\u3002\u4e00\u500b\u662f\u5229\u7528\u81ea\u547c\u53eb\u7279\u6027\u5be6\u4f5c\u905e\u8ff4\uff0c\u905e\u8ff4\u53ef\u5c07\u554f\u984c\u62c6\u89e3\u6210\u540c\u985e\u7684\u5b50\u554f\u984c\u800c\u89e3\u6c7a\u554f\u984c\u3002 \u5e38\u898b\u905e\u8ff4\u4f7f\u7528 \u5206\u6cbb dp \u4e2d\u7684 top-down \u5716/\u6a39\u7684\u641c\u7d22","title":"\u51fd\u5f0f\u8207\u905e\u8ff4"},{"location":"syntax/functionAndRecursive/#_1","text":"\u51fd\u5f0f\u70ba\u7a0b\u5f0f\u88e1\u7684\u904b\u7b97\u55ae\u5143\uff0c\u53ef\u4ee5\u63a5\u53d7\u8cc7\u6599\uff0c\u4e26\u56de\u50b3\u6307\u5b9a\u503c\u3002main \u662f C/C++ \u7a0b\u5f0f\u7684\u5165\u53e3\u51fd\u5f0f\uff0c\u63a5\u53d7\u547d\u4ee4\u5217\u7684\u53c3\u6578\uff0c\u6b63\u5e38\u60c5\u6cc1\u6703\u56de\u50b3 0 \u4ee3\u8868\u6b63\u5e38\u904b\u4f5c\u3002 \u4ee5\u4e0b\u70ba\u5176\u8a9e\u6cd5 return_type function_name(parameter list) { Do something... return data; // void need not return; } \u7bc4\u4f8b int sum(int x, int y) { int sum = 0; sum += x; sum += y; reutnr x + y; } \u51fd\u5f0f\u6709\u500b\u7279\u6027\u70ba\u81ea\u547c\u53eb\uff0c\u4e5f\u5c31\u662f\u81ea\u5df1\u7684\u5340\u57df\u53ef\u4ee5\u547c\u53eb\u81ea\u5df1\uff0c\u4f46\u8981\u6709\u7d42\u6b62\u689d\u4ef6\uff0c\u4e0d\u7136\u6703\u9677\u5165\u7121\u9650\u905e\u8ff4\uff0c\u540c\u6642\u4e5f\u8981\u907f\u514d\u905e\u8ff4\u904e\u6df1\uff0c\u9020\u6210 stack overflow\u3002 int ans; void f(int i) { if (i == 1) { ans = 1; return; } f(i - 1); ans *= i; return; } \u51fd\u5f0f\u6709\u5f88\u591a\u7528\u8655\uff0c\u4e00\u500b\u70ba\u6a21\u7d44\u5316\uff0c\u610f\u5373\u76f8\u540c\u7684\u90e8\u5206\uff08\u6700\u591a\u53ea\u5dee\u4e00\u4e9b\u53c3\u6578\uff09\uff0c\u5beb\u6210\u4e00\u500b\u51fd\u5f0f\uff0c\u9664\u4e86\u7c21\u6f54\uff0c\u5728\u9664\u932f\u4e5f\u6bd4\u8f03\u65b9\u4fbf\u3002\u4e00\u500b\u662f\u5229\u7528\u81ea\u547c\u53eb\u7279\u6027\u5be6\u4f5c\u905e\u8ff4\uff0c\u905e\u8ff4\u53ef\u5c07\u554f\u984c\u62c6\u89e3\u6210\u540c\u985e\u7684\u5b50\u554f\u984c\u800c\u89e3\u6c7a\u554f\u984c\u3002 \u5e38\u898b\u905e\u8ff4\u4f7f\u7528 \u5206\u6cbb dp \u4e2d\u7684 top-down \u5716/\u6a39\u7684\u641c\u7d22","title":"\u51fd\u5f0f\u8207\u905e\u8ff4"},{"location":"syntax/inputOutput/","text":"\u6a19\u6e96\u8f38\u5165\u8f38\u51fa \u6a19\u6e96\u8f38\u5165\u8f38\u51fa\u3001\u6587\u4ef6\u8f38\u5165\u8f38\u51fa \u6a19\u6e96\u8f38\u5165\uff1a\u7531\u9375\u76e4\u8f38\u5165\u3002 \u6a19\u6e96\u8f38\u51fa\uff1a\u8f38\u51fa\u5230\u87a2\u5e55\u3002 \u6587\u4ef6\u8f38\u5165\uff1a\u7531\u6587\u4ef6\u8f38\u5165\u3002 \u6587\u4ef6\u8f38\u51fa\uff1a\u8f38\u51fa\u5230\u6587\u4ef6\u3002 \u6a19\u6e96/\u6587\u4ef6\u8f38\u51fa\u8f38\u5165\u53ef\u4ee5\u6df7\u7528\u3002 C \u6a19\u6e96\u8f38\u5165\u8f38\u51fa\uff0cscanf \u548c printf scanf \u548c printf \u5b9a\u7fa9\u5728\u6a19\u982d\u6a94 stdio.h \u3002 scanf \u548c printf \u6703\u7d66\u5b9a\u4e00\u500b\u6709\u683c\u5f0f\u7684\u5b57\u4e32\u683c\u5f0f\u70ba\uff1a \\%[*][width][length]specifier \uff0c\u5728\u9019\u500b\u683c\u5f0f\u5f8c\u9762\u63a5\u53c3\u6578\uff0c\u5728\u683c\u5f0f\u5b57\u4e32\u6709\u5e7e\u500b\u53c3\u6578\uff0c\u5f8c\u9762\u5c31\u8981\u63a5\u76f8\u5c0d\u61c9\u500b\u6578\u7684\u53c3\u6578\u3002 scanf(\"format string\", var1, var2, ...); printf(\"format string\", varA, varB, ...); specifier\uff08\u683c\u5f0f\u78bc\uff09\uff0c\u662f\u7528\u4f86\u6307\u5b9a\u8f38\u5165\u7684\u578b\u614b\uff0c\u4e0b\u8868\u70ba\u5e38\u7528\u7684\u683c\u5f0f\u78bc\uff1a \u683c\u5f0f\u78bc \u8aaa\u660e %d int %u unsigned int %lld long long int %llu unsigned long long int %f float %lf double #include <cstdio> int main() { int i; scanf(\"%d\", &i); printf(\"%d\\n\", i); double d; scanf(\"%lf\", &d); printf(\"%lf\\n\", d); char c; scanf(\" %c\", &c); printf(\"%c\\n\", c); scanf(\"%d %lf %c\", &i, &d, &c); printf(\"%d %lf %c\\n\", i, d, c); } \u4e0a\u9762\u7684\u4f8b\u5b50\u6703\u767c\u73fe scanf \u7684\u8b8a\u6578\u524d\u9762\u90fd\u6703\u591a\u4e00\u500b & \uff0c\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f scanf \u8981\u7684\u662f\u8a18\u61b6\u9ad4\u4f4d\u7f6e\uff0c\u8981\u66f4\u8a73\u7d30\u7406\u89e3\u8981\u5148\u5b78\u5b8c\u6307\u6a19\u3002\uff08\u7de8\u8005\u8a8d\u70ba\u9019\u662f\u7576\u521d\u8a2d\u8a08\u6c92\u60f3\u5230\u7684\u4e00\u500b bug) width \u5728 printf \u7684\u7528\u9014\u70ba\u5c0d\u53f3\u9760\u9f4a\uff0c\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u7528\u7a7a\u767d\u586b\u6eff\uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u5247\u7121\u6548\u3002 #include <cstdio> int main() { int a = 25; printf(\"%2d\\n\", a); printf(\"%3d\\n\", a); printf(\"%4d\\n\", a); double b = 25.0; printf(\"%10f\\n\", b); printf(\"%11f\\n\", b); printf(\"%12f\\n\", b); } 25 25 25 25.000000 25.000000 25.000000 \u82e5\u7121\u6cd5\u4e8b\u5148\u77e5\u9053\u5bec\u5ea6\uff0c\u53ef\u7528 * \u4ee3\u66ff\u3002 #include <cstdio> int main() { int a = 25; printf(\"%*d\\n\", 2, a); printf(\"%*d\\n\", 3, a); printf(\"%*d\\n\", 4, a); double b = 25.0; printf(\"%*f\\n\", 10, b); printf(\"%*f\\n\", 11, b); printf(\"%*f\\n\", 12, b); } 25 25 25 25.000000 25.000000 25.000000 length \u5728 printf \u7684\u7528\u9014\u70ba\u6307\u5b9a\u8f38\u51fa\u9577\u5ea6\u3002\u6574\u6578\u90e8\u5206\uff0c\u5982\u679c\u662f\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u9577\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u88dc 0 \uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u9577\u5ea6\uff0c\u5247\u7121\u6548\u3002\u6d6e\u9ede\u6578\u90e8\u5206\uff0c\u6240\u8b02\u7684\u8f38\u51fa\u9577\u5ea6\u6307\u7684\u662f\u5c0f\u6578\u9ede\u5f8c\u7684\u4f4d\u6578\u3002 #include <cstdio> int main() { int a = 25; printf(\"%.2d\\n\", a); printf(\"%.3d\\n\", a); printf(\"%.4d\\n\", a); double b = 25.0; printf(\"%.3f\\n\", b); printf(\"%.4f\\n\", b); printf(\"%.5f\\n\", b); } 25 025 0025 25.000 25.0000 25.00000 \u82e5\u7121\u6cd5\u4e8b\u5148\u77e5\u9053\u9577\u5ea6\uff0c\u4ea6\u53ef\u7528 * \u4ee3\u66ff\u3002 #include <cstdio> int main() { int a = 25; printf(\"%.*d\\n\", 1, a); printf(\"%.*d\\n\", 2, a); printf(\"%.*d\\n\", 3, a); printf(\"%.*d\\n\", 4, a); double b = 25.0; printf(\"%.*f\\n\", 3, b); printf(\"%.*f\\n\", 4, b); printf(\"%.*f\\n\", 5, b); } 25 25 025 0025 25.000 25.0000 25.00000 width \u5728 scanf \u7684\u7528\u6cd5\uff0c\u8acb\u53c3\u8003 C \u5b57\u4e32\u7ae0\u7bc0\u3002 C++ \u8f38\u5165\u8f38\u51fa\uff0ccin \u548c cout cin \u548c cout \u5b9a\u7fa9\u5728\u6a19\u982d\u6a94 iostream \u3002 cin \u548c cout \u4e26\u4e0d\u9700\u8981\u5148\u7d66\u51fa\u683c\u5f0f\uff0c\u76f4\u63a5\u63a5\u4f60\u8981\u8f38\u51fa/\u8f38\u5165\u7684\u8b8a\u6578\u540d\u7a31\u5c31\u597d\u4e86\u3002 cin >> var1 >> var2 >> ...; cout << var1 << var2 << var3 < < < ...; #include <iostream> using namespace std; int main() { int i; cin >> i; cout << i << endl; double d; cin >> d; cout << d << endl; char c; cin >> c; cout << c << endl; cin >> i >> d >> c; cout << i << ' ' << d << ' ' << c << endl; } C++ \u7684 cout \u4e5f\u6709\u8a2d\u5b9a\u5bec\u5ea6\u548c\u9577\u5ea6\u7684\u529f\u80fd\uff0c\u9700\u4f7f\u7528\u5230\u6a19\u982d\u6a94 iomanip \u3002 \u5bec\u5ea6\uff1asetw\uff0c\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u7528\u7a7a\u767d\u586b\u6eff\uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u5247\u7121\u6548 #include <iomanip> #include <iostream> using namespace std; int main() { int a = 100; cout << setw(4) << a << '\\n'; cout << setw(5) << a << '\\n'; cout << setw(6) << a << '\\n'; double d = 1.414; cout << setw(4) << d << '\\n'; cout << setw(5) << d << '\\n'; cout << setw(6) << d << '\\n'; } 100 100 100 1.414 1.414 1.414 \u9577\u5ea6\uff1asetprecision\uff0c\u53ea\u5c0d\u6d6e\u9ede\u6578\u6709\u6548\u3002cout \u6709\u5169\u7a2e\u8868\u793a\u65b9\u5f0f\uff0cscientific \u548c fixed\uff0cscientific \u53ea\u6703\u8f38\u51fa\u6709\u6548\u4f4d\u6578\uff0cfixed \u6703\u5c07\u6240\u6709\u4f4d\u6578\u5370\u51fa\u3002 #include <iomanip> #include <iostream> using namespace std; int main() { int a = 100; double d = 1.414; cout << setprecision(4) << a << '\\n'; cout << setprecision(5) << a << '\\n'; cout << setprecision(6) << a << '\\n'; cout << setprecision(4) << d << '\\n'; cout << setprecision(5) << d << '\\n'; cout << setprecision(6) << d << '\\n'; cout << fixed; cout << setprecision(4) << a << '\\n'; cout << setprecision(5) << a << '\\n'; cout << setprecision(6) << a << '\\n'; cout << setprecision(4) << d << '\\n'; cout << setprecision(5) << d << '\\n'; cout << setprecision(6) << d << '\\n'; cout << scientific; cout << setprecision(4) << a << '\\n'; cout << setprecision(5) << a << '\\n'; cout << setprecision(6) << a << '\\n'; cout << setprecision(4) << d << '\\n'; cout << setprecision(5) << d << '\\n'; cout << setprecision(6) << d << '\\n'; } 100 100 100 1.414 1.414 1.414 100 100 100 1.4140 1.41400 1.414000 100 100 100 1.4140e+00 1.41400e+00 1.414000e+00","title":"\u8f38\u5165\u8f38\u51fa"},{"location":"syntax/inputOutput/#_1","text":"","title":"\u6a19\u6e96\u8f38\u5165\u8f38\u51fa"},{"location":"syntax/inputOutput/#_2","text":"\u6a19\u6e96\u8f38\u5165\uff1a\u7531\u9375\u76e4\u8f38\u5165\u3002 \u6a19\u6e96\u8f38\u51fa\uff1a\u8f38\u51fa\u5230\u87a2\u5e55\u3002 \u6587\u4ef6\u8f38\u5165\uff1a\u7531\u6587\u4ef6\u8f38\u5165\u3002 \u6587\u4ef6\u8f38\u51fa\uff1a\u8f38\u51fa\u5230\u6587\u4ef6\u3002 \u6a19\u6e96/\u6587\u4ef6\u8f38\u51fa\u8f38\u5165\u53ef\u4ee5\u6df7\u7528\u3002","title":"\u6a19\u6e96\u8f38\u5165\u8f38\u51fa\u3001\u6587\u4ef6\u8f38\u5165\u8f38\u51fa"},{"location":"syntax/inputOutput/#c-scanf-printf","text":"scanf \u548c printf \u5b9a\u7fa9\u5728\u6a19\u982d\u6a94 stdio.h \u3002 scanf \u548c printf \u6703\u7d66\u5b9a\u4e00\u500b\u6709\u683c\u5f0f\u7684\u5b57\u4e32\u683c\u5f0f\u70ba\uff1a \\%[*][width][length]specifier \uff0c\u5728\u9019\u500b\u683c\u5f0f\u5f8c\u9762\u63a5\u53c3\u6578\uff0c\u5728\u683c\u5f0f\u5b57\u4e32\u6709\u5e7e\u500b\u53c3\u6578\uff0c\u5f8c\u9762\u5c31\u8981\u63a5\u76f8\u5c0d\u61c9\u500b\u6578\u7684\u53c3\u6578\u3002 scanf(\"format string\", var1, var2, ...); printf(\"format string\", varA, varB, ...); specifier\uff08\u683c\u5f0f\u78bc\uff09\uff0c\u662f\u7528\u4f86\u6307\u5b9a\u8f38\u5165\u7684\u578b\u614b\uff0c\u4e0b\u8868\u70ba\u5e38\u7528\u7684\u683c\u5f0f\u78bc\uff1a \u683c\u5f0f\u78bc \u8aaa\u660e %d int %u unsigned int %lld long long int %llu unsigned long long int %f float %lf double #include <cstdio> int main() { int i; scanf(\"%d\", &i); printf(\"%d\\n\", i); double d; scanf(\"%lf\", &d); printf(\"%lf\\n\", d); char c; scanf(\" %c\", &c); printf(\"%c\\n\", c); scanf(\"%d %lf %c\", &i, &d, &c); printf(\"%d %lf %c\\n\", i, d, c); } \u4e0a\u9762\u7684\u4f8b\u5b50\u6703\u767c\u73fe scanf \u7684\u8b8a\u6578\u524d\u9762\u90fd\u6703\u591a\u4e00\u500b & \uff0c\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f scanf \u8981\u7684\u662f\u8a18\u61b6\u9ad4\u4f4d\u7f6e\uff0c\u8981\u66f4\u8a73\u7d30\u7406\u89e3\u8981\u5148\u5b78\u5b8c\u6307\u6a19\u3002\uff08\u7de8\u8005\u8a8d\u70ba\u9019\u662f\u7576\u521d\u8a2d\u8a08\u6c92\u60f3\u5230\u7684\u4e00\u500b bug) width \u5728 printf \u7684\u7528\u9014\u70ba\u5c0d\u53f3\u9760\u9f4a\uff0c\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u7528\u7a7a\u767d\u586b\u6eff\uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u5247\u7121\u6548\u3002 #include <cstdio> int main() { int a = 25; printf(\"%2d\\n\", a); printf(\"%3d\\n\", a); printf(\"%4d\\n\", a); double b = 25.0; printf(\"%10f\\n\", b); printf(\"%11f\\n\", b); printf(\"%12f\\n\", b); } 25 25 25 25.000000 25.000000 25.000000 \u82e5\u7121\u6cd5\u4e8b\u5148\u77e5\u9053\u5bec\u5ea6\uff0c\u53ef\u7528 * \u4ee3\u66ff\u3002 #include <cstdio> int main() { int a = 25; printf(\"%*d\\n\", 2, a); printf(\"%*d\\n\", 3, a); printf(\"%*d\\n\", 4, a); double b = 25.0; printf(\"%*f\\n\", 10, b); printf(\"%*f\\n\", 11, b); printf(\"%*f\\n\", 12, b); } 25 25 25 25.000000 25.000000 25.000000 length \u5728 printf \u7684\u7528\u9014\u70ba\u6307\u5b9a\u8f38\u51fa\u9577\u5ea6\u3002\u6574\u6578\u90e8\u5206\uff0c\u5982\u679c\u662f\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u9577\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u88dc 0 \uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u9577\u5ea6\uff0c\u5247\u7121\u6548\u3002\u6d6e\u9ede\u6578\u90e8\u5206\uff0c\u6240\u8b02\u7684\u8f38\u51fa\u9577\u5ea6\u6307\u7684\u662f\u5c0f\u6578\u9ede\u5f8c\u7684\u4f4d\u6578\u3002 #include <cstdio> int main() { int a = 25; printf(\"%.2d\\n\", a); printf(\"%.3d\\n\", a); printf(\"%.4d\\n\", a); double b = 25.0; printf(\"%.3f\\n\", b); printf(\"%.4f\\n\", b); printf(\"%.5f\\n\", b); } 25 025 0025 25.000 25.0000 25.00000 \u82e5\u7121\u6cd5\u4e8b\u5148\u77e5\u9053\u9577\u5ea6\uff0c\u4ea6\u53ef\u7528 * \u4ee3\u66ff\u3002 #include <cstdio> int main() { int a = 25; printf(\"%.*d\\n\", 1, a); printf(\"%.*d\\n\", 2, a); printf(\"%.*d\\n\", 3, a); printf(\"%.*d\\n\", 4, a); double b = 25.0; printf(\"%.*f\\n\", 3, b); printf(\"%.*f\\n\", 4, b); printf(\"%.*f\\n\", 5, b); } 25 25 025 0025 25.000 25.0000 25.00000 width \u5728 scanf \u7684\u7528\u6cd5\uff0c\u8acb\u53c3\u8003 C \u5b57\u4e32\u7ae0\u7bc0\u3002","title":"C \u6a19\u6e96\u8f38\u5165\u8f38\u51fa\uff0cscanf \u548c printf"},{"location":"syntax/inputOutput/#c-cin-cout","text":"cin \u548c cout \u5b9a\u7fa9\u5728\u6a19\u982d\u6a94 iostream \u3002 cin \u548c cout \u4e26\u4e0d\u9700\u8981\u5148\u7d66\u51fa\u683c\u5f0f\uff0c\u76f4\u63a5\u63a5\u4f60\u8981\u8f38\u51fa/\u8f38\u5165\u7684\u8b8a\u6578\u540d\u7a31\u5c31\u597d\u4e86\u3002 cin >> var1 >> var2 >> ...; cout << var1 << var2 << var3 < < < ...; #include <iostream> using namespace std; int main() { int i; cin >> i; cout << i << endl; double d; cin >> d; cout << d << endl; char c; cin >> c; cout << c << endl; cin >> i >> d >> c; cout << i << ' ' << d << ' ' << c << endl; } C++ \u7684 cout \u4e5f\u6709\u8a2d\u5b9a\u5bec\u5ea6\u548c\u9577\u5ea6\u7684\u529f\u80fd\uff0c\u9700\u4f7f\u7528\u5230\u6a19\u982d\u6a94 iomanip \u3002 \u5bec\u5ea6\uff1asetw\uff0c\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u7528\u7a7a\u767d\u586b\u6eff\uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u5247\u7121\u6548 #include <iomanip> #include <iostream> using namespace std; int main() { int a = 100; cout << setw(4) << a << '\\n'; cout << setw(5) << a << '\\n'; cout << setw(6) << a << '\\n'; double d = 1.414; cout << setw(4) << d << '\\n'; cout << setw(5) << d << '\\n'; cout << setw(6) << d << '\\n'; } 100 100 100 1.414 1.414 1.414 \u9577\u5ea6\uff1asetprecision\uff0c\u53ea\u5c0d\u6d6e\u9ede\u6578\u6709\u6548\u3002cout \u6709\u5169\u7a2e\u8868\u793a\u65b9\u5f0f\uff0cscientific \u548c fixed\uff0cscientific \u53ea\u6703\u8f38\u51fa\u6709\u6548\u4f4d\u6578\uff0cfixed \u6703\u5c07\u6240\u6709\u4f4d\u6578\u5370\u51fa\u3002 #include <iomanip> #include <iostream> using namespace std; int main() { int a = 100; double d = 1.414; cout << setprecision(4) << a << '\\n'; cout << setprecision(5) << a << '\\n'; cout << setprecision(6) << a << '\\n'; cout << setprecision(4) << d << '\\n'; cout << setprecision(5) << d << '\\n'; cout << setprecision(6) << d << '\\n'; cout << fixed; cout << setprecision(4) << a << '\\n'; cout << setprecision(5) << a << '\\n'; cout << setprecision(6) << a << '\\n'; cout << setprecision(4) << d << '\\n'; cout << setprecision(5) << d << '\\n'; cout << setprecision(6) << d << '\\n'; cout << scientific; cout << setprecision(4) << a << '\\n'; cout << setprecision(5) << a << '\\n'; cout << setprecision(6) << a << '\\n'; cout << setprecision(4) << d << '\\n'; cout << setprecision(5) << d << '\\n'; cout << setprecision(6) << d << '\\n'; } 100 100 100 1.414 1.414 1.414 100 100 100 1.4140 1.41400 1.414000 100 100 100 1.4140e+00 1.41400e+00 1.414000e+00","title":"C++ \u8f38\u5165\u8f38\u51fa\uff0ccin \u548c cout"},{"location":"syntax/intro/","text":"","title":"\u57fa\u672c\u4ecb\u7d39"},{"location":"syntax/loop/","text":"","title":"\u8ff4\u5708"},{"location":"syntax/operator/","text":"\u904b\u7b97\u5b50 \u4e0b\u6587\u4e2d\u7684\u6240\u6709\u8a9e\u6cd5\uff0c a , b , c , condition1 , condition2 \u90fd\u662f\u8b8a\u6578\u540d\u7a31\u3002 \u7b97\u8853\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u6b63\u865f(\u4e00\u5143) +a \u8ca0\u865f(\u4e00\u5143) -a \u52a0\u6cd5(\u4e8c\u5143) a+b \u6e1b\u6cd5(\u4e8c\u5143) a-b \u4e58\u6cd5(\u4e8c\u5143) a*b \u9664\u6cd5(\u4e8c\u5143) a/b \u6a21\u6578(\u4e8c\u5143) a%b \u53d6\u9918\u6578 \u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u524d\u7db4\u905e\u589e(\u4e00\u5143) ++a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u5f8c\u7db4\u905e\u589e(\u4e00\u5143) a++ \u56de\u50b3\u503c\u5f8c\u518d\u905e\u589e \u524d\u7db4\u905e\u6e1b(\u4e00\u5143) --a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u5f8c\u7db4\u905e\u6e1b(\u4e00\u5143) a-- \u56de\u50b3\u503c\u5f8c\u518d\u905e\u6e1b \u4f4d\u5143\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u4f4d\u5143 AND(\u4e00\u5143) a&b \u4f4d\u5143 XOR(\u4e00\u5143) a^b \u4f4d\u5143 OR(\u4e00\u5143) a|b \u4f4d\u5143 \u4e00\u7684\u88dc\u6578(\u4e00\u5143) ~a \u4f4d\u5143\u5de6\u79fb(\u4e8c\u5143) a<<b \u4f4d\u5143\u53f3\u79fb(\u4e8c\u5143) a>>b \u8ce6\u503c\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u8ce6\u503c(\u4e8c\u5143) a=b \u7b97\u6578/\u4f4d\u5143\u904b\u7b97\u5b50\u7686\u53ef\u4ee5\u548c\u8ce6\u503c\u904b\u7b97\u5b50\u5408\u4f75\uff0c\u5982\u4e0b\u8868\uff1a \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u52a0\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a+=b \u540c a=a+b \u6e1b\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a-=b \u540c a=a-b \u4e58\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a*=b \u540c a=a*b \u9664\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a/=b \u540c a=a/b \u53d6\u6a21 + \u8ce6\u503c(\u4e8c\u5143) a%=b \u540c a=a%b \u4f4d\u5143 AND + \u8ce6\u503c(\u4e8c\u5143) a&=b \u540c a=a&b \u4f4d\u5143 OR + \u8ce6\u503c(\u4e8c\u5143) a|=b \u540c a=a|b \u4f4d\u5143 XOR + \u8ce6\u503c(\u4e8c\u5143) a^=b \u540c a=a^b \u4f4d\u5143\u5de6\u79fb + \u8ce6\u503c(\u4e8c\u5143) a<<=b \u540c a=a<<b \u4f4d\u5143\u53f3\u79fb + \u8ce6\u503c(\u4e8c\u5143) a>>=b \u540c a=a>>b \u6bd4\u8f03\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u5c0f\u65bc(\u4e8c\u5143) a<b \u5c0f\u65bc\u7b49\u65bc(\u4e8c\u5143) a<=b \u5927\u65bc(\u4e8c\u5143) a>b \u5927\u65bc\u7b49\u65bc(\u4e8c\u5143) a>=b \u7b49\u65bc(\u4e8c\u5143) a==b \u4e0d\u7b49\u65bc(\u4e8c\u5143) a!=b \u908f\u8f2f\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u908f\u8f2f AND(\u4e8c\u5143) condition1 && condition2 \u908f\u8f2f OR(\u4e8c\u5143) condition1 || condition2 \u908f\u8f2f \u975e(\u4e00\u5143) !condition1 \u9017\u865f\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u9017\u865f\u904b\u7b97\u5b50(\u4e8c\u5143) a,b \u4e1f\u68c4\u5de6\u503c\uff0c\u56de\u50b3\u53f3\u908a\u7684\u503c \u689d\u4ef6\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u689d\u4ef6\u904b\u7b97\u5b50(\u4e09\u5143) a?b:c \u76f8\u7576\u65bc if(a){b}else{c} \u512a\u5148\u9806\u5e8f \u8aaa\u660e \u512a\u5148\u7d1a\u8d8a\u9ad8(\u6578\u5b57\u8d8a\u5c0f)\uff0c\u6703\u8d8a\u5148\u57f7\u884c\u3002 \u5982\u679c\u5169\u500b\u904b\u7b97\u5b50\u512a\u5148\u7d1a\u76f8\u540c\uff0c\u4f9d\u7167\u7d50\u5408\u6027\u7684\u65b9\u5411\u57f7\u884c\u3002 \u591a\u8f09\u6027\u53ea\u6a19\u8a3b\u5426\u7684\u904b\u7b97\u5b50\uff0c\u672a\u6a19\u8a18\u7684\u904b\u7b97\u5b50\u90fd\u662f\u53ef\u591a\u8f09\u7684\u3002 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u591a\u8f09\u6027 \u7d50\u5408\u6027 \u512a\u5148\u7d1a 1 :: \u4f5c\u7528\u57df\u89e3\u6790(C++\u5c08\u6709) \u5426 \u512a\u5148\u7d1a 2 \u5de6\u5230\u53f3 \u5f8c\u7db4\u905e\u589e(\u4e00\u5143) a++ \u56de\u50b3\u503c\u5f8c\u518d\u905e\u589e \u5f8c\u7db4\u905e\u6e1b(\u4e00\u5143) a-- \u56de\u50b3\u503c\u5f8c\u518d\u905e\u6e1b () \u51fd\u793a\u547c\u53eb [] \u9663\u5217\u5b58\u53d6 a.b \u4ee5\u7269\u4ef6\u65b9\u5f0f\u5b58\u53d6\u6210\u54e1 \u5426 a->b \u4ee5\u6307\u6a19\u65b9\u5f0f\u5b58\u53d6\u6210\u54e1 dynamic_cast \u57f7\u884c\u6642\u6aa2\u67e5\u985e\u578b\u8f49\u63db(C++\u5c08\u6709) \u5426 static_cast \u672a\u7d93\u6aa2\u67e5\u7684\u985e\u578b\u8f49\u63db(C++\u5c08\u6709) \u5426 reinterpret_cast \u91cd\u5b9a\u7fa9\u985e\u578b\u8f49\u63db(C++\u5c08\u6709) \u5426 const_cast \u66f4\u6539\u975e\u5e38\u6578\u5c6c\u6027(C++\u5c08\u6709) \u5426 typeid \u53d6\u5f97\u985e\u578b\u8cc7\u8a0a(C++\u5c08\u6709) \u5426 \u512a\u5148\u7d1a 3 \u53f3\u81f3\u5de6 \u524d\u7db4\u905e\u589e(\u4e00\u5143) ++a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u524d\u7db4\u905e\u6e1b(\u4e00\u5143) --a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u6b63\u865f(\u4e00\u5143) +a \u8ca0\u865f(\u4e00\u5143) -a \u908f\u8f2f \u975e(\u4e00\u5143) !condition1 \u4f4d\u5143 \u4e00\u7684\u88dc\u6578(\u4e00\u5143) ~a \u53d6\u503c int val=*ptr \u53d6\u6307\u6a19\u6307\u5411\u7684\u503c \u53d6\u5740 int *ptr=&a \u53d6\u8b8a\u6578\u7684\u540d\u5b57 sizeof(a) \u53d6\u8b8a\u6578\u7684\u8a18\u61b6\u9ad4\u5927\u5c0f \u5426 new , new[] \u52d5\u614b\u8a18\u61b6\u9ad4\u5206\u914d(C++\u5c08\u6709) delete , delete[] \u52d5\u614b\u8a18\u61b6\u9ad4\u91cb\u653e(C++\u5c08\u6709) \u512a\u5148\u7d1a 4 \u5de6\u5230\u53f3 .* \u6210\u54e1\u7269\u4ef6\u9078\u64c7(C++\u5c08\u6709) ->* \u6210\u54e1\u6307\u6a19\u9078\u64c7(C++\u5c08\u6709) \u512a\u5148\u7d1a 5 \u5de6\u5230\u53f3 \u4e58\u6cd5(\u4e8c\u5143) a*b \u9664\u6cd5(\u4e8c\u5143) a/b \u6a21\u6578(\u4e8c\u5143) a%b \u53d6\u9918\u6578 \u512a\u5148\u7d1a 6 \u5de6\u5230\u53f3 \u52a0\u6cd5(\u4e8c\u5143) a+b \u6e1b\u6cd5(\u4e8c\u5143) a-b \u512a\u5148\u7d1a 7 \u5de6\u5230\u53f3 \u4f4d\u5143\u5de6\u79fb(\u4e8c\u5143) a<<b \u4f4d\u5143\u53f3\u79fb(\u4e8c\u5143) a>>b \u512a\u5148\u7d1a 8 \u5de6\u5230\u53f3 \u5c0f\u65bc(\u4e8c\u5143) a<b \u5c0f\u65bc\u7b49\u65bc(\u4e8c\u5143) a<=b \u5927\u65bc(\u4e8c\u5143) a>b \u5927\u65bc\u7b49\u65bc(\u4e8c\u5143) a>=b \u512a\u5148\u7d1a 9 \u5de6\u5230\u53f3 \u7b49\u65bc(\u4e8c\u5143) a==b \u4e0d\u7b49\u65bc(\u4e8c\u5143) a!=b \u512a\u5148\u7d1a 10 \u5de6\u5230\u53f3 \u4f4d\u5143 AND(\u4e00\u5143) a&b \u512a\u5148\u7d1a 11 \u5de6\u5230\u53f3 \u4f4d\u5143 XOR(\u4e00\u5143) a^b \u512a\u5148\u7d1a 12 \u5de6\u5230\u53f3 \u4f4d\u5143 OR(\u4e00\u5143) a|b \u512a\u5148\u7d1a 13 \u5de6\u5230\u53f3 \u908f\u8f2f AND(\u4e8c\u5143) condition1 && condition2 \u512a\u5148\u7d1a 14 \u5de6\u5230\u53f3 \u908f\u8f2f OR(\u4e8c\u5143) condition1 || condition2 \u512a\u5148\u7d1a 15 \u53f3\u81f3\u5de6 \u689d\u4ef6\u904b\u7b97\u5b50(\u4e09\u5143) a?b:c \u76f8\u7576\u65bc if(a){b}else{c} \u5426 \u512a\u5148\u7d1a 16 \u53f3\u81f3\u5de6 \u52a0\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a+=b \u540c a=a+b \u6e1b\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a-=b \u540c a=a-b \u4e58\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a*=b \u540c a=a*b \u9664\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a/=b \u540c a=a/b \u53d6\u6a21 + \u8ce6\u503c(\u4e8c\u5143) a%=b \u540c a=a%b \u4f4d\u5143 AND + \u8ce6\u503c(\u4e8c\u5143) a&=b \u540c a=a&b \u4f4d\u5143 OR + \u8ce6\u503c(\u4e8c\u5143) a|=b \u540c a=a|b \u4f4d\u5143 XOR + \u8ce6\u503c(\u4e8c\u5143) a^=b \u540c a=a^b \u4f4d\u5143\u5de6\u79fb + \u8ce6\u503c(\u4e8c\u5143) a<<=b \u540c a=a<<b \u4f4d\u5143\u53f3\u79fb + \u8ce6\u503c(\u4e8c\u5143) a>>=b \u540c a=a>>b \u512a\u5148\u7d1a 17 \u53f3\u81f3\u5de6 \u4e1f\u64f2\u7570\u5e38 throw \u5426 \u512a\u5148\u7d1a 18 \u5de6\u5230\u53f3 \u9017\u865f\u904b\u7b97\u5b50(\u4e8c\u5143) a,b \u4e1f\u68c4\u5de6\u503c","title":"\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_1","text":"\u4e0b\u6587\u4e2d\u7684\u6240\u6709\u8a9e\u6cd5\uff0c a , b , c , condition1 , condition2 \u90fd\u662f\u8b8a\u6578\u540d\u7a31\u3002","title":"\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_2","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u6b63\u865f(\u4e00\u5143) +a \u8ca0\u865f(\u4e00\u5143) -a \u52a0\u6cd5(\u4e8c\u5143) a+b \u6e1b\u6cd5(\u4e8c\u5143) a-b \u4e58\u6cd5(\u4e8c\u5143) a*b \u9664\u6cd5(\u4e8c\u5143) a/b \u6a21\u6578(\u4e8c\u5143) a%b \u53d6\u9918\u6578","title":"\u7b97\u8853\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_3","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u524d\u7db4\u905e\u589e(\u4e00\u5143) ++a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u5f8c\u7db4\u905e\u589e(\u4e00\u5143) a++ \u56de\u50b3\u503c\u5f8c\u518d\u905e\u589e \u524d\u7db4\u905e\u6e1b(\u4e00\u5143) --a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u5f8c\u7db4\u905e\u6e1b(\u4e00\u5143) a-- \u56de\u50b3\u503c\u5f8c\u518d\u905e\u6e1b","title":"\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_4","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u4f4d\u5143 AND(\u4e00\u5143) a&b \u4f4d\u5143 XOR(\u4e00\u5143) a^b \u4f4d\u5143 OR(\u4e00\u5143) a|b \u4f4d\u5143 \u4e00\u7684\u88dc\u6578(\u4e00\u5143) ~a \u4f4d\u5143\u5de6\u79fb(\u4e8c\u5143) a<<b \u4f4d\u5143\u53f3\u79fb(\u4e8c\u5143) a>>b","title":"\u4f4d\u5143\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_5","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u8ce6\u503c(\u4e8c\u5143) a=b \u7b97\u6578/\u4f4d\u5143\u904b\u7b97\u5b50\u7686\u53ef\u4ee5\u548c\u8ce6\u503c\u904b\u7b97\u5b50\u5408\u4f75\uff0c\u5982\u4e0b\u8868\uff1a \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u52a0\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a+=b \u540c a=a+b \u6e1b\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a-=b \u540c a=a-b \u4e58\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a*=b \u540c a=a*b \u9664\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a/=b \u540c a=a/b \u53d6\u6a21 + \u8ce6\u503c(\u4e8c\u5143) a%=b \u540c a=a%b \u4f4d\u5143 AND + \u8ce6\u503c(\u4e8c\u5143) a&=b \u540c a=a&b \u4f4d\u5143 OR + \u8ce6\u503c(\u4e8c\u5143) a|=b \u540c a=a|b \u4f4d\u5143 XOR + \u8ce6\u503c(\u4e8c\u5143) a^=b \u540c a=a^b \u4f4d\u5143\u5de6\u79fb + \u8ce6\u503c(\u4e8c\u5143) a<<=b \u540c a=a<<b \u4f4d\u5143\u53f3\u79fb + \u8ce6\u503c(\u4e8c\u5143) a>>=b \u540c a=a>>b","title":"\u8ce6\u503c\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_6","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u5c0f\u65bc(\u4e8c\u5143) a<b \u5c0f\u65bc\u7b49\u65bc(\u4e8c\u5143) a<=b \u5927\u65bc(\u4e8c\u5143) a>b \u5927\u65bc\u7b49\u65bc(\u4e8c\u5143) a>=b \u7b49\u65bc(\u4e8c\u5143) a==b \u4e0d\u7b49\u65bc(\u4e8c\u5143) a!=b","title":"\u6bd4\u8f03\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_7","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u908f\u8f2f AND(\u4e8c\u5143) condition1 && condition2 \u908f\u8f2f OR(\u4e8c\u5143) condition1 || condition2 \u908f\u8f2f \u975e(\u4e00\u5143) !condition1","title":"\u908f\u8f2f\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_8","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u9017\u865f\u904b\u7b97\u5b50(\u4e8c\u5143) a,b \u4e1f\u68c4\u5de6\u503c\uff0c\u56de\u50b3\u53f3\u908a\u7684\u503c","title":"\u9017\u865f\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_9","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u689d\u4ef6\u904b\u7b97\u5b50(\u4e09\u5143) a?b:c \u76f8\u7576\u65bc if(a){b}else{c}","title":"\u689d\u4ef6\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_10","text":"\u8aaa\u660e \u512a\u5148\u7d1a\u8d8a\u9ad8(\u6578\u5b57\u8d8a\u5c0f)\uff0c\u6703\u8d8a\u5148\u57f7\u884c\u3002 \u5982\u679c\u5169\u500b\u904b\u7b97\u5b50\u512a\u5148\u7d1a\u76f8\u540c\uff0c\u4f9d\u7167\u7d50\u5408\u6027\u7684\u65b9\u5411\u57f7\u884c\u3002 \u591a\u8f09\u6027\u53ea\u6a19\u8a3b\u5426\u7684\u904b\u7b97\u5b50\uff0c\u672a\u6a19\u8a18\u7684\u904b\u7b97\u5b50\u90fd\u662f\u53ef\u591a\u8f09\u7684\u3002 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u591a\u8f09\u6027 \u7d50\u5408\u6027 \u512a\u5148\u7d1a 1 :: \u4f5c\u7528\u57df\u89e3\u6790(C++\u5c08\u6709) \u5426 \u512a\u5148\u7d1a 2 \u5de6\u5230\u53f3 \u5f8c\u7db4\u905e\u589e(\u4e00\u5143) a++ \u56de\u50b3\u503c\u5f8c\u518d\u905e\u589e \u5f8c\u7db4\u905e\u6e1b(\u4e00\u5143) a-- \u56de\u50b3\u503c\u5f8c\u518d\u905e\u6e1b () \u51fd\u793a\u547c\u53eb [] \u9663\u5217\u5b58\u53d6 a.b \u4ee5\u7269\u4ef6\u65b9\u5f0f\u5b58\u53d6\u6210\u54e1 \u5426 a->b \u4ee5\u6307\u6a19\u65b9\u5f0f\u5b58\u53d6\u6210\u54e1 dynamic_cast \u57f7\u884c\u6642\u6aa2\u67e5\u985e\u578b\u8f49\u63db(C++\u5c08\u6709) \u5426 static_cast \u672a\u7d93\u6aa2\u67e5\u7684\u985e\u578b\u8f49\u63db(C++\u5c08\u6709) \u5426 reinterpret_cast \u91cd\u5b9a\u7fa9\u985e\u578b\u8f49\u63db(C++\u5c08\u6709) \u5426 const_cast \u66f4\u6539\u975e\u5e38\u6578\u5c6c\u6027(C++\u5c08\u6709) \u5426 typeid \u53d6\u5f97\u985e\u578b\u8cc7\u8a0a(C++\u5c08\u6709) \u5426 \u512a\u5148\u7d1a 3 \u53f3\u81f3\u5de6 \u524d\u7db4\u905e\u589e(\u4e00\u5143) ++a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u524d\u7db4\u905e\u6e1b(\u4e00\u5143) --a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u6b63\u865f(\u4e00\u5143) +a \u8ca0\u865f(\u4e00\u5143) -a \u908f\u8f2f \u975e(\u4e00\u5143) !condition1 \u4f4d\u5143 \u4e00\u7684\u88dc\u6578(\u4e00\u5143) ~a \u53d6\u503c int val=*ptr \u53d6\u6307\u6a19\u6307\u5411\u7684\u503c \u53d6\u5740 int *ptr=&a \u53d6\u8b8a\u6578\u7684\u540d\u5b57 sizeof(a) \u53d6\u8b8a\u6578\u7684\u8a18\u61b6\u9ad4\u5927\u5c0f \u5426 new , new[] \u52d5\u614b\u8a18\u61b6\u9ad4\u5206\u914d(C++\u5c08\u6709) delete , delete[] \u52d5\u614b\u8a18\u61b6\u9ad4\u91cb\u653e(C++\u5c08\u6709) \u512a\u5148\u7d1a 4 \u5de6\u5230\u53f3 .* \u6210\u54e1\u7269\u4ef6\u9078\u64c7(C++\u5c08\u6709) ->* \u6210\u54e1\u6307\u6a19\u9078\u64c7(C++\u5c08\u6709) \u512a\u5148\u7d1a 5 \u5de6\u5230\u53f3 \u4e58\u6cd5(\u4e8c\u5143) a*b \u9664\u6cd5(\u4e8c\u5143) a/b \u6a21\u6578(\u4e8c\u5143) a%b \u53d6\u9918\u6578 \u512a\u5148\u7d1a 6 \u5de6\u5230\u53f3 \u52a0\u6cd5(\u4e8c\u5143) a+b \u6e1b\u6cd5(\u4e8c\u5143) a-b \u512a\u5148\u7d1a 7 \u5de6\u5230\u53f3 \u4f4d\u5143\u5de6\u79fb(\u4e8c\u5143) a<<b \u4f4d\u5143\u53f3\u79fb(\u4e8c\u5143) a>>b \u512a\u5148\u7d1a 8 \u5de6\u5230\u53f3 \u5c0f\u65bc(\u4e8c\u5143) a<b \u5c0f\u65bc\u7b49\u65bc(\u4e8c\u5143) a<=b \u5927\u65bc(\u4e8c\u5143) a>b \u5927\u65bc\u7b49\u65bc(\u4e8c\u5143) a>=b \u512a\u5148\u7d1a 9 \u5de6\u5230\u53f3 \u7b49\u65bc(\u4e8c\u5143) a==b \u4e0d\u7b49\u65bc(\u4e8c\u5143) a!=b \u512a\u5148\u7d1a 10 \u5de6\u5230\u53f3 \u4f4d\u5143 AND(\u4e00\u5143) a&b \u512a\u5148\u7d1a 11 \u5de6\u5230\u53f3 \u4f4d\u5143 XOR(\u4e00\u5143) a^b \u512a\u5148\u7d1a 12 \u5de6\u5230\u53f3 \u4f4d\u5143 OR(\u4e00\u5143) a|b \u512a\u5148\u7d1a 13 \u5de6\u5230\u53f3 \u908f\u8f2f AND(\u4e8c\u5143) condition1 && condition2 \u512a\u5148\u7d1a 14 \u5de6\u5230\u53f3 \u908f\u8f2f OR(\u4e8c\u5143) condition1 || condition2 \u512a\u5148\u7d1a 15 \u53f3\u81f3\u5de6 \u689d\u4ef6\u904b\u7b97\u5b50(\u4e09\u5143) a?b:c \u76f8\u7576\u65bc if(a){b}else{c} \u5426 \u512a\u5148\u7d1a 16 \u53f3\u81f3\u5de6 \u52a0\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a+=b \u540c a=a+b \u6e1b\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a-=b \u540c a=a-b \u4e58\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a*=b \u540c a=a*b \u9664\u6cd5 + \u8ce6\u503c(\u4e8c\u5143) a/=b \u540c a=a/b \u53d6\u6a21 + \u8ce6\u503c(\u4e8c\u5143) a%=b \u540c a=a%b \u4f4d\u5143 AND + \u8ce6\u503c(\u4e8c\u5143) a&=b \u540c a=a&b \u4f4d\u5143 OR + \u8ce6\u503c(\u4e8c\u5143) a|=b \u540c a=a|b \u4f4d\u5143 XOR + \u8ce6\u503c(\u4e8c\u5143) a^=b \u540c a=a^b \u4f4d\u5143\u5de6\u79fb + \u8ce6\u503c(\u4e8c\u5143) a<<=b \u540c a=a<<b \u4f4d\u5143\u53f3\u79fb + \u8ce6\u503c(\u4e8c\u5143) a>>=b \u540c a=a>>b \u512a\u5148\u7d1a 17 \u53f3\u81f3\u5de6 \u4e1f\u64f2\u7570\u5e38 throw \u5426 \u512a\u5148\u7d1a 18 \u5de6\u5230\u53f3 \u9017\u865f\u904b\u7b97\u5b50(\u4e8c\u5143) a,b \u4e1f\u68c4\u5de6\u503c","title":"\u512a\u5148\u9806\u5e8f"},{"location":"syntax/pointer/","text":"\u6307\u6a19 \u53c3\u8003 \u53c3\u8003\u578b\u614b\u4ee3\u8868\u4e00\u500b\u8b8a\u6578\u7684\u5225\u540d\uff0c\u53ef\u76f4\u63a5\u53d6\u5f97\u8b8a\u6578\u7684\u4f4d\u5740\uff0c\u4e26\u9593\u63a5\u900f\u904e\u53c3\u8003\u578b\u614b\u5225\u540d\u4f86\u64cd\u4f5c\u7269\u4ef6\uff0c\u4f5c\u7528\u985e\u4f3c\u65bc\u6307\u6a19\uff0c\u4f46\u537b\u4e0d\u5fc5\u4f7f\u7528\u6307\u6a19\u8a9e\u6cd5\uff0c\u4e5f\u5c31\u662f\u4e0d\u5fc5\u4f7f * \u904b\u7b97\u5b50\u4f86\u63d0\u53d6\u503c\u3002 const int N = 100; int a[N][N]; for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { int &x = a[i][j]; x = i + j; } } \u53c3\u8003\u578b\u614b\u53ef\u7528\u5728\u53d6\u4ee3\u592a\u9577\u7684\u8b8a\u6578\uff08\u5982\uff1a a[x][y][z] )\uff0c\u5bb9\u6613\u7dad\u8b77\u3002\u53e6\u4e00\u500b\u662f\u7576\u51fd\u5f0f\u8981\u50b3\u5165\u53ef\u4fee\u6539\u7684\u503c\uff0c\u53ef\u53d6\u4ee3\u6307\u6a19\u3002 \u50b3\u503c \u51fd\u5f0f\u50b3\u5165\u7684\u53c3\u6578\uff0c\u53ef\u4ee5\u662f\u4e00\u822c\u3001\u6307\u6a19\u6216\u662f\u53c3\u8003\u578b\u614b\uff0c\u4ee5\u4e0b\u4ee5 Swap \u4f86\u4ecb\u7d39 call by value \u50b3\u5165\u7684\u8b8a\u6578\u70ba\u4e00\u822c\u578b\u614b\uff0c\u6703 \"\u8907\u88fd\" \u4e00\u4efd\u5230\u51fd\u5f0f\uff0c\u539f\u672c\u7684\u8b8a\u6578\u4e0d\u6703\u6709\u4efb\u4f55\u6539\u8b8a\u3002 void swap(int x, int y) { cout << x << ' ' << y << '\\n'; // 1 2 int t = x; x = y; y = t; cout << x << ' ' << y << '\\n'; // 2 1 } int main() { int a = 1, b = 2; cout << a << ' ' << b << '\\n'; // 1 2 swap(a, b); cout << a << ' ' << b << '\\n'; // 1 2 } call by address/value of pointer \u50b3\u5165\u7684\u8b8a\u6578\u70ba\u6307\u6a19\u578b\u614b\uff0c\u51fd\u5f0f\u5167\u7684\u8b8a\u6578\u6539\u8b8a\uff0c\u662f\u5c0d\u8a18\u61b6\u9ad4\u64cd\u4f5c\uff0c\u6240\u4ee5\u539f\u672c\u7684\u6578\u5b57\u4e5f\u6703\u8ddf\u8457\u6539\u8b8a\u3002 void swap(int *x, int *y) { cout << *x << ' ' << *y << '\\n'; // 1 2 int t = *x; *x = *y; *y = t; cout << *x << ' ' << *y << '\\n'; // 2 1 } int main() { int a = 1, b = 2; cout << a << ' ' << b << '\\n'; // 1 2 swap(&a, &b); cout << a << ' ' << b << '\\n'; // 2 1 } call by reference \u50b3\u5165\u7684\u8b8a\u6578\u70ba\u53c3\u8003\u578b\u614b\uff0c\u51fd\u6578\u5167\u7684\u8b8a\u6578\u662f\u539f\u672c\u8b8a\u6578\u7684\u5206\u8eab\uff0c\u6240\u4ee5\u51fd\u6578\u5167\u8b8a\u6578\u6539\u8b8a\u6642\uff0c\u539f\u672c\u8b8a\u6578\u4e5f\u6703\u8ddf\u8005\u6539\u8b8a\u3002 void swap(int &x, int &y) { cout << x << ' ' << y << '\\n'; // 1 2 int t = x; x = y; y = t; cout << x << ' ' << y << '\\n'; // 2 1 } int main() { int a = 1, b = 2; cout << a << ' ' << b << '\\n'; // 1 2 swap(a, b); cout << a << ' ' << b << '\\n'; // 2 1 }","title":"\u6307\u6a19"},{"location":"syntax/pointer/#_1","text":"","title":"\u6307\u6a19"},{"location":"syntax/pointer/#_2","text":"\u53c3\u8003\u578b\u614b\u4ee3\u8868\u4e00\u500b\u8b8a\u6578\u7684\u5225\u540d\uff0c\u53ef\u76f4\u63a5\u53d6\u5f97\u8b8a\u6578\u7684\u4f4d\u5740\uff0c\u4e26\u9593\u63a5\u900f\u904e\u53c3\u8003\u578b\u614b\u5225\u540d\u4f86\u64cd\u4f5c\u7269\u4ef6\uff0c\u4f5c\u7528\u985e\u4f3c\u65bc\u6307\u6a19\uff0c\u4f46\u537b\u4e0d\u5fc5\u4f7f\u7528\u6307\u6a19\u8a9e\u6cd5\uff0c\u4e5f\u5c31\u662f\u4e0d\u5fc5\u4f7f * \u904b\u7b97\u5b50\u4f86\u63d0\u53d6\u503c\u3002 const int N = 100; int a[N][N]; for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { int &x = a[i][j]; x = i + j; } } \u53c3\u8003\u578b\u614b\u53ef\u7528\u5728\u53d6\u4ee3\u592a\u9577\u7684\u8b8a\u6578\uff08\u5982\uff1a a[x][y][z] )\uff0c\u5bb9\u6613\u7dad\u8b77\u3002\u53e6\u4e00\u500b\u662f\u7576\u51fd\u5f0f\u8981\u50b3\u5165\u53ef\u4fee\u6539\u7684\u503c\uff0c\u53ef\u53d6\u4ee3\u6307\u6a19\u3002","title":"\u53c3\u8003"},{"location":"syntax/pointer/#_3","text":"\u51fd\u5f0f\u50b3\u5165\u7684\u53c3\u6578\uff0c\u53ef\u4ee5\u662f\u4e00\u822c\u3001\u6307\u6a19\u6216\u662f\u53c3\u8003\u578b\u614b\uff0c\u4ee5\u4e0b\u4ee5 Swap \u4f86\u4ecb\u7d39","title":"\u50b3\u503c"},{"location":"syntax/pointer/#call-by-value","text":"\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u4e00\u822c\u578b\u614b\uff0c\u6703 \"\u8907\u88fd\" \u4e00\u4efd\u5230\u51fd\u5f0f\uff0c\u539f\u672c\u7684\u8b8a\u6578\u4e0d\u6703\u6709\u4efb\u4f55\u6539\u8b8a\u3002 void swap(int x, int y) { cout << x << ' ' << y << '\\n'; // 1 2 int t = x; x = y; y = t; cout << x << ' ' << y << '\\n'; // 2 1 } int main() { int a = 1, b = 2; cout << a << ' ' << b << '\\n'; // 1 2 swap(a, b); cout << a << ' ' << b << '\\n'; // 1 2 }","title":"call by value"},{"location":"syntax/pointer/#call-by-addressvalue-of-pointer","text":"\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u6307\u6a19\u578b\u614b\uff0c\u51fd\u5f0f\u5167\u7684\u8b8a\u6578\u6539\u8b8a\uff0c\u662f\u5c0d\u8a18\u61b6\u9ad4\u64cd\u4f5c\uff0c\u6240\u4ee5\u539f\u672c\u7684\u6578\u5b57\u4e5f\u6703\u8ddf\u8457\u6539\u8b8a\u3002 void swap(int *x, int *y) { cout << *x << ' ' << *y << '\\n'; // 1 2 int t = *x; *x = *y; *y = t; cout << *x << ' ' << *y << '\\n'; // 2 1 } int main() { int a = 1, b = 2; cout << a << ' ' << b << '\\n'; // 1 2 swap(&a, &b); cout << a << ' ' << b << '\\n'; // 2 1 }","title":"call by address/value of pointer"},{"location":"syntax/pointer/#call-by-reference","text":"\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u53c3\u8003\u578b\u614b\uff0c\u51fd\u6578\u5167\u7684\u8b8a\u6578\u662f\u539f\u672c\u8b8a\u6578\u7684\u5206\u8eab\uff0c\u6240\u4ee5\u51fd\u6578\u5167\u8b8a\u6578\u6539\u8b8a\u6642\uff0c\u539f\u672c\u8b8a\u6578\u4e5f\u6703\u8ddf\u8005\u6539\u8b8a\u3002 void swap(int &x, int &y) { cout << x << ' ' << y << '\\n'; // 1 2 int t = x; x = y; y = t; cout << x << ' ' << y << '\\n'; // 2 1 } int main() { int a = 1, b = 2; cout << a << ' ' << b << '\\n'; // 1 2 swap(a, b); cout << a << ' ' << b << '\\n'; // 2 1 }","title":"call by reference"},{"location":"syntax/string/","text":"","title":"\u5b57\u4e32"},{"location":"syntax/struct/","text":"struct struct \u53ef\u5c07\u539f\u672c\u7368\u7acb\u7684\u8cc7\u6599\u5305\u5728\u4e00\u8d77\u3002\u4f8b\u5982\uff1a\u4e09\u7dad\u7a7a\u9593\u7531 x \u5ea7\u6a19\u3001y \u5ea7\u6a19\u3001z \u5ea7\u6a19\u7d44\u6210\u3002 \u8a9e\u6cd5 \u578b\u614b\uff08type\uff09\u53ef\u4ee5\u662f\u4e00\u822c\u6216\u662f\u6307\u6a19\u578b\u614b \u4e5f\u53ef\u4ee5\u5beb\u51fd\u5f0f\u6216\u91cd\u8f09\u904b\u7b97\u5b50 struct struct_name { type1 name1; type2 name2; ... }; //<-notice \u4ee5\u4e0b\u7684\u4f8b\u5b50\u70ba\u5e73\u9762\u4e0a\u7684\u9ede\u3002 struct Plane { int x, y; Plane(){}; Plane(int _x, int _y) : x(_x), y(_y) {} Plane add(const Plane &rhs) const { return Plane(x + rhs.x, y + rhs.y); } bool operator<(const Plane &rhs) const { if (x != rhs.x) return x < rhs.x; return y < rhs.y; } ~Plane(){}; } int main() { Plane p1; Plane p2(1, 2); Plane p3 = Plane(); Plane p4 = Plane(0, 0); } \u5efa\u69cb\u5b50\uff08constructor)\u3001\u89e3\u69cb\u5b50\uff08destructor) \u5efa\u69cb\u5b50\u548c strcut name \u540c\u540d\uff0c\u662f\u7528\u4f86\u521d\u59cb\u5316 struct \u88e1\u7684\u8cc7\u6599\uff0c\u5982\u679c\u4e0d\u5beb\u7684\u8a71\uff0c\u6703\u6709\u9810\u8a2d\u5efa\u69cb\u5b50\uff0c\u88e1\u9762\u7684\u8cc7\u6599\u90fd\u662f\u4e82\u6578\u3002\u6839\u64da\u8acb\u6cc1\u53ef\u591a\u8f09\uff0c\u7136\u800c\uff0c\u5982\u679c\u4f60\u5beb\u4e86\u904b\u7b97\u5b50\uff0c\u4e00\u5b9a\u8981\u5beb\u4e00\u500b\u4e0d\u5e36\u4efb\u4f55\u53c3\u6578\u7684\u904b\u7b97\u5b50\uff0c\u5426\u5247\u7684\u8a71\uff0c\u50cf\u7b2c 14 \u884c\u9019\u6a23\u53ea\u6709\u5ba3\u544a\uff0c\u6c92\u52a0\u5176\u4ed6\u6771\u897f\u7684\u7684\u7a0b\u5f0f\u78bc\u5c31\u4e0d\u6703\u901a\u904e\u3002 \u89e3\u69cb\u5b50\u7684\u540d\u5b57\u5f62\u5f0f\u70ba ~strcut name \uff0c\u662f\u5728\u8b8a\u6578\u96e2\u958b\u4f5c\u7528\u57df\u6642\u904b\u4f5c\uff0c\u4e0d\u5beb\u7684\u8a71\u4e5f\u662f\u6703\u6709\u9810\u8a2d\u89e3\u69cb\u5b50\uff0c\u5728\u7a0b\u5f0f\u6bd4\u8cfd\u4e2d\u9019\u6a23\u5c31\u5df2\u8db3\u5920\u3002 \u91cd\u8f09\u904b\u7b97\u5b50 c++ \u539f\u6709\u7684\u578b\u614b\u90fd\u6839\u64da\u9700\u8981\uff0c\u5b9a\u7fa9\u4e86\u5404\u7a2e\u904b\u7b97\u5b50\uff0c\u4f46 struct \u5982\u679c\u6709\u9700\u8981\u7684\u8a71\uff0c\u9808\u81ea\u5df1\u5b9a\u7fa9\u3002\u800c\u5728\u7af6\u8cfd\u4e2d\uff0c\u5e38\u9700\u8981\u4f5c\u6392\u5e8f\u800c\u9700\u8981\u5c0f\u65bc\u904b\u7b97\u5b50\uff08 < )\u3002","title":"struct"},{"location":"syntax/struct/#struct","text":"struct \u53ef\u5c07\u539f\u672c\u7368\u7acb\u7684\u8cc7\u6599\u5305\u5728\u4e00\u8d77\u3002\u4f8b\u5982\uff1a\u4e09\u7dad\u7a7a\u9593\u7531 x \u5ea7\u6a19\u3001y \u5ea7\u6a19\u3001z \u5ea7\u6a19\u7d44\u6210\u3002 \u8a9e\u6cd5 \u578b\u614b\uff08type\uff09\u53ef\u4ee5\u662f\u4e00\u822c\u6216\u662f\u6307\u6a19\u578b\u614b \u4e5f\u53ef\u4ee5\u5beb\u51fd\u5f0f\u6216\u91cd\u8f09\u904b\u7b97\u5b50 struct struct_name { type1 name1; type2 name2; ... }; //<-notice \u4ee5\u4e0b\u7684\u4f8b\u5b50\u70ba\u5e73\u9762\u4e0a\u7684\u9ede\u3002 struct Plane { int x, y; Plane(){}; Plane(int _x, int _y) : x(_x), y(_y) {} Plane add(const Plane &rhs) const { return Plane(x + rhs.x, y + rhs.y); } bool operator<(const Plane &rhs) const { if (x != rhs.x) return x < rhs.x; return y < rhs.y; } ~Plane(){}; } int main() { Plane p1; Plane p2(1, 2); Plane p3 = Plane(); Plane p4 = Plane(0, 0); }","title":"struct"},{"location":"syntax/struct/#constructordestructor","text":"\u5efa\u69cb\u5b50\u548c strcut name \u540c\u540d\uff0c\u662f\u7528\u4f86\u521d\u59cb\u5316 struct \u88e1\u7684\u8cc7\u6599\uff0c\u5982\u679c\u4e0d\u5beb\u7684\u8a71\uff0c\u6703\u6709\u9810\u8a2d\u5efa\u69cb\u5b50\uff0c\u88e1\u9762\u7684\u8cc7\u6599\u90fd\u662f\u4e82\u6578\u3002\u6839\u64da\u8acb\u6cc1\u53ef\u591a\u8f09\uff0c\u7136\u800c\uff0c\u5982\u679c\u4f60\u5beb\u4e86\u904b\u7b97\u5b50\uff0c\u4e00\u5b9a\u8981\u5beb\u4e00\u500b\u4e0d\u5e36\u4efb\u4f55\u53c3\u6578\u7684\u904b\u7b97\u5b50\uff0c\u5426\u5247\u7684\u8a71\uff0c\u50cf\u7b2c 14 \u884c\u9019\u6a23\u53ea\u6709\u5ba3\u544a\uff0c\u6c92\u52a0\u5176\u4ed6\u6771\u897f\u7684\u7684\u7a0b\u5f0f\u78bc\u5c31\u4e0d\u6703\u901a\u904e\u3002 \u89e3\u69cb\u5b50\u7684\u540d\u5b57\u5f62\u5f0f\u70ba ~strcut name \uff0c\u662f\u5728\u8b8a\u6578\u96e2\u958b\u4f5c\u7528\u57df\u6642\u904b\u4f5c\uff0c\u4e0d\u5beb\u7684\u8a71\u4e5f\u662f\u6703\u6709\u9810\u8a2d\u89e3\u69cb\u5b50\uff0c\u5728\u7a0b\u5f0f\u6bd4\u8cfd\u4e2d\u9019\u6a23\u5c31\u5df2\u8db3\u5920\u3002","title":"\u5efa\u69cb\u5b50\uff08constructor)\u3001\u89e3\u69cb\u5b50\uff08destructor)"},{"location":"syntax/struct/#_1","text":"c++ \u539f\u6709\u7684\u578b\u614b\u90fd\u6839\u64da\u9700\u8981\uff0c\u5b9a\u7fa9\u4e86\u5404\u7a2e\u904b\u7b97\u5b50\uff0c\u4f46 struct \u5982\u679c\u6709\u9700\u8981\u7684\u8a71\uff0c\u9808\u81ea\u5df1\u5b9a\u7fa9\u3002\u800c\u5728\u7af6\u8cfd\u4e2d\uff0c\u5e38\u9700\u8981\u4f5c\u6392\u5e8f\u800c\u9700\u8981\u5c0f\u65bc\u904b\u7b97\u5b50\uff08 < )\u3002","title":"\u91cd\u8f09\u904b\u7b97\u5b50"},{"location":"syntax/type/","text":"\u57fa\u790e\u8cc7\u6599\u578b\u614b\u578b\u5225 \u5132\u5b58\u8cc7\u6599 \u96fb\u8166\u662f\u4ee5\u4e8c\u9032\u4f4d\u5132\u5b58\u8cc7\u6599\uff0c\u4e8c\u9032\u4f4d\u662f\u6307\u6578\u5b57\u662f\u7531 0,1 \u7d44\u6210\uff0c\u76f8\u8f03\u65bc\u5e38\u898b\u7684\u5341\u9032\u4f4d\u662f\u7531 0~9 \u7d44\u6210\uff0c\u4e00\u500b 0 \u6216 1 \u7a31\u70ba\u4f4d\u5143 (bit)\uff0c8 bits \u7a31\u70ba byte\uff08\u4f4d\u5143\u7d44\uff09\uff0cbyte \u662f\u96fb\u8166\u57fa\u672c\u5132\u5b58\u55ae\u4f4d\uff0c\u4e0b\u8868\u70ba\u5404\u7a2e\u5e38\u898b\u96fb\u8166\u5132\u5b58\u55ae\u4f4d\u3002 \u55ae\u4f4d \u5099\u8a3b 1B 1 byte 1KB 1024 bytes 1MB 1024 KBs 1GB 1024 MBs \u5728 C/C++ \u88e1\uff0c\u5c07\u6240\u6709\u7684\u57fa\u790e\u8cc7\u6599\u578b\u614b\u5206\u6210\u56db\u985e\u8aaa\u660e\uff0c\u4f9d\u5e8f\u662f\u6574\u6578\u3001\u6d6e\u9ede\u6578\u3001\u5b57\u5143\u3001\u5e03\u6797\u503c\u3002 \u6574\u6578 \u6574\u6578\u5206\u6210\u5169\u500b\u90e8\u5206\uff0c\u6700\u5de6\u908a\u7684\u4f4d\u5143\u8868\u793a\u6b63\u8ca0\u865f\uff08 0 : \u6b63\uff0c 1 : \u8ca0\uff09\uff0c\u5176\u9918\u8868\u793a\u6578\u5b57\u3002 \u901a\u5e38\u6703\u4ee5 int \u4f5c\u70ba\u6574\u6578\u578b\u614b\uff0cint \u517c\u9867\u7bc4\u570d\u5927\u5c0f\u548c\u8a18\u61b6\u9ad4\u5927\u5c0f\u3002\u5982\u679c\u5b58\u7684\u6578\u5b57\u4fdd\u8b49\u4e0d\u6703\u7528\u5230\u8ca0\u6578\u7684\u8a71\uff0c\u53ef\u4ee5\u5728\u524d\u9762\u52a0\u4e0a unsigned\uff0c\u9019\u6a23\u6700\u5de6\u908a\u7684\u4f4d\u5143\u4e5f\u6703\u7528\u4f86\u8868\u793a\u6578\u5b57\u3002 \u6ea2\u4f4d \u4e0a\u8868\u6709\u7d66\u51fa\u6bcf\u7a2e\u578b\u614b\u7684\u7bc4\u570d\u3002\u5047\u8a2d\u5169\u500b\u76f8\u540c\u578b\u614b\u52a0\u7e3d\u5f8c\u8d85\u904e\u7bc4\u570d\uff0c\u90a3\u9ebc\u6700\u9ad8\u4f4d\uff08\u6700\u5de6\u908a\uff09\u9032\u4f4d\u5f8c\u6703\u88ab\u6368\u53bb\uff0c\u9020\u6210\u7d50\u679c\u548c\u6b63\u78ba\u503c\u4e0d\u540c\uff0c\u9019\u500b\u72c0\u6cc1\u7a31\u4e4b\u70ba\u6ea2\u4f4d\u3002 #include <cstdio> int main() { int a = 1000000000, b = 2000000000; printf(\"%d\\n\", a + b); } -1294967296 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d short short int, signed short int 2 \u201332,768 to 32,767 unsigned short unsigned short int 2 0 to 65,535 int signed, signed int 4 \u20132,147,483,648 to 2,147,483,647 unsigned int unsigned 4 0 to 4,294,967,295 long long long long int, signed long long 8 \u20139,223,372,036,854,775,808 to 9,223,372,036,854,775,807 unsigned long long unsigned long long int 8 0 to 18,446,744,073,709,551,615 \u6d6e\u9ede\u6578 \u6d6e\u9ede\u6578\u5206\u6210 3 \u500b\u90e8\u5206\uff0csign bit\uff08\u7b26\u865f\uff09\uff1a\u7528\u4f86\u8868\u793a\u6b63\u8ca0\u865f\u3001exponent\uff08\u6307\u6578\uff09\uff1a\u7528\u4f86\u8868\u793a\u6b21\u65b9\u6578\u3001mantissa\uff08\u5c3e\u6578\uff09\uff1a\u7528\u4f86\u8868\u793a\u7cbe\u78ba\u5ea6\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d \u7cbe\u5ea6 float \u7121 4 3.4E +/- 38 7 digits double long double 8 1.7E +/- 308 15 digits \u6d6e\u9ede\u6578\u5132\u5b58\u4e5f\u6703\u6709\u9650\u5236\uff0c\u5982\u679c\u5c0f\u6578\u9ede\u5f8c\u500b\u4f4d\u6578\u904e\u591a\uff0c\u6703\u88ab\u6368\u53bb\u9020\u6210\u8aa4\u5dee\uff0cfloat \u4fdd\u8b49\u4ee5 10 \u9032\u4f4d\u8868\u793a\u6642\uff0c\u5c0f\u6578\u9ede\u5f8c 7 \u4f4d\u5167\u6703\u662f\u6b63\u78ba\uff0cdouble \u5247\u662f 15 \u4f4d\u3002 \u5b57\u5143 C/C++ \u63a1\u7528 ASCII \u5b57\u5143\u96c6\uff0c\u4e00\u500b\u6578\u5b57\u5c0d\u61c9\u4e00\u500b\u5b57\u6bcd\uff0c\u4f46\u9019\u4efd\u5b57\u5143\u96c6\u53ea\u6709\u82f1\u6587\u5b57\u6bcd\u3001\u6578\u5b57\u3001\u5e38\u898b\u7684\u7b26\u865f\uff0c\u5176\u4ed6\u570b\u5bb6\u7684\u6587\u5b57\u5247\u7121\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d char \u7121 1 -128 to 127 unsigned char \u7121 1 0 to 255 wchar \u7121 2 0 to 65,535 \u5e03\u6797\u503c\uff08C++) \u5e03\u6797\u503c\u53ea\u6709\u5169\u7a2e\u690d Ture (1 \u6216\u662f\u8aaa \u975e 0)\u3001False (0)\uff0c\u7576\u4f5c\u908f\u8f2f\u8b8a\u6578\uff0c\u76f8\u8f03\u5229\u7528\u6574\u6578\u578b\u614b\uff0c\u6709\u5169\u500b\u6709\u512a\u52e2\uff0c\u4e00\u500b\u662f\u7bc0\u7701\u8a18\u61b6\u9ad4\uff0c\u4e8c\u662f\u53ef\u4ee5\u660e\u78ba\u8868\u793a\u662f\u7528\u4f86\u8a18\u9304 True/False \u72c0\u614b\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d bool \u7121 1 0 to 1 \u5f8c\u8a18 \u9084\u6709\u4e00\u500b\u578b\u614b enum\uff0c\u9019\u88e1\u5148\u4e0d\u63d0\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d enum \u7121 varies TBA","title":"\u57fa\u672c\u8cc7\u6599\u578b\u614b"},{"location":"syntax/type/#_1","text":"","title":"\u57fa\u790e\u8cc7\u6599\u578b\u614b\u578b\u5225"},{"location":"syntax/type/#_2","text":"\u96fb\u8166\u662f\u4ee5\u4e8c\u9032\u4f4d\u5132\u5b58\u8cc7\u6599\uff0c\u4e8c\u9032\u4f4d\u662f\u6307\u6578\u5b57\u662f\u7531 0,1 \u7d44\u6210\uff0c\u76f8\u8f03\u65bc\u5e38\u898b\u7684\u5341\u9032\u4f4d\u662f\u7531 0~9 \u7d44\u6210\uff0c\u4e00\u500b 0 \u6216 1 \u7a31\u70ba\u4f4d\u5143 (bit)\uff0c8 bits \u7a31\u70ba byte\uff08\u4f4d\u5143\u7d44\uff09\uff0cbyte \u662f\u96fb\u8166\u57fa\u672c\u5132\u5b58\u55ae\u4f4d\uff0c\u4e0b\u8868\u70ba\u5404\u7a2e\u5e38\u898b\u96fb\u8166\u5132\u5b58\u55ae\u4f4d\u3002 \u55ae\u4f4d \u5099\u8a3b 1B 1 byte 1KB 1024 bytes 1MB 1024 KBs 1GB 1024 MBs \u5728 C/C++ \u88e1\uff0c\u5c07\u6240\u6709\u7684\u57fa\u790e\u8cc7\u6599\u578b\u614b\u5206\u6210\u56db\u985e\u8aaa\u660e\uff0c\u4f9d\u5e8f\u662f\u6574\u6578\u3001\u6d6e\u9ede\u6578\u3001\u5b57\u5143\u3001\u5e03\u6797\u503c\u3002","title":"\u5132\u5b58\u8cc7\u6599"},{"location":"syntax/type/#_3","text":"\u6574\u6578\u5206\u6210\u5169\u500b\u90e8\u5206\uff0c\u6700\u5de6\u908a\u7684\u4f4d\u5143\u8868\u793a\u6b63\u8ca0\u865f\uff08 0 : \u6b63\uff0c 1 : \u8ca0\uff09\uff0c\u5176\u9918\u8868\u793a\u6578\u5b57\u3002 \u901a\u5e38\u6703\u4ee5 int \u4f5c\u70ba\u6574\u6578\u578b\u614b\uff0cint \u517c\u9867\u7bc4\u570d\u5927\u5c0f\u548c\u8a18\u61b6\u9ad4\u5927\u5c0f\u3002\u5982\u679c\u5b58\u7684\u6578\u5b57\u4fdd\u8b49\u4e0d\u6703\u7528\u5230\u8ca0\u6578\u7684\u8a71\uff0c\u53ef\u4ee5\u5728\u524d\u9762\u52a0\u4e0a unsigned\uff0c\u9019\u6a23\u6700\u5de6\u908a\u7684\u4f4d\u5143\u4e5f\u6703\u7528\u4f86\u8868\u793a\u6578\u5b57\u3002","title":"\u6574\u6578"},{"location":"syntax/type/#_4","text":"\u4e0a\u8868\u6709\u7d66\u51fa\u6bcf\u7a2e\u578b\u614b\u7684\u7bc4\u570d\u3002\u5047\u8a2d\u5169\u500b\u76f8\u540c\u578b\u614b\u52a0\u7e3d\u5f8c\u8d85\u904e\u7bc4\u570d\uff0c\u90a3\u9ebc\u6700\u9ad8\u4f4d\uff08\u6700\u5de6\u908a\uff09\u9032\u4f4d\u5f8c\u6703\u88ab\u6368\u53bb\uff0c\u9020\u6210\u7d50\u679c\u548c\u6b63\u78ba\u503c\u4e0d\u540c\uff0c\u9019\u500b\u72c0\u6cc1\u7a31\u4e4b\u70ba\u6ea2\u4f4d\u3002 #include <cstdio> int main() { int a = 1000000000, b = 2000000000; printf(\"%d\\n\", a + b); } -1294967296 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d short short int, signed short int 2 \u201332,768 to 32,767 unsigned short unsigned short int 2 0 to 65,535 int signed, signed int 4 \u20132,147,483,648 to 2,147,483,647 unsigned int unsigned 4 0 to 4,294,967,295 long long long long int, signed long long 8 \u20139,223,372,036,854,775,808 to 9,223,372,036,854,775,807 unsigned long long unsigned long long int 8 0 to 18,446,744,073,709,551,615","title":"\u6ea2\u4f4d"},{"location":"syntax/type/#_5","text":"\u6d6e\u9ede\u6578\u5206\u6210 3 \u500b\u90e8\u5206\uff0csign bit\uff08\u7b26\u865f\uff09\uff1a\u7528\u4f86\u8868\u793a\u6b63\u8ca0\u865f\u3001exponent\uff08\u6307\u6578\uff09\uff1a\u7528\u4f86\u8868\u793a\u6b21\u65b9\u6578\u3001mantissa\uff08\u5c3e\u6578\uff09\uff1a\u7528\u4f86\u8868\u793a\u7cbe\u78ba\u5ea6\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d \u7cbe\u5ea6 float \u7121 4 3.4E +/- 38 7 digits double long double 8 1.7E +/- 308 15 digits \u6d6e\u9ede\u6578\u5132\u5b58\u4e5f\u6703\u6709\u9650\u5236\uff0c\u5982\u679c\u5c0f\u6578\u9ede\u5f8c\u500b\u4f4d\u6578\u904e\u591a\uff0c\u6703\u88ab\u6368\u53bb\u9020\u6210\u8aa4\u5dee\uff0cfloat \u4fdd\u8b49\u4ee5 10 \u9032\u4f4d\u8868\u793a\u6642\uff0c\u5c0f\u6578\u9ede\u5f8c 7 \u4f4d\u5167\u6703\u662f\u6b63\u78ba\uff0cdouble \u5247\u662f 15 \u4f4d\u3002","title":"\u6d6e\u9ede\u6578"},{"location":"syntax/type/#_6","text":"C/C++ \u63a1\u7528 ASCII \u5b57\u5143\u96c6\uff0c\u4e00\u500b\u6578\u5b57\u5c0d\u61c9\u4e00\u500b\u5b57\u6bcd\uff0c\u4f46\u9019\u4efd\u5b57\u5143\u96c6\u53ea\u6709\u82f1\u6587\u5b57\u6bcd\u3001\u6578\u5b57\u3001\u5e38\u898b\u7684\u7b26\u865f\uff0c\u5176\u4ed6\u570b\u5bb6\u7684\u6587\u5b57\u5247\u7121\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d char \u7121 1 -128 to 127 unsigned char \u7121 1 0 to 255 wchar \u7121 2 0 to 65,535","title":"\u5b57\u5143"},{"location":"syntax/type/#c","text":"\u5e03\u6797\u503c\u53ea\u6709\u5169\u7a2e\u690d Ture (1 \u6216\u662f\u8aaa \u975e 0)\u3001False (0)\uff0c\u7576\u4f5c\u908f\u8f2f\u8b8a\u6578\uff0c\u76f8\u8f03\u5229\u7528\u6574\u6578\u578b\u614b\uff0c\u6709\u5169\u500b\u6709\u512a\u52e2\uff0c\u4e00\u500b\u662f\u7bc0\u7701\u8a18\u61b6\u9ad4\uff0c\u4e8c\u662f\u53ef\u4ee5\u660e\u78ba\u8868\u793a\u662f\u7528\u4f86\u8a18\u9304 True/False \u72c0\u614b\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d bool \u7121 1 0 to 1","title":"\u5e03\u6797\u503c\uff08C++)"},{"location":"syntax/type/#_7","text":"\u9084\u6709\u4e00\u500b\u578b\u614b enum\uff0c\u9019\u88e1\u5148\u4e0d\u63d0\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d enum \u7121 varies TBA","title":"\u5f8c\u8a18"},{"location":"tool/cmd/","text":"","title":"\u547d\u4ee4\u5217"},{"location":"tool/codeBlocks/","text":"","title":"Code::Blocks"},{"location":"tool/sublimeText/","text":"","title":"Sublime Text"},{"location":"tool/vsCode/","text":"","title":"VS Code"}]}